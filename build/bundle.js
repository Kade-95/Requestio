require=function(e){var t=function t(r,n){return t.m.hasOwnProperty(r)?t.m[r]:"function"!=typeof e||n?"function"==typeof t.r?t.r(r,1):void 0:e(r,1)};t.m={},t.r=e;var r={};Object.defineProperty(r,"__esModule",{value:!0}),r.Func=void 0,r.Func=class{constructor(){this.capitals="ABCDEFGHIJKLMNOPQRSTUVWXYZ",this.smalls="abcdefghijklmnopqrstuvwxyz",this.digits="1234567890",this.symbols=",./?'!@#$%^&*()-_+=`~\\| ",this.months=["January","Febuary","March","April","May","June","July","August","September","October","November","December"],this.days=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],this.genders=["Male","Female","Do not disclose"],this.maritals=["Married","Single","Divorced","Widowed"],this.religions=["Christainity","Islam","Judaism","Paganism","Budism"],this.userTypes=["student","staff","admin","ceo"],this.staffRequests=["leave","allowance"],this.studentsRequests=["absence","academic"],this.subjectList=["Mathematics","English","Physics","Chemistry","Biology","Agriculture","Literature","History"].sort(),this.subjectLevels=["General","Senior","Science","Arts","Junior"],this.fontStyles=["Arial","Times New Roman","Helvetica","Times","Courier New","Verdana","Courier","Arial Narrow","Candara","Geneva","Calibri","Optima","Cambria","Garamond","Perpetua","Monaco","Didot","Brush Script MT","Lucida Bright","Copperplate","Serif","San-Serif","Georgia","Segoe UI"],this.pixelSizes=["0px","1px","2px","3px","4px","5px","6px","7px","8px","9px","10px","20px","30px","40px","50px","60px","70px","80px","90px","100px","None","Unset","auto","-webkit-fill-available"],this.colors=["Red","Green","Blue","Yellow","Black","White","Purple","Violet","Indigo","Orange","Transparent","None","Unset"],this.boldness=[100,200,300,400,500,600,700,800,900,1e3,"lighter","bold","bolder","normal","unset"],this.borderTypes=["Solid","Dotted","Double","Groove","Dashed","Inset","None","Unset","Outset","Rigged","Inherit","Initial"],this.shadows=["2px 2px 5px 2px red","2px 2px 5px green","2px 2px yellow","2px black","None","Unset"],this.borders=["1px solid black","2px dotted green","3px dashed yellow","1px double red","None","Unset"],this.alignment=["Left","Justified","Right","Center"]}extractSource(e){let t=this.inBetween(e,"$#&{","}&#$");try{t=JSON.parse(t)}catch(r){t={}}return t}indexAt(e="",t="",r=0){if(r=r||0,-1==e.indexOf(t))return-1;if(r>=(e=e.split(t)).length)return-1;let n=0;for(let i=0;i<e.length;i++)i<=r&&(n+=e[i].length);return n+t.length*r}combine(e="",t="",r="",n=0){let i=n=n||0,s=t===r?n+1:n,a=this.indexAt(e,t,i),o=this.indexAt(e,r,s);return-1==a||a+t.length>=e.length||-1==o?-1:e.slice(a,o+r.length)}allCombine(e="",t="",r=""){let n,i=0,s=[];for(;-1!=n;)n=this.combine(e,t,r,i),i++,-1!=n&&s.push(n);return s}inBetween(e="",t="",r="",n=0){let i=n=n||0,s=t===r?n+1:n,a=this.indexAt(e,t,i),o=this.indexAt(e,r,s);return-1==a||a+t.length>=e.length||-1==o?-1:e.slice(a+t.length,o)}allInBetween(e="",t="",r=""){let n,i=0,s=[];for(;-1!=n;)n=this.inBetween(e,t,r,i),i++,-1!=n&&s.push(n);return s}extractCSS(e){let t,r,n=e.style.cssText,i={};if(""!=n){let e;n=n.split("; ");for(let s of n)e=this.trem(s),t=this.jsStyleName(e.split(":")[0]),r=this.stringReplace(e.split(":").pop(),";",""),""!=t&&(i[t]=this.trem(r))}return i}trimMonthArray(){let e=[];for(let t=0;t<this.months.length;t++)e.push(this.months[t].slice(0,3));return e}jsStyleName(e=""){let t="";for(let r=0;r<e.length;r++)"-"==e[r]?t+=e[++r].toUpperCase():t+=e[r].toLowerCase();return t}cssStyleName(e=""){let t="";for(let r=0;r<e.length;r++)this.isCapital(e[r])&&(t+="-"),t+=e[r].toLowerCase();return t}textToCamelCased(e=""){let t="";for(let r in e)" "!=e[r]&&(0==r?t+=e[r].toLowerCase():this.isset(e[r-1])&&" "==e[r-1]?t+=e[r].toUpperCase():t+=e[r]);return t}camelCasedToText(e=""){let t="";for(let r in e)0!=r&&this.isCapital(e[r])?t+=" "+e[r].toLowerCase():t+=e[r];return t}emptyObject(e){return JSON.stringify(e)==JSON.stringify({})}random(e={limit:1,range:1}){let t;return this.emptyObject(e)?t=2*Math.random()-1:this.isset(e.limit)?t=Math.random()*e.limit:this.isset(e.range),t}range(e=1,t=1){let r=[];for(let n=t||0;n<e;n++)r.push(n);return r}generateRandom(e=5){for(var t=this.capitals+this.smalls+this.digits,r="",n=0;n<e;n++)r+=t[Math.floor(Math.random()*t.length)];return r}generateRandomHex(e=5){for(var t=this.capitals.slice(0,3)+this.smalls.slice(0,3)+this.digits,r="",n=0;n<e;n++)r+=t[Math.floor(Math.random()*t.length)];return r}generateKey(e=5){return Date.now().toString(e)+Math.random().toString(e).slice(2)}edittedUrl(e){var t=this.urlSplitter(e.url);return t.vars[e.toAdd]=e.addValue.toLowerCase(),this.urlMerger(t,e.toAdd)}addCommaToMoney(e=""){for(var t="",r=e.length-1;r>=0;r--)t+=e[r];for(e="",r=0;r<t.length;r++){let n=(r+1)%3;e+=t[r],0==n&&r!=t.length-1&&(e+=",")}for(t="",r=e.length-1;r>=0;r--)t+=e[r];return t}isCapital(e=""){if(1==e.length)return this.capitals.includes(e)}capitalize(e=""){return this.isCapital(e[0])?e:((e=e.split(""))[0]=this.capitals[this.smalls.indexOf(e[0])],this.stringReplace(e.toString(),",",""))}flip(e=""){return e.split("").reverse().join("")}isSmall(e=""){if(1==e.length)return this.smalls.includes(e)}isSymbol(e=""){if(1==e.length)return this.symbols.includes(e)}isName(e=""){for(var t in e)if(this.isDigit(e[t]))return!1;return!0}isPasswordValid(e=""){if(e.length>7)for(var t in e)if(this.isCapital(e[t]))for(var r in e)if(this.isSmall(e[r]))for(var n in e)if(this.isDigit(e[n]))for(var i in e)if(this.isSymbol(e[i]))return!0;return!1}isSubString(e="",t=""){return-1!=e.indexOf(t)}isDigit(e=""){return 1==(e=new String(e)).length&&this.digits.includes(e)}isEmail(e=""){var t=e.split("@");if(2!=t.length)return!1;if(this.isSpaceString(t[0]))return!1;var r=t[1].split(".");return 2==r.length&&!this.isSpaceString(r[0])&&!this.isSpaceString(r[1])}isTruthy(e){let t;return"boolean"==typeof e?t=e:"string"==typeof e?t="true"==e.toLocaleLowerCase()||"1"==e.toLocaleLowerCase():"number"==typeof e&&(t=1==e),t}isFalsy(e){let t;return"boolean"==typeof e?t=e:"string"==typeof e?t="false"==e.toLocaleLowerCase()||"0"==e.toLocaleLowerCase():"number"==typeof e&&(t=0==e),t}objectLength(e={}){return Object.keys(e).length}isSpaceString(e=""){if(""==e)return!0;for(var t in e)if(" "!=e[t])return!1;return!0}hasString(e="",t=""){for(var r in e)if(t==e[r])return!0;return!1}trem(e=""){if(" "==e[0]){for(var t="",r=0;r<e.length;r++)0!=r&&(t+=e[r]);e=this.trem(t)}if(" "==e[e.length-1]){for(t="",r=0;r<e.length;r++)r!=e.length-1&&(t+=e[r]);e=this.trem(t)}return e}stringReplace(e="",t="",r=""){var n="";for(let i=0;i<e.length;i++)e[i]==t?n+=r:n+=e[i];return n}converToRealPath(e=""){return"/"!=e[e.length-1]&&(e+="/"),e}isSpacialCharacter(e=""){for(var t=0;t<"'\\/:?*<>|!.".length;t++)if("'\\/:?*<>|!."[t]==e)return!0;return!1}countChar(e="",t=""){for(var r=0,n=0;n<e.length;n++)e[n]==t&&r++;return r}occurancesOf(e="",t=""){let r=[];for(let n=0;n<e.length;n++)e[n]===t&&r.push(n);return r}isset(e){return void 0!==e}isnull(e){return null==e}notNull(e){return this.isset(e)&&!this.isnull(e)}isArray(e){let t=!1;return"object"==typeof e&&(t=e.constructor===Array),t}isObject(e){let t=!1;return"object"==typeof e&&(t=e.constructor===Object),t}isString(e){let t=!1;return"string"==typeof e&&(t=e.constructor===String),t}isNumber(e){let t=!1;return"number"==typeof e&&(t=e.constructor===Number),t}isBool(e){let t=!1;return"boolean"==typeof e&&(t=e.constructor===Boolean),t}isfunction(e){return"function"==typeof e}async runParallel(e=[],t=(()=>{})){var r={};for(var n in e)r[n]=await e[n];t(r)}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}urlMerger(e="",t=""){var r=this.isset(e.hostType)?e.hostType:"http",n=this.isset(e.hostName)?e.hostName:"",i=this.isset(e.host)?e.port:"",s=this.isset(e.pathName)?e.pathName:"",a="?",o=!0;this.isset(e.vars)&&Object.keys(e.vars).map(r=>{o&&(a+=r+"="+e.vars[r]+"&"),r==t&&(o=!1)});var l=r+"::/"+n+":"+i+"/"+s+a;return(l=l.lastIndexOf("&")==l.length-1?l.slice(0,l.length-1):l).lastIndexOf("=")==l.length-1?l.slice(0,l.length-1):l}urlSplitter(e=""){if(this.isset(e)){var t=-1===(e=e.toString()).indexOf("://")?null:e.split("://")[0],r=e.split("://").pop(0),n=r.split("/")[0],i=n.split(":")[0],s=n.split(":").pop(0),a="/"+r.split("/").pop(0),o=a.split("?")[0],l=-1===a.indexOf("?")?null:a.split("?").pop(0),d={};if(null!=l){var c=l.split("&");for(var u in c){var h=c[u].split("=");h[1]?d[this.stringReplace(h[0],"-"," ")]=this.stringReplace(h[1],"-"," "):d[this.stringReplace(h[0],"-"," ")]=""}}return{location:e,httpType:t,fullPath:r,host:n,httphost:t+"://"+n,hostName:i,port:s,path:a,pathName:o,queries:l,vars:d}}}getUrlVars(e=""){var t=-1===(e=e.toString()).indexOf("?")?null:e.split("?").pop(0),r={};if(null!=t){var n=t.split("&");for(var i in n){var s=n[i].split("=");s[1]?r[this.stringReplace(s[0],"-"," ")]=this.stringReplace(s[1],"-"," "):r[this.stringReplace(s[0],"-"," ")]=""}}return r}};var n={};Object.defineProperty(n,"__esModule",{value:!0}),n.Matrix=void 0;let i=new r.Func;class s{constructor(e={rows:2,cols:2,contents:[]}){Object.keys(e).map(t=>{this[t]=e[t]}),this.rows=this.rows||2,this.cols=this.cols||2,this.contents=this.contents||[],this.setData(this.contents)}setData(e=[]){this.contents=e,this.data=[];for(let t=0;t<this.rows;t++){this.data[t]=[];for(let r=0;r<this.rows;r++)this.data[t][r]=e.shift()}}get structure(){let{rows:e,cols:t}=this;return{rows:e,cols:t}}add(e=0){if(e instanceof s)for(let t=0;t<this.rows;t++)for(let r=0;r<this.cols;r++)this.data[t][r]+=e.data[t][r];else if(e instanceof Array)for(let t=0;t<this.rows;t++)for(let r=0;r<this.cols;r++)this.data[t][r]+=e[t][r];else for(let t=0;t<this.rows;t++)for(let r=0;r<this.cols;r++)this.data[t][r]+=e}subtract(e=0){if(e instanceof s)for(let t=0;t<this.rows;t++)for(let r=0;r<this.cols;r++)this.data[t][r]-=e.data[t][r];else if(e instanceof Array)for(let t=0;t<this.rows;t++)for(let r=0;r<this.cols;r++)this.data[t][r]-=e[t][r];else for(let t=0;t<this.rows;t++)for(let r=0;r<this.cols;r++)this.data[t][r]-=e}multiply(e=1){if(e instanceof s)for(let t=0;t<this.rows;t++)for(let r=0;r<e.cols;r++)this.data[t][r]*=e.data[t][r];else if(e instanceof Array)for(let t=0;t<this.rows;t++)for(let r=0;r<this.cols;r++)this.data[t][r]*=e[t][r];else for(let t=0;t<this.rows;t++)for(let r=0;r<this.cols;r++)this.data[t][r]*=e}randomize(){this.map(e=>i.random())}transpose(){let e=new s({rows:this.cols,cols:this.rows});for(let t=0;t<this.rows;t++)for(let r=0;r<this.cols;r++)e.data[r][t]=this.data[t][r];Object.keys(e).map(t=>{this[t]=e[t]})}map(e=((e,...t)=>{})){for(let t=0;t<this.rows;t++)for(let r=0;r<this.cols;r++){let n=this.data[t][r];this.data[t][r]=e(n,t,r)}}print(){console.table(this.data)}say(){console.log(this.toArray())}toArray(){return this.contents=[],s.map(this,e=>{this.contents.push(e)}),this.contents}reshape(e={rows:2,cols:2}){this.toArray(),this.rows=e.rows,this.cols=e.cols,this.setData(this.contents)}getColumns(...e){let t=[];for(let r in e)t.push(Array.each(this.data,t=>t[e[r]]));return t}getRows(...e){let t=[];for(let r=0;r<this.rows;r++)e.includes(r)&&t.push(this.data[r]);return t}static toArray(e){let t=[];return s.map(e,e=>{t.push(e)}),t}static subtract(e=new s,t){let r=[],n=e.rows,i=e.cols;if(t instanceof s)for(let s=0;s<n;s++)for(let n=0;n<i;n++)r.push(e.data[s][n]-t.data[s][n]);else if(t instanceof Array)for(let s=0;s<e.rows;s++)for(let n=0;n<e.cols;n++)r.push(e.data[s][n]-t[s][n]);else for(let s=0;s<this.rows;s++)for(let n=0;n<this.cols;n++)r.push(e.data[s][n]-t);return new s({rows:n,cols:i,contents:r})}static add(e=new s,t){let r=[],n=e.rows,i=e.cols;if(t instanceof s)for(let s=0;s<n;s++)for(let n=0;n<i;n++)r.push(e.data[s][n]+t.data[s][n]);else if(t instanceof Array)for(let s=0;s<e.rows;s++)for(let n=0;n<e.cols;n++)r.push(e.data[s][n]+t[s][n]);else for(let s=0;s<this.rows;s++)for(let n=0;n<this.cols;n++)r.push(e.data[s][n]+t);return new s({rows:n,cols:i,contents:r})}static multiply(e=new s,t){let r,n,i=[];if(t instanceof s){if(e.cols!==t.rows)return void console.log("Columns of A must equal rows of B");r=e.rows,n=t.cols;for(let s=0;s<r;s++)for(let r=0;r<n;r++){let n=0;for(let i=0;i<e.cols;i++)n+=e.data[s][i]*t.data[i][r];i.push(n)}}else if(t instanceof Array){r=e.rows,n=e.cols;for(let r=0;r<e.rows;r++)for(let n=0;n<e.cols;n++)i.push(e.data[r][n]*t[r][n])}else for(let s=0;s<this.rows;s++)for(let r=0;r<this.cols;r++)i.push(e.data[s][r]*t);return new s({rows:r,cols:n,contents:i})}static divide(e=new s,t){let r,n,i=[];if(t instanceof s){if(e.cols!==t.rows)return void console.log("Columns of A must equal rows of B");r=e.rows,n=t.cols;for(let s=0;s<r;s++)for(let r=0;r<n;r++){let n=0;for(let i=0;i<e.cols;i++)n+=e.data[s][i]/t.data[i][r]||0;i.push(n)}}else if(t instanceof Array){r=e.rows,n=e.cols;for(let r=0;r<e.rows;r++)for(let n=0;n<e.cols;n++)i.push(e.data[r][n]/t[r][n]||0)}else for(let s=0;s<this.rows;s++)for(let r=0;r<this.cols;r++)i.push(e.data[s][r]/t||0);return new s({rows:r,cols:n,contents:i})}static randomize(e=new s){return s.map(e,e=>i.random())}static transpose(e=new s){let t=new s({rows:e.cols,cols:e.rows});for(let r=0;r<e.rows;r++)for(let n=0;n<e.cols;n++)t.data[n][r]=e.data[r][n];return t}static map(e=new s,t=(()=>{})){let r=new s({rows:e.rows,cols:e.cols});for(let n=0;n<e.rows;n++)for(let i=0;i<e.cols;i++){let s=e.data[n][i];r.data[n][i]=t(s,n,i)}return r}static fromArray(e=[]){return new s({rows:e.length,cols:1,contents:e})}static reshape(e={rows:2,cols:2,matrix:new s}){return e.contents=s.toArray(e.matrix),delete e.matrix,new s(e)}static normalize(e=new s){let t=Math.normalize(s.toArray(e));return new s({rows:e.rows,cols:e.cols,contents:t})}static diagonal(e=[]){let t=s.square(e.length);for(let r in t.data)for(let n in t.data[r])r==n&&(t.data[r][n]=e[r]);return t.toArray(),t}static unit(e=2){let t=s.square(e);for(let r in t.data)for(let e in t.data[r])r==e&&(t.data[r][e]=1);return t.toArray(),t}static square(e=2){return new s({rows:e,cols:e})}static fromMatrixCols(e=new s,...t){let r=e.getColumns(...t),n=Array.flatten(r),i=new s({rows:r.length,cols:e.cols,contents:n});return i.transpose(),i}static deepMatrix(e=[],t=[]){let r=[];for(let i=0;i<e.length;i++)r.push({rows:e[i],cols:e[++i]||1});let n=e=>{let i=new s(r[e]);return e+1==r.length?i.map(e=>t.shift()||0):i.map(t=>n(e+1)),i};return n(0)}}n.Matrix=s;var a={};Object.defineProperty(a,"__esModule",{value:!0}),a.ArrayLibrary=function(){let e={combine:(t,r,n,i)=>{let s=i=i||0,a=r===n?i+1:i,o=e.indexAt(t,r,s),l=e.indexAt(t,n,a)+1;return-1==o||0==l?null:t.slice(o,l)},inBetween:(t,r,n,i)=>{let s=i=i||0,a=r===n?i+1:i,o=e.indexAt(t,r,s)+1,l=e.indexAt(t,n,a);return 0==o||-1==l?null:t.slice(o,l)},contains:(e,t)=>{for(let r in e)if(e[r]==t)return!0;return!1},indexAt:(e,t,r)=>{r=r||0;let n=-1;for(let i=0;i<e.length;i++)if(e[i]==t&&++n==r)return i;return-1},find:(e,t)=>{for(let r in e)if(1==t(e[r]))return e[r]},findAll:(e,t)=>{let r=[];for(let n in e)1==t(e[n])&&r.push(e[n]);return r},getObject:(e,t,r)=>{let n;for(let i in e)e[i][t]==r&&(n=e[i]);return n},getAllObjects:(e,t,r)=>{let n=[];for(let i in e)e[i][t]==r&&n.push(e[i]);return n},getAll:(e,t)=>{let r=[];for(let n in e)e[n]==t&&r.push(n);return r},removeAll:(e,t)=>{let r=[];for(let n of e)n!=t&&r.push(n);return r},putAt:(e=[],t,r=0)=>{let n=[];for(let i in e)if(i==r){n[i]=t;let s=Math.floor(r);isNaN(s)?s=r+1:s++,n[s]=e[i]}else n[i]=e[i];return n},pushArray:(t=[],r,n)=>{let i=e.arrayIndex(t,r);return e.putAt(t,n,i)},arrayIndex:(e=[],t=[])=>{for(let r in e)if(JSON.stringify(e[r])==JSON.stringify(t))return r;return-1},hasArray:(e=[],t=[])=>(e=JSON.stringify(e),t=JSON.stringify(t),-1!=e.indexOf(t)),toObject:(e=[],t)=>{let r={};for(let n in e)r[e[n][t]]=e[n],delete r[e[n][t]][t];return r},reshape:e=>{},randomPick:e=>e[Math.floor(Math.random()*e.length)],removeEmpty:(t=[])=>{let r=[];for(let n in t)Array.isArray(t[n])&&t[n].length>0?r.push(e.removeEmpty(t[n])):null!=t[n]&&null!=t[n]&&0!=t[n]&&""!=t[n]&&r.push(t[n]);return r},each:(e=[],t=(()=>{}))=>{let r=[];for(let n in e)r.push(t(e[n],n));return r},hasArrayElement:(e=[],t=[])=>{for(let r in t)if(-1!=e.indexOf(t[r]))return!0;return!1},toSet:(e=[])=>{let t=[];for(let r in e)-1==t.indexOf(e[r])&&t.push(e[r]);return t},popIndex:(e=[],t)=>{let r=[];for(let n in e)n!=t&&r.push(e[n]);return r},dataType:(e=[])=>{let t=typeof e[0];for(let r in e)if(typeof e[r]!=t)return"mixed";return t}};return e};var o={};Object.defineProperty(o,"__esModule",{value:!0}),o.NeuralNetwork=void 0;let l=new r.Func,d=(0,a.ArrayLibrary)();o.NeuralNetwork=class{constructor(e){l.object.copy(e,this),this.ihWeights=new n.Matrix({rows:this.hNodes,cols:this.iNodes}),this.ihWeights.randomize(),this.ihBias=new n.Matrix({rows:this.hNodes,cols:1}),this.ihBias.randomize(),this.hoWeights=new n.Matrix({rows:this.oNodes,cols:this.hNodes}),this.hoWeights.randomize(),this.hoBias=new n.Matrix({rows:this.oNodes,cols:1}),this.hoBias.randomize(),this.lr=this.lr||.1}feedFoward(e=[]){let t=e instanceof n.Matrix?e:this.prepareInputs(e),r=n.Matrix.multiply(this.ihWeights,t);r.add(this.ihBias),r.map(sigmoid);let i=n.Matrix.multiply(this.hoWeights,r);return i.add(this.hoBias),i.map(sigmoid),{inputs:t,hiddens:r,outputs:i}}queryBack(e=[]){}predict(e=[]){return this.feedFoward(e).outputs}getWeightsUpdate(e=new n.Matrix,t=new n.Matrix,r=1){let i=n.Matrix.map(t,dSigmoid);i.multiply(r),i.multiply(this.lr);let s=n.Matrix.transpose(e);return{change:n.Matrix.multiply(i,s),gradients:i}}backpropagate(e=[],t=new n.Matrix){let{hiddens:r,outputs:i}=this.feedFoward(e),s=n.Matrix.subtract(t,i),a=this.getWeightsUpdate(r,i,s);this.hoWeights.add(a.change),this.hoBias.add(a.gradients);let o=n.Matrix.transpose(this.hoWeights),l=n.Matrix.multiply(o,s),d=this.getWeightsUpdate(e,r,l);this.ihWeights.add(d.change),this.ihBias.add(d.gradients)}train(e={trainingData:[],period:1,epoch:1}){let t=[],r=[];for(let a of e.trainingData)t.push(a.inputs),r.push(a.targets);let n=d.each(t,e=>this.prepareInputs(e)),i=d.each(r,e=>this.prepareTargets(e)),s=()=>{for(let t=0;t<e.period;t++)for(let e in n)this.backpropagate(n[e],i[e])};if(l.isset(e.epoch))for(let a=0;a<e.epoch;a++)s();else s()}setLearningRate(e=.1){this.lr=e}prepareInputs(e=[]){let t=n.Matrix.fromArray(Math.normalize(e));return t.multiply(.99),t.add(.01),t}prepareTargets(e=[]){let t=n.Matrix.fromArray(e);return t.add(.01),t.multiply(.99),t}};var c={};Object.defineProperty(c,"__esModule",{value:!0}),c.Period=void 0,c.Period=class extends r.Func{constructor(){super()}trimMonthArray(){let e=[];for(let t=0;t<this.months.length;t++)e.push(this.months[t].slice(0,3));return e}getYears(e=5){let t=(new Date).getYear()+1900,r=[];for(let n=0;n<e;n++)r.push(`${t-1}-${t}`),t++;return r}isTimeValid(e){if(2==(e=e.split(":")).length||3==e.length){var t=new Number(e[0]),r=new Number(e[1]),n=0;if(3==e.length){if(n=new Number(e[2]),t>23||t<0||r>59||r<0||n>59||n<0)return!1}else if(t>23||t<0||r>59||r<0)return!1;return 60*t*60+60*r+n}return!1}time(e){let t=this.isset(e)?new Date(Math.floor(e)):new Date,r=t.getHours().toString(),n=t.getMinutes().toString(),i=t.getSeconds().toString();return`${r=r.length>1?r:"0"+r}:${n=n.length>1?n:"0"+n}:${i=i.length>1?i:"0"+i}`}date(e){let t=this.isset(e)?new Date(Math.floor(e)):new Date,r=t.getDate().toString(),n=(t.getMonth()+1).toString(),i=t.getFullYear().toString();return r=r.length>1?r:"0"+r,`${i}-${n=n.length>1?n:"0"+n}-${r}`}time_date(e){return`${this.time(e)}, ${this.date(e)}`}timeToday(){let e=new Date,t=e.getHours(),r=e.getMinutes(),n=e.getSeconds();return this.isTimeValid(`${t}:${r}:${n}`)||-1}isDateValid(e){return!!(this.isDate(e)&&this.isYearValid(e)&&this.isMonthValid(e)&&this.isDayValid(e))}isDayValid(e){for(var t="",r=0;r<2;r++)t+=e[r+8];var n=0,i=this.isMonthValid(e);return"01"==i?n=31:"02"==i?n=this.isLeapYear(this.isYearValid(e))?29:28:"03"==i?n=31:"04"==i?n=30:"05"==i?n=31:"06"==i?n=30:"07"==i||"08"==i?n=31:"09"==i?n=30:"10"==i?n=31:"11"==i?n=30:"12"==i&&(n=31),n<t?0:t}isDate(e){if(10!=e.length)return!1;for(var t in e)if(!this.isDigit(e[t])){if(4==t||7==t){if("-"==e[t])continue;return!1}return!1}return!0}isMonthValid(e){for(var t="",r=0;r<2;r++)t+=e[r+5];return t>12||t<1?0:t}isYearValid(e){for(var t=(new Date).getFullYear("Y"),r="",n=0;n<4;n++)r+=e[n+0];return r>t?0:r}getYear(e){for(var t="",r=0;r<4;r++)t+=e[r+0];return t}isLeapYear(e){return e%4==0&&(e%100!=0||e%400==0)}daysInMonth(e,t){var r=0;return"01"==e?r=31:"02"==e?r=this.isLeapYear(t)?29:28:"03"==e?r=31:"04"==e?r=30:"05"==e?r=31:"06"==e?r=30:"07"==e||"08"==e?r=31:"09"==e?r=30:"10"==e?r=31:"11"==e?r=30:"12"==e&&(r=31),r}dateValue(e){for(var t=365*this.getYear(e),r=0,n=1;n<this.isMonthValid(e);n++)r=this.daysInMonth(n,this.getYear(e))/1+r/1;return t/1+r/1+this.isDayValid(e)/1}today(){var e=new Date,t=e.getMonth()/1+1;return 2!=t.length&&(t="0"+t),e.getFullYear()+"-"+t+"-"+e.getDate()}getDateObject(e){let t=Math.floor(e/this.secondsInDays(1));e-=this.secondsInDays(t);let r=Math.floor(e/this.secondsInHours(1));e-=this.secondsInHours(r);let n=Math.floor(e/this.secondsInMinutes(1));return{days:t,hours:r,minutes:n,seconds:e-=this.secondsInMinutes(n)}}dateWithToday(e){var t=Math.floor(this.dateValue(this.today()));let r=Math.floor(this.dateValue(e));var n={diff:r-t,when:""};return n.when=r>t?"future":r==t?"today":"past",n}dateString(e){var t=new Number(this.getYear(e)),r=new Number(this.isMonthValid(e));return new Number(this.isDayValid(e))+" "+this.months[r-1]+", "+t}secondsInDays(e){return Math.floor(24*e*60*60)}secondsInHours(e){return Math.floor(60*e*60)}secondsInMinutes(e){return Math.floor(60*e)}secondsTillDate(e){return this.secondsInDays(Math.floor(this.dateValue(e)))}secondsTillToday(){return this.secondsTillDate(this.today())}secondsTillNow(){return this.secondsTillDate(this.today())+this.timeToday()}secondsTillMoment(e){return this.secondsTillDate(this.date(e))+this.isTimeValid(this.time(e))}log(...e){let t=`[${this.time()}]:`;console.log(t,...e)}};var u={};Object.defineProperty(u,"__esModule",{value:!0}),u.JSElements=void 0,u.JSElements=class extends c.Period{constructor(){super()}loadCss(e=""){document.head.makeElement({element:"link",attributes:{rel:"stylesheet",type:"text/css",href:e}})}jsonForm(e){let t={},r=e=>{let n=e.children;for(let t=0;t<n.length;t++)r(n[t]);e.hasAttribute("name")&&("file"==e.type?e.hasAttribute("multiple")?t[e.getAttribute("name")]=e.files:t[e.getAttribute("name")]=e.files[0]:t[e.getAttribute("name")]=e.value)};return r(e),t}jsonElement(e){let t=e.nodeName.toLowerCase(),r=e.getAttributes();r.style=e.css();let n=[];for(let i=0;i<e.children.length;i++)n.push(e.children[i].toJson());return{element:t,attributes:r,children:n}}createFromObject(e={},t){let r,n;if(e.element instanceof Element?n=(r=e.element).nodeName:(n=e.element.toLowerCase(),r=document.createElement(e.element)),this.isset(e.attributes))for(var i in e.attributes)"style"==i?r.css(e.attributes[i]):r.setAttribute(i,e.attributes[i]);if(this.isset(e.text)&&(r.textContent=e.text),this.isset(e.html)&&(r.innerHTML=e.html),this.isset(e.value)&&(r.value=e.value),n.includes("-")&&(r=this.createFromHTML(r.outerHTML)),this.isset(t)&&t.attachElement(r,e.attachment),this.isset(e.children)&&r.makeElement(e.children),this.isset(e.options)&&Array.isArray(e.options))for(var s of e.options){let t=r.makeElement({element:"option",value:s,text:s,attachment:"append"});this.isset(e.selected)&&e.selected==s&&t.setAttribute("selected",!0),"null"==s.toString().toLowerCase()&&t.setAttribute("disabled",!0)}return this.isset(r.dataset.icon)&&r.addClasses(r.dataset.icon),r}createFromHTML(e="",t){let r=(new DOMParser).parseFromString(e,"text/html"),n=r.body.firstChild;return 1==e.indexOf("html")?n=r:1==e.indexOf("body")&&(n=r.body),this.isset(t)&&t.attachElement(n,t.attachment),n}createPerceptorElement(e,t){let r=this[e.perceptorElement](e.params);return this.isset(t)&&t.attachElement(r,e.attachment),r}getElement(e={element:"",attributes:{}},t){var r;if("string"==typeof e?r=this.createFromHTML(e,t):e instanceof Element?(r=e,this.isset(t)&&t.attachElement(r,e.attachment)):"object"==typeof e&&(r=e.perceptorElement?this.createPerceptorElement(e,t):this.createFromObject(e,t)),this.isset(r.setKey)||r.setKey(),this.isset(e.list)){let t=r.makeElement({element:"datalist",options:e.list});r.setAttribute("list",r.dataset.domKey),t.setAttribute("id",r.dataset.domKey)}if(this.isset(e.state)){let t=r.getParents(e.state.owner,e.state.value);this.isnull(t)?r.dataset.stateStatus="pending":(t.addState({name:e.state.name,state:r}),r.dataset.stateStatus="set")}return r}createElement(e={element:"",attributes:{}},t){if(Array.isArray(e)){let r=[];for(let n of e)r.push(this.getElement(n,t));return r}return this.getElement(e,t)}validateFormTextarea(e){return""!=e.value}validateFormInput(e){var t=e.getAttribute("type"),r=e.value;return this.isnull(t)?!this.isSpaceString(r):"file"==(t=t.toLowerCase())?""!=r:"text"==t?!this.isSpaceString(r):"date"==t?this.hasString(e.className,"future")?this.isDate(r):this.isDateValid(r):"email"==t?this.isEmail(r):"number"==t?this.isNumber(r):"password"==t?this.isPasswordValid(r):!this.isSpaceString(r)}validateFormSelect(e){return 0!=e.value&&"null"!=e.value.toLowerCase()}validateForm(e,t){(t=t||{}).nodeNames=t.nodeNames||"INPUT, SELECT, TEXTAREA";let r,n,i=!0,s=e.findAll(t.nodeNames),a=e=>"INPUT"==r?this.validateFormInput(e):"SELECT"==r?this.validateFormSelect(e):"TEXTAREA"==r?this.validateFormTextarea(e):this.validateOtherElements(e);for(let o=0;o<s.length;o++)if(r=s[o].nodeName,n=s[o].getAttribute("name"),"true"!=s[o].getAttribute("ignore")){if(this.isset(t.names)){if(!t.names.includes(n))continue;i=a(s[o])}else i=a(s[o]);if(!i)break}return{flag:i,elementName:n}}validateOtherElements(e){let t=!1;return this.isset(e.value)&&""!=e.value&&(t=!0),t}ValidateFormImages(e){return"file"==type&&!self.isImageValid(value)}isImageValid(e){var t=e.substring(e.lastIndexOf(".")+1).toLowerCase();return"png"==t||"gif"==t||"jpeg"==t||"jpg"==t}imageToJson(e,t=(()=>{})){let r=new FileReader,n={};r.onload=e=>{n.src=e.target.result,t(n)},n.size=e.size,n.type=e.type,r.readAsDataURL(e)}};var h={};Object.defineProperty(h,"__esModule",{value:!0}),h.Template=void 0,h.Template=class extends u.JSElements{constructor(){super(),this.virtual={},this.elementLibrary(),this.nodeListLibrary(),this.htmlCollectionLibrary(),this.nodeLibrary()}elementLibrary(){let e=this;Element.prototype.changeNodeName=function(t){let r=this.toJson();return r.element=t,e.createElement(r)},Element.prototype.toJson=function(){let e=this.nodeName.toLowerCase(),t=this.getAttributes();t.style=this.css();let r=[];for(let n=0;n<this.children.length;n++)r.push(this.children[n].toJson());return{element:e,attributes:t,children:r}},Element.prototype.setOptions=function(t=[],r={selected:""}){r=r||{},e.isset(r.flag)&&(this.innerHTML="");for(let n=0;n<t.length;n++){let i=t[n].text||t[n],s=t[n].value||t[n],a=this.makeElement({element:"option",attributes:{value:s},text:i});"null"==s.toString().toLowerCase()&&a.setAttribute("disabled",!0),e.isset(r.selected)&&s==r.selected&&a.setAttribute("selected",!0)}},Element.prototype.commonAncestor=function(e,t){for(let r of e.parents())for(let e of t.parents())if(r==e)return r;return null},Element.prototype.onAdded=function(e=(()=>{})){this.addEventListener("DOMNodeInsertedIntoDocument",t=>{e()})},Element.prototype.states={},Element.prototype.temp={},Element.prototype.manyBubbledEvents=function(e,t=(()=>{})){e=e.split(",");for(let r of e)this.bubbledEvent(r.trim(),t)},Element.prototype.manyNotBubbledEvents=function(e,t=(()=>{})){e=e.split(",");for(let r of e)this.notBubbledEvent(r.trim(),t)},Element.prototype.bubbledEvent=function(e,t=(()=>{})){document.addEventListener(e,e=>{(e.target==this||this.isAncestor(e.target))&&t(e)})},Element.prototype.notBubbledEvent=function(e,t=(()=>{})){document.addEventListener(e,e=>{e.target==this||this.isAncestor(e.target)||t(e)})},Element.prototype.addMultipleEventListener=function(e,t=(()=>{})){e=e.split(",");for(let r of e)this.addEventListener(r.trim(),e=>{t(e)})},Element.prototype.hover=function(t={css:{},do:()=>{}}){let r,n=[];this.addMultipleEventListener("mouseenter",i=>{r=this.css(),e.isset(t.css)&&(n=e.array.each(Object.keys(t.css),t=>e.cssStyleName(t)),this.css(t.css)),e.isfunction(t.do)&&t.do(i)}),this.addMultipleEventListener("mouseleave",i=>{e.isset(t.css)&&(this.cssRemove(n),this.css(r))})},Element.prototype.find=function(t="",r=0){let n=null;return e.isset(r)?this.querySelectorAll(t).forEach((e,t)=>{r==t&&(n=e)}):n=this.querySelector(t),n},Element.prototype.findAll=function(e=""){return this.querySelectorAll(e)},Element.prototype.search=function(t="",r={attributes:{},id:"",nodeName:"",class:"",classes:""},n=0){let i=null,s=[];if(e.isset(r)){let a=this.querySelectorAll(t);for(let t=0;t<a.length;t++){if(i=a[t],e.isset(r.attributes)){for(let e in r.attributes)i.getAttribute(e)==r.attributes[e]||(i=null);if(e.isnull(i))continue}if(e.isset(r.id)&&r.id!=i.id)i=null;else if(!e.isset(r.class)||i.classList.contains(r.class))if(!e.isset(r.classes)||i.hasClasses(r.classes))if(e.isset(r.nodeName)&&i.nodeName.toLowerCase()!=r.nodeName)i=null;else{if(n<=0)return i;s.push(i)}else i=null;else i=null}i=s.length&&e.isset(s[n])?s[n]:null}else i=this.find(t);return i},Element.prototype.searchAll=function(t="",r={attributes:{},id:"",nodeName:"",class:"",classes:""}){if(e.isset(r)){let n=this.querySelectorAll(t),i=[];for(let t=0;t<n.length;t++){let s=n[t];if(e.isset(r.attributes))for(let e in r.attributes)s.getAttribute(e)==r.attributes[e]||(s=null);e.isset(r.id)&&r.id!=s.id||e.isset(r.class)&&!s.classList.contains(r.class)||e.isset(r.classes)&&!s.hasClasses(r.classes)||e.isset(r.nodeName)&&s.nodeName.toLowerCase()!=r.nodeName?s=null:e.isnull(s)||i.push(s)}return i}return this.querySelectorAll(t)},Element.prototype.fetch=function(e=[],t=0){let r={};for(let n of e)r[n]=this.find(n,t);return r},Element.prototype.fetchAll=function(e=[]){let t={};for(let r of e)t[r]=this.findAll(r);return t},Element.prototype.nodesBetween=function(e,t){let r=[];for(let n of Array.from(this.children))(n==e||n==t||n.isAncestor(e)||n.isAncestor(t))&&r.push(n);return r},Element.prototype.isAncestor=function(e){return e.parents().includes(this)},Element.prototype.parents=function(){let e=[],t=this.parentNode;for(;null!=t;)e.push(t),t=t.parentNode;return e},Element.prototype.customParents=function(){let e=this.parents(),t=[];for(let r=0;r<e.length;r++)e[r].nodeName.includes("-")&&t.push(e[r]);return t},Element.prototype.removeState=function(t={name:""}){let r=this.getState(t);e.isset(r)&&e.isset(t.force)&&(e.isset(r.dataset.domKey)&&delete e.virtual[r.dataset.domKey],r.remove()),this.removeAttribute("data-"+t.name)},Element.prototype.getState=function(t={name:""}){let r,n=null;return"string"==typeof t?r=t:e.isset(this.dataset[""+t.name])&&(r=t.name),e.isset(r)&&(n=e.virtual[this.dataset[r]]),n},Element.prototype.addState=function(t={name:""}){return e.isset(t.state.dataset.domKey)||t.state.setKey(),this.dataset[t.name]=t.state.dataset.domKey,this.states[t.name]={},this},Element.prototype.setState=function(t={name:"",attributes:{},render:{},children:[],text:"",html:"",value:"",options:[]}){let r=this.getState(t);if(r.setAttributes(t.attributes),e.isset(t.children)&&r.makeElement(t.children),e.isset(t.render)&&r.render(t.render),e.isset(t.text)&&(r.textContent=t.text),e.isset(t.html)&&(r.innerHTML=t.html),e.isset(t.value)&&(r.value=t.value),e.isset(t.options))for(var n of t.options)r.makeElement({element:"option",value:n,text:n,attachment:"append"});return this.states[t.name][JSON.stringify(t)]=r.cloneNode(!0),r},Element.prototype.setKeyAsync=async function(){return await this.setKey()},Element.prototype.setKey=function(){let t=Date.now().toString(36)+Math.random().toString(36).slice(2);return e.isset(this.dataset.domKey)?t=this.dataset.domKey:this.dataset.domKey=t,e.virtual[t]=this,t},Element.prototype.dropDown=function(e){let t=this.cloneNode(!0);this.innerHTML="",this.append(t),t.css({boxShadow:"1px 1px 1px 1px #aaaaaa"}),this.css({boxShadow:"0.5px 0.5px 0.5px 0.5px #cccccc"});let r=this.makeElement({element:"div",attributes:{class:"drop-down"}});return r.append(e),this.removeDropDown=()=>{r.remove(),t.css({boxShadow:"unset"}),this.innerHTML=t.innerHTML},this},Element.prototype.stopMonitor=function(){return this.observe&&this.observer.disconnect(),this},Element.prototype.onAttributeChange=function(e="",t=(()=>{})){this.addEventListener("attributesChanged",r=>{r.detail.attributeName==e&&t(r)})},Element.prototype.monitor=function(e={attributes:!0,childList:!0,subtree:!0}){return this.observer=new MutationObserver((e,t)=>{e.length&&this.dispatchEvent(new CustomEvent("mutated"));for(let r of e)"childList"==r.type?this.dispatchEvent(new CustomEvent("childListchanged",{detail:r})):"attributes"==r.type?this.dispatchEvent(new CustomEvent("attributesChanged",{detail:r})):"characterData"==r.type&&this.dispatchEvent(new CustomEvent("characterDataChanged",{detail:r}))}),this.observer.observe(this,e),this},Element.prototype.checkChanges=function(e=(()=>{})){this.monitor(),this.addEventListener("mutated",t=>{e(t)})},Element.prototype.onChanged=function(t=(()=>{})){this.getAttribute("value");let r=r=>{if("INPUT"==r.target.nodeName)if("date"==r.target.type)this.isDate(this.value)&&this.setAttribute("value",this.value);else if("time"==r.target.type)this.isTimeValid(this.value)&&this.setAttribute("value",this.value);else if("file"==r.target.type){r.target.value;let n=r.target.files[0];0==n.type.indexOf("image")&&e.imageToJson(n,t)}else this.setAttribute("value",this.value);else if("SELECT"==r.target.nodeName)for(let e=0;e<r.target.options.length;e++)e==r.target.selectedIndex?r.target.options[e].setAttribute("selected",!0):r.target.options[e].removeAttribute("selected");else"DATA-ELEMENT"==r.target.nodeName||"SELECT-ELEMENT"==r.target.nodeName?this.setAttribute("value",this.value):this.value=this.textContent;e.isset(t)&&"file"!=r.target.type&&t(this.value,r)};this.addEventListener("keyup",e=>{r(e)}),this.addEventListener("change",e=>{r(e)})},Element.prototype.render=function(t={element:"",attributes:{}},r){e.isset(r)?this.removeChildren(r):this.removeChildren(),this.makeElement(t)},Element.prototype.getAllCssProperties=function(){let e,t,r=Array.from(document.styleSheets),n=this.id,i=this.nodeName,s=Array.from(this.classList),a={};for(var o in s)s[o]="."+s[o];for(o=0;o<r.length;o++){e=r[o].cssRules;for(var l=0;l<e.length;l++)if((t=e[l].selectorText)=="#"+n||t==i||-1!=s.indexOf(t)){a[t]={};let r=e[l].style;for(let e in r)""!==r[e]&&(a[t][e]=r[e])}}return a.style=this.css(),a},Element.prototype.getCssProperties=function(e=""){let t=this.getAllCssProperties(),r={};for(let n in t){r[n]={};for(let i in t[n])e==i&&(r[n][i]=t[n][i])}return r},Element.prototype.hasCssProperty=function(t=""){var r=this.getCssProperties(t);for(var n in r)if(e.isset(r[n])&&""!=r[n])return!0;return!1},Element.prototype.cssPropertyValue=function(t=""){var r=this.getCssProperties(t),n=this.id,i=Array.from(this.classList);if(e.isset(r.style)&&""!=r.style)return r.style;if(e.isset(n)&&e.isset(r["#"+n])&&""!=r["#"+n])return r["#"+n];for(var s of i)if(e.isset(r["."+s])&&""!=r["."+s])return r["."+s];return e.isset(r[this.nodeName])&&""!=r[this.nodeName]?r[this.nodeName]:""},Element.prototype.css=function(t={}){return e.isset(t)&&Object.keys(t).map(e=>{this.style[e]=t[e]}),e.extractCSS(this)},Element.prototype.cssRemove=function(e=[]){if(Array.isArray(e))for(var t of e)this.style.removeProperty(t);else this.style.removeProperty(e);return this.css()},Element.prototype.toggleChild=function(e){var t,r,n,i=!1;console.log(e),this.children.forEach(s=>{t=s.nodeName,r=s.classList,n=s.id,t==e.nodeName&&n==e.id&&r.toString()==e.classList.toString()&&(s.remove(),i=!0)}),i||this.append(e)},Element.prototype.clearClasses=function(t=""){t=t.split(",");for(let e in t)t[e]=t[e].trim();for(let r of this.classList)e.isset(t)&&t.includes(r)||this.classList.remove(r)},Element.prototype.removeClasses=function(e=""){e=e.split(",");for(let t of e)""!=(t=t.trim())&&this.classList.remove(t)},Element.prototype.addClasses=function(e=""){e=e.split(",");for(let t of e)""!=(t=t.trim())&&this.classList.add(t)},Element.prototype.toggleClasses=function(e=""){e=e.split(",");for(let t of e)""!=(t=t.trim())&&this.classList.toggle(t)},Element.prototype.removeClass=function(e=""){return this.classList.remove(e),this},Element.prototype.hasClasses=function(e=[]){for(let t of e)if(!this.classList.contains(t))return!1;return!0},Element.prototype.addClass=function(e=""){return this.classList.add(e),this},Element.prototype.toggleClass=function(e=""){return this.classList.toggle(e),this},Element.prototype.position=function(t={}){return e.isset(t)&&(Object.keys(t).map(e=>{t[e]="px"==new String(t[e]).slice(t[e].length-2)?t[e]:t[e]+"px"}),this.css(t)),this.getBoundingClientRect()},Element.prototype.inView=function(t=""){let r=this.getParents(t),n=this.position().top,i=!1;return e.isnull(r)||(i=n>=0&&n<=r.clientHeight),i},Element.prototype.hasClass=function(e=""){return this.classList.contains(e)},Element.prototype.setProperties=function(e={}){for(let t in e)this[t]=e[t]},Element.prototype.setAttributes=function(e={}){for(let t in e)"style"==t?this.css(e[t]):this.setAttribute(t,e[t])},Element.prototype.getAttributes=function(e=[]){0==e.length&&(e=this.getAttributeNames());let t={};for(let r of e)t[r]=this.getAttribute(r);return t},Element.prototype.makeElement=function(t={element:"",attributes:{}}){return this.setKeyAsync(),e.createElement(t,this)},Element.prototype.getParents=function(t="",r=""){var n=t.slice(0,1),i=this.parentNode;if("."==n)for(;i&&(!e.isset(i.classList)||!i.classList.contains(t.slice(1)));)i=i.parentNode;else if("#"==n)for(;i&&(!e.isset(i.id)||i.id!=t.slice(1));)i=i.parentNode;else for(;i&&(!e.isset(i.nodeName)||i.nodeName.toLowerCase()!=t.toLowerCase());){if(e.isset(i.hasAttribute)&&i.hasAttribute(t)){if(e.isset(r)&&i.getAttribute(t)==r)break;break}i=i.parentNode}return i},Element.prototype.toggle=function(){"none"==this.style.display||"hidden"==this.style.visibility?this.show():this.hide()},Element.prototype.hide=function(){return this.style.display="none",this},Element.prototype.show=function(){return this.cssRemove(["display"]),this},Element.prototype.removeChildren=function(e={except:[]}){let t=[];(e=e||{}).except=e.except||[];let r=e.except;for(let n=0;n<r.length;n++){let e=this.findAll(r[n]);for(let r=0;r<e.length;r++)t.includes(e[r])||t.push(e[r])}return this.children.forEach(e=>{t.includes(e)||e.remove()}),this},Element.prototype.delete=function(){e.isset(this.dataset.domKey)&&delete e.virtual[this.dataset.domKey],this.remove()},Element.prototype.deleteChild=function(e){return e.delete(),this},Element.prototype.toggleChildren=function(t={name:"",class:"",id:""}){Array.from(this.children).forEach(r=>{e.isset(t.name)&&t.name==r.nodeName||e.isset(t.class)&&e.hasArrayElement(Array.from(r.classList),t.class.split(" "))||e.isset(t.id)&&(t.id,r.id),r.toggle()})},Element.prototype.attachElement=function(e,t="append"){this[t](e)},Element.prototype.pressed=function(e=(()=>{})){let t=0,r=0;this.addMultipleEventListener("mousedown, touchstart",e=>{t=e.timeStamp}),this.addMultipleEventListener("mouseup, touchend",n=>{r=n.timeStamp,n.duration=r-t,e(n)})}}htmlCollectionLibrary(){let e=this;HTMLCollection.prototype.popIndex=function(t=0){let r=e.createElement({element:"sample"}).children,n=Array.from(this);for(let e=0;e<n.length;e++)e!=t&&(r[e]=this.item(e),console.log(r));return r},HTMLCollection.prototype.forEach=function(e=(()=>{})){let t=Array.from(this);for(let r=0;r<t.length;r++)e(t[r],r)},HTMLCollection.prototype.each=function(e=(()=>{})){let t=Array.from(this);for(let r=0;r<t.length;r++)e(t[r],r)},HTMLCollection.prototype.indexOf=function(e){let t=Array.from(this);for(let r in t)if(t==e)return r;return-1},HTMLCollection.prototype.includes=function(e){return-1!=this.indexOf(e)},HTMLCollection.prototype.nodesBetween=function(e,t){let r=[],n=Array.from(this);for(let i of n)(i==e||i==t||i.isAncestor(e)||i.isAncestor(t))&&r.push(i);return r}}nodeLibrary(){Node.prototype.states={}}nodeListLibrary(){NodeList.prototype.each=function(e=(()=>{})){for(let t=0;t<this.length;t++)e(this[t],t)},NodeList.prototype.indexOf=function(e){for(let t in this)if(this[t]==e)return t;return-1},NodeList.prototype.includes=function(e){return-1!=this.indexOf(e)},NodeList.prototype.nodesBetween=function(e,t){let r=[];for(let n of this)(n==e||n==t||n.isAncestor(e)||n.isAncestor(t))&&r.push(n);return r}}};var f={};Object.defineProperty(f,"__esModule",{value:!0}),f.Components=void 0,f.Components=class extends h.Template{constructor(){super()}createTab(e={titles:[]}){var t=this.createElement({element:"ul",attributes:{class:"tab"}});for(var r of(e.view.append(t),e.titles))t.append(this.createElement({element:"li",attributes:{class:"tab-title"},text:r}));t.findAll("li").forEach(e=>{e.addEventListener("click",t=>{var r=this.urlSplitter(location.href);r.vars.tab=e.textContent.toLowerCase(),router.render({url:"?"+this.urlSplitter(this.urlMerger(r,"tab")).queries})})})}cell(e={element:"input",attributes:{},name:"",dataAttributes:{},value:"",text:"",html:"",edit:""}){var t,r=this.stringReplace(e.name," ","-")+"-cell",n=this.createElement({element:"label",attributes:{class:"cell-label"},text:e.name});let i;e.attributes=this.isset(e.attributes)?e.attributes:{},e.dataAttributes=this.isset(e.dataAttributes)?e.dataAttributes:{},e.dataAttributes.id=r,t="select"==e.element?{element:e.element,attributes:e.dataAttributes,children:[{element:"option",attributes:{disabled:"",selected:""},text:"Select "+e.name,value:""}]}:{element:e.element,attributes:e.dataAttributes,text:e.value},this.isset(e.value)&&(t.attributes.value=e.value),this.isset(e.options)&&(t.options=e.options),(i=e.element instanceof Element?e.element:this.createElement(t)).classList.add("cell-data"),this.isset(e.value)&&(i.value=e.value);let s,a=this.createElement({element:"div",attributes:e.attributes,children:[n,i]});return a.classList.add("cell"),this.isset(e.text)&&(i.textContent=e.text),this.isset(e.html)&&(i.innerHTML=e.html),this.isset(e.list)&&(a.makeElement({element:"datalist",attributes:{id:r+"-list"},options:e.list.sort()}),i.setAttribute("list",r+"-list")),this.isset(e.edit)&&(s=a.makeElement({element:"i",attributes:{class:""+e.edit,"data-icon":"fas, fa-pen",style:{cursor:"pointer",backgroundColor:"var(--primary-color)",width:"1em",height:"auto",position:"absolute",top:"0px",right:"0px",padding:".15em"}}}),a.css({position:"relative"})),a}message(e={link:"",text:"",temp:0}){var t=this.createElement({element:"span",attributes:{class:"alert"},children:[this.createElement({element:"a",text:e.text,attributes:{class:"text",href:e.link}}),this.createElement({element:"span",attributes:{class:"close"}})]});if(this.isset(e.temp))var r=setTimeout(()=>{t.remove(),clearTimeout(r)},""!=e.temp?1e3*e.time:5e3);t.find(".close").addEventListener("click",e=>{t.remove()}),body.find("#notification-block").append(t)}createTable(e={title:"",contents:{},projection:{},rename:{},sort:!1,search:!1,filter:[]}){let t,r=[],n={},i=0,s=this.createElement({element:"div",attributes:e.attributes});s.classList.add("kerdx-table");for(let d of e.contents){t=e.contents.indexOf(d);for(let t in d)-1==r.indexOf(t)&&(r.push(t),n[t]=s.makeElement({element:"column",attributes:{class:"kerdx-table-column","data-name":t},children:[{element:"span",attributes:{class:"kerdx-table-column-title","data-name":t},children:[{element:"p",attributes:{class:"kerdx-table-column-title-text"},text:t}]},{element:"div",attributes:{class:"kerdx-table-column-contents"}}]}),this.isset(e.sort)&&n[t].find(".kerdx-table-column-title").makeElement({element:"i",attributes:{class:"kerdx-table-column-title-sort","data-icon":"fas, fa-arrow-down"}}))}e.projection=e.projection||{};let a=Object.values(e.projection).includes(1);for(let d of r){for(let r of e.contents)t=e.contents.indexOf(r),n[d].find(".kerdx-table-column-contents").makeElement({element:"span",attributes:{class:"kerdx-table-column-cell","data-name":d,"data-value":r[d]||"","data-row":t},html:r[d]||""});-1==e.projection[d]||a&&!this.isset(e.projection[d])?n[d].css({display:"none"}):i++}s.css({gridTemplateColumns:`repeat(${i}, 1fr)`});let o=this.createElement({element:"div",attributes:{class:"kerdx-table-container"},children:[{element:"span",attributes:{class:"kerdx-table-titleandsearch"}},s]}),l=0;return this.isset(e.title)&&(o.find(".kerdx-table-titleandsearch").makeElement({element:"h5",attributes:{class:"kerdx-table-title"},text:e.title}),l++),this.isset(e.sort)&&(s.dataset.sort=!0),this.isset(e.search)&&(o.find(".kerdx-table-titleandsearch").makeElement({element:"input",attributes:{class:"kerdx-table-search",placeHolder:"Search table..."}}),l++),this.isset(e.filter)&&(o.find(".kerdx-table-titleandsearch").makeElement({element:"select",attributes:{class:"kerdx-table-filter"},options:e.filter}),l++),0==e.contents.length&&(s.textContent="Empty Table"),o.makeElement({element:"style",text:`\n            @media(min-width: 700px) {\n                .kerdx-table-titleandsearch {\n                  grid-template-columns: repeat(${l}, 1fr);\n                }\n              }\n        `}),o}getTableData(e){let t=[],r=e.findAll(".kerdx-table-column-cell");for(let n=0;n<r.length;n++){let{name:e,value:i,row:s}=r[n].dataset;t[s]=t[s]||{},t[s][e]=i}return t}sortTable(e,t="",r=1){let n=this.getTableData(e);return n.sort((e,n)=>(e=e[t],n=n[t],this.isNumber(e)&&this.isNumber(n)&&(e/=1,n/=1),r>-1?e>n?1:-1:e>n?-1:1)),n}listenTable(e={table:{},options:[]},t={click:()=>{},filter:()=>{}}){e.options=e.options||[],t=t||[];let r,n=e.table.find(".kerdx-table"),i=this.createElement({element:"span",attributes:{class:"kerdx-table-options"}}),s={view:"fas fa-eye",delete:"fas fa-trash",edit:"fas fa-pen",revert:"fas fa-history"};for(let b of e.options)r=s[b]||"fas fa-"+b,i.makeElement({element:"i",attributes:{class:r+" kerdx-table-option",id:"kerdx-table-option-"+b}});let a,o=n.findAll(".kerdx-table-column-title"),l=n.findAll(".kerdx-table-column"),d=[],c=l[0];if(this.isnull(c))return;for(let b=0;b<l.length;b++)if("none"!=l[b].css().display){a=l[b];break}let u,h,f,p=c.findAll(".kerdx-table-column-cell"),m=a.findAll(".kerdx-table-column-cell");for(let b=0;b<p.length;b++)d.push(p[b].dataset.row);if("true"==e.table.find(".kerdx-table").dataset.sort)for(let b=0;b<o.length;b++)o[b].addEventListener("mouseenter",e=>{o[b].find(".kerdx-table-column-title-sort").css({display:"unset"})}),o[b].addEventListener("mouseleave",e=>{o[b].find(".kerdx-table-column-title-sort").css({display:"none"})}),o[b].find(".kerdx-table-column-title-sort").addEventListener("click",t=>{let r;o[b].find(".kerdx-table-column-title-sort").toggleClasses("fas, fa-arrow-up"),o[b].find(".kerdx-table-column-title-sort").toggleClasses("fas, fa-arrow-down"),"up"==o[b].find(".kerdx-table-column-title-sort").dataset.direction?(o[b].find(".kerdx-table-column-title-sort").dataset.direction="down",r=1):(o[b].find(".kerdx-table-column-title-sort").dataset.direction="up",r=-1);let i=o[b].find(".kerdx-table-column-title-text").textContent,s=this.sortTable(e.table.find(".kerdx-table"),i,r),a=this.createTable({contents:s}).findAll(".kerdx-table-column");for(let e=0;e<a.length;e++)l[e].find(".kerdx-table-column-contents").innerHTML=a[e].find(".kerdx-table-column-contents").innerHTML;l=n.findAll(".kerdx-table-column"),g()});this.isnull(e.table.find(".kerdx-table-search"))||e.table.find(".kerdx-table-search").onChanged(e=>{g()}),this.isnull(e.table.find(".kerdx-table-filter"))||e.table.find(".kerdx-table-filter").onChanged(e=>{g()});let g=()=>{this.isnull(e.table.find(".kerdx-table-search"))||(h=e.table.find(".kerdx-table-search").value),this.isnull(e.table.find(".kerdx-table-filter"))||(f=e.table.find(".kerdx-table-filter").value);for(let e=0;e<d.length;e++){let r=!1;u=n.findAll(`.kerdx-table-column-cell[data-row="${e}"]`);for(let e=0;e<u.length;e++)u[e].cssRemove(["display"]);if(this.isset(f)&&0==r&&this.isset(t.filter)&&(r=t.filter(f,u)),this.isset(h)&&0==r){r=!0;for(let e=0;e<u.length;e++)if(u[e].textContent.toLowerCase().includes(h.toLowerCase())){r=!1;break}}if(r)for(let e=0;e<u.length;e++)u[e].css({display:"none"})}};this.isset(t.click)&&(n.addMultipleEventListener("mousedown, touchstart",r=>{let s=r.target;if(s.classList.contains("kerdx-table-option"))this.isset(t.click)&&t.click(r);else if(s.classList.contains("kerdx-table-column-cell")||!this.isnull(s.getParents(".kerdx-table-column-cell"))){s.classList.contains("kerdx-table-column-cell")||(s=s.getParents(".kerdx-table-column-cell"));let t=s.dataset.row;if(i.remove(),m[t].css({position:"relative"}),m[t].append(i),e.table.classList.contains("kerdx-selectable")){let r=n.findAll(`.kerdx-table-column-cell[data-row="${t}"]`);for(let e=0;e<r.length;e++)r[e].classList.toggle("kerdx-table-selected-row");i.remove(),s.classList.contains("kerdx-table-selected-row")||0==c.findAll(".kerdx-table-selected-row").length&&e.table.classList.remove("kerdx-selectable")}}}),n.pressed(t=>{let r=t.target;if(t.duration>300&&(r.classList.contains("kerdx-table-column-cell")||!this.isnull(r.getParents(".kerdx-table-column-cell")))){r.classList.contains("kerdx-table-column-cell")||(r=r.getParents(".kerdx-table-column-cell"));let t=r.dataset.row;if(0==c.findAll(".kerdx-table-selected-row").length&&!e.table.classList.contains("kerdx-selectable")){e.table.classList.add("kerdx-selectable");let r=n.findAll(`.kerdx-table-column-cell[data-row="${t}"]`);for(let e=0;e<r.length;e++)r[e].classList.add("kerdx-table-selected-row");i.remove()}}}))}createForm(e={element:"",title:"",columns:1,contents:{},required:[],buttons:{}}){let t,r=this.createElement({element:e.element||"form",attributes:e.attributes,children:[{element:"h3",attributes:{class:"kerdx-form-title"},text:e.title},{element:"section",attributes:{class:"kerdx-form-contents",style:{gridTemplateColumns:`repeat(${e.columns}, 1fr)`}}},{element:"section",attributes:{class:"kerdx-form-buttons"}}]});r.classList.add("kerdx-form"),this.isset(e.parent)&&e.parent.append(r);let n=r.find(".kerdx-form-contents");for(let i in e.contents){t=this.isset(e.contents[i].note)?`(${e.contents[i].note})`:"";let r=e.contents[i].label||this.camelCasedToText(i).toLowerCase(),s=n.makeElement({element:"div",attributes:{class:"kerdx-form-single-content"},children:[{element:"label",html:r,attributes:{class:"kerdx-form-label",for:i.toLowerCase()}}]}),a=s.makeElement(e.contents[i]);a.classList.add("kerdx-form-data"),this.isset(e.contents[i].note)&&s.makeElement({element:"span",text:e.contents[i].note,attributes:{class:"kerdx-form-note"}}),this.isset(e.required)&&e.required.includes(i)&&(a.required=!0)}for(let i in e.buttons)r.find(".kerdx-form-buttons").makeElement(e.buttons[i]);return r.makeElement({element:"span",attributes:{class:"kerdx-form-error"},state:{name:"error",owner:"#"+r.id}}),r}picker(e={title:"",contents:[]},t=(e=>{})){let r=this.createElement({element:"div",attributes:{class:"kerdx-picker"},children:[{element:"h3",attributes:{class:"kerdx-picker-title"},text:e.title||""},{element:"div",attributes:{class:"kerdx-picker-contents"}}]});for(let n of e.contents)r.find(".kerdx-picker-contents").makeElement({element:"span",attributes:{class:"kerdx-picker-single","data-name":n},text:n});return r.addEventListener("dblclick",e=>{e.target.classList.contains("kerdx-picker-single")&&t(e.target.dataset.name)}),r}popUp(e,t={title:"",attributes:{}}){let r=t.container||document.body,n=t.title||"";t.attributes=t.attributes||{},t.attributes.style=t.attributes.style||{},t.attributes.style.width=t.attributes.style.width||"50vw",t.attributes.style.height=t.attributes.style.height||"50vh";let i=this.createElement({element:"div",attributes:{class:"kerdx-pop-up"},children:[{element:"div",attributes:{id:"pop-up-window",class:"kerdx-pop-up-window"},children:[{element:"div",attributes:{id:"pop-up-menu",class:"kerdx-pop-up-menu"},children:[{element:"p",attributes:{id:"",style:{color:"inherit",padding:"1em"}},text:n},{element:"i",attributes:{id:"toggle-window",class:"kerdx-pop-up-control fas fa-expand-alt"}},{element:"i",attributes:{id:"close-window",class:"kerdx-pop-up-control fas fa-times"}}]},{element:"div",attributes:{id:"pop-up-content",class:"kerdx-pop-up-content"},children:[e]}]}]});return i.find("#pop-up-window").setAttributes(t.attributes),i.find("#toggle-window").addEventListener("click",e=>{i.find("#toggle-window").classList.toggle("fa-expand-alt"),i.find("#toggle-window").classList.toggle("fa-compress-alt"),i.find("#toggle-window").classList.contains("fa-expand-alt")?i.find("#pop-up-window").css({height:t.attributes.style.height,width:t.attributes.style.width}):i.find("#pop-up-window").css({height:"var(--fill-parent)",width:"var(--fill-parent)"})}),i.find("#close-window").addEventListener("click",e=>{i.remove()}),r.append(i),i}createSelect(e={value:"",contents:{},multiple:!1}){let t,r=[],n=!1,i=-1,s=this.createElement({element:"div",attributes:e.attributes,children:[{element:"span",attributes:{class:"kerdx-select-control"},children:[{element:"input",attributes:{class:"kerdx-select-input",value:e.value||"",ignore:!0}},{element:"span",attributes:{class:"kerdx-select-toggle"}}]},{element:"input",attributes:{class:"kerdx-select-search",placeHolder:"Search me...",ignore:!0}},{element:"span",attributes:{class:"kerdx-select-contents"}}]});s.classList.add("kerdx-select");let a=s.getAttribute("value");s.value=[],this.isnull(a)||(s.value=this.array.findAll(a.split(","),e=>""!=e.trim())),s.dataset.active="false";let o=s.find(".kerdx-select-contents"),l=s.find(".kerdx-select-input"),d=s.find(".kerdx-select-search"),c=s.find(".kerdx-select-toggle");if(e.contents=e.contents||{},Array.isArray(e.contents)){let t=e.contents;e.contents={};for(let r=0;r<t.length;r++)e.contents[t[r]]=t[r]}for(let v in e.contents){let t=o.makeElement({element:"span",attributes:{class:"kerdx-select-option",value:v}});t.innerHTML=e.contents[v],t.value=v}for(let v of s.value)l.value+=e.contents[v],l.dispatchEvent(new CustomEvent("change"));let u=!this.isset(e.multiple)||0==e.multiple,h=s.findAll(".kerdx-select-option");d.onChanged(e=>{for(let t=0;t<h.length;t++)h[t].textContent.toLowerCase().includes(e.toLowerCase())?h[t].cssRemove(["display"]):h[t].css({display:"none"})});let f,p,m=e=>{n=!1,"ArrowDown"==e.key&&i<h.length-1?(i++,n=!0):"ArrowUp"==e.key&&i>0?(i--,n=!0):e.key,n&&(t=o.find(".kerdx-select-active-option"),this.isnull(t)||t.classList.remove("kerdx-select-active-option"),h[i].classList.add("kerdx-select-active-option"))};c.addEventListener("click",e=>{let t="true"==s.dataset.active;t?y(t):b(t)}),document.body.css({overflow:"auto"});let g=()=>{f=s.position().top,p=document.body.clientHeight-s.position().top,f>p?o.css({top:-o.position().height+"px"}):o.css({top:s.position().height+"px"})},b=()=>{s.inView("body")&&(l.addEventListener("keydown",m,!1),d.css({display:"flex"}),o.css({display:"flex"}),g(),s.dataset.active="true")},y=()=>{l.removeEventListener("keydown",m,!1),d.cssRemove(["display"]),o.cssRemove(["display"]),s.dataset.active="false"};return s.bubbledEvent("click",t=>{if(t.target!=c&&"false"==s.dataset.active&&b(),t.target.classList.contains("kerdx-select-option")){let r=e.contents[t.target.value];"single"==e.multiple&&l.value.includes(r)?l.value=l.value.replace(r,""):l.value+=", "+r,l.dispatchEvent(new CustomEvent("change")),u&&y()}}),s.notBubbledEvent("click",e=>{"true"==s.dataset.active&&y()}),l.addEventListener("change",t=>{let n=l.value.split(",");n=this.array.findAll(n,e=>""!=e.trim()),n=this.array.each(n,e=>e.trim()),u||"single"==e.multiple&&(n=this.array.toSet(n)),(t=>{r=[],t=t.split(",");for(let n of t){n=n.trim();for(let t in e.contents)e.contents[t]==n&&(n=t);r.push(n)}s.value=r,l.value=t})(n=n.join(", "))}),window.addEventListener("scroll",e=>{s.inView("body")&&g()}),s}choose(e={note:"",options:[]}){let t=this.createElement({element:"span",attributes:{class:"crater-choose"},children:[{element:"p",attributes:{class:"crater-choose-note"},text:e.note},{element:"span",attributes:{class:"crater-choose-control"}},{element:"button",attributes:{id:"crater-choose-close",class:"btn"},text:"Close"}]}),r=t.querySelector(".crater-choose-control");t.querySelector("#crater-choose-close").addEventListener("click",e=>{t.remove()});for(let n of e.options)r.makeElement({element:"button",attributes:{class:"btn choose-option"},text:n});return{display:t,choice:new Promise((e,n)=>{r.addEventListener("click",r=>{r.target.classList.contains("choose-option")&&(e(r.target.textContent),t.remove())})})}}textEditor(e={id:"",width:"max-width"}){(e=e||{}).id=e.id||"text-editor";let t=this.createElement({element:"div",attributes:{id:e.id},children:[{element:"style",text:`\n\n                    div#crater-text-editor{\n                        margin: 0 auto;\n                        display: grid;\n                        width: ${e.width||"max-content"};\n                        height: max-content;\n                        border: 2px solid rgb(40, 110, 89);\n                        border-radius: 8px 8px 0px 0px;\n                        background-color: var(--primary-color);\n                    }\n                    \n                    div#crater-rich-text-area{\n                        height: 100%;\n                        width: 100%;\n                    }\n\n                    div#crater-the-ribbon{\n                        border-bottom: none;\n                        width: 100%;\n                        padding: .5em 0;\n                        display: grid;\n                        grid-template-rows: max-content max-content;\n                        background-color: rgb(40, 110, 89);\n                        color: var(--primary-color);\n                        text-align: left;\n                    }\n\n                    iframe#crater-the-WYSIWYG{\n                        height: 100%;\n                        width: 100%;\n                    }\n\n                    div#crater-the-ribbon button{\n                        color: var(--primary-color);\n                        border: none;\n                        outline: none;\n                        background-color: transparent;\n                        cursor: pointer;\n                        padding: .3em;\n                        margin: .5em;\n                    }\n\n                    div#crater-the-ribbon button:hover{\n                        background-color: rgb(20, 90, 70);\n                        transition: all 0.3s linear 0s;\n                    }\n\n                    div#crater-the-ribbon input,  div#crater-the-ribbon select{\n                        margin: .5em;\n                    }\n\n                    div#crater-the-ribbon input[type="color"]{\n                        border: none;\n                        outline: none;\n                        background-color: transparent;\n                    }\n                `},{element:"div",attributes:{id:"crater-the-ribbon"},children:[{element:"span",children:[{element:"button",attributes:{id:"undoButton",title:"Undo"},text:"&larr;"},{element:"button",attributes:{id:"redoButton",title:"Redo"},text:"&rarr;"},{element:"select",attributes:{id:"fontChanger"},options:this.fontStyles},{element:"select",attributes:{id:"fontSizeChanger"},options:this.range(1,20)},{element:"button",attributes:{id:"orderedListButton",title:"Numbered List"},text:"(i)"},{element:"button",attributes:{id:"unorderedListButton",title:"Bulletted List"},text:"&bull;"},{element:"button",attributes:{id:"linkButton",title:"Create Link"},text:"Link"},{element:"button",attributes:{id:"unLinkButton",title:"Remove Link"},text:"Unlink"}]},{element:"span",children:[{element:"button",attributes:{id:"boldButton",title:"Bold"},children:[{element:"b",text:"B"}]},{element:"button",attributes:{id:"italicButton",title:"Italic"},children:[{element:"em",text:"I"}]},{element:"button",attributes:{id:"underlineButton",title:"Underline"},children:[{element:"u",text:"U"}]},{element:"button",attributes:{id:"supButton",title:"Superscript"},children:[{element:"sup",text:"2"}]},{element:"button",attributes:{id:"subButton",title:"Subscript"},children:[{element:"sub",text:"2"}]},{element:"button",attributes:{id:"strikeButton",title:"Strikethrough"},children:[{element:"s",text:"abc"}]},{element:"input",attributes:{type:"color",id:"fontColorButton",title:"Change Font Color",value:"#000000"}},{element:"input",attributes:{type:"color",id:"highlightButton",title:"Hightlight Text",value:"#ffffff"}},{element:"input",attributes:{type:"color",id:"backgroundButton",title:"Change Background",value:"#ffffff"}},{element:"button",attributes:{id:"alignLeftButton",title:"Align Left"},children:[{element:"a",text:"L"}]},{element:"button",attributes:{id:"alignCenterButton",title:"Align Center"},children:[{element:"a",text:"C"}]},{element:"button",attributes:{id:"alignJustifyButton",title:"Align Justify"},children:[{element:"a",text:"J"}]},{element:"button",attributes:{id:"alignRightButton",title:"Align Right"},children:[{element:"a",text:"R"}]}]}]},{element:"div",attributes:{id:"crater-rich-text-area"},children:[{element:"iframe",attributes:{id:"crater-the-WYSIWYG",frameBorder:0,name:"theWYSIWYG"}}]}]});t.findAll("select#font-changer > option").forEach(e=>{e.css({fontFamily:e.value})}),t.find("#unorderedListButton").innerHTML="&bull;",t.find("#redoButton").innerHTML="&rarr;",t.find("#undoButton").innerHTML="&larr;";let r=this,n=t.find("#crater-the-WYSIWYG");return n.onAdded(()=>{let i=n.contentWindow.document;i.body.innerHTML="",r.isset(e.content)&&(i.body.innerHTML=e.content.innerHTML),i.designMode="on",t.find("#boldButton").addEventListener("click",()=>{i.execCommand("Bold",!1,null)},!1),t.find("#italicButton").addEventListener("click",()=>{i.execCommand("Italic",!1,null)},!1),t.find("#underlineButton").addEventListener("click",()=>{i.execCommand("Underline",!1,null)},!1),t.find("#supButton").addEventListener("click",()=>{i.execCommand("Superscript",!1,null)},!1),t.find("#subButton").addEventListener("click",()=>{i.execCommand("Subscript",!1,null)},!1),t.find("#strikeButton").addEventListener("click",()=>{i.execCommand("Strikethrough",!1,null)},!1),t.find("#orderedListButton").addEventListener("click",()=>{i.execCommand("InsertOrderedList",!1,"newOL"+r.random())},!1),t.find("#unorderedListButton").addEventListener("click",()=>{i.execCommand("InsertUnorderedList",!1,"newUL"+r.random())},!1),t.find("#fontColorButton").onChanged(e=>{i.execCommand("ForeColor",!1,e)}),t.find("#highlightButton").onChanged(e=>{i.execCommand("BackColor",!1,e)}),t.find("#backgroundButton").onChanged(e=>{i.body.style.background=e}),t.find("#fontChanger").onChanged(e=>{i.execCommand("FontName",!1,e)}),t.find("#fontSizeChanger").onChanged(e=>{i.execCommand("FontSize",!1,e)}),t.find("#linkButton").addEventListener("click",()=>{let e=prompt("Enter a URL","http://");r.isnull(e)||i.execCommand("CreateLink",!1,e)},!1),t.find("#unLinkButton").addEventListener("click",()=>{i.execCommand("UnLink",!1,null)},!1),t.find("#undoButton").addEventListener("click",()=>{i.execCommand("Undo",!1,null)},!1),t.find("#redoButton").addEventListener("click",()=>{i.execCommand("redo",!1,null)},!1),t.find("#alignLeftButton").addEventListener("click",()=>{i.execCommand("justifyLeft",!1,null)}),t.find("#alignCenterButton").addEventListener("click",()=>{i.execCommand("justifyCenter",!1,null)}),t.find("#alignJustifyButton").addEventListener("click",()=>{i.execCommand("justifyFull",!1,null)}),t.find("#alignRightButton").addEventListener("click",()=>{i.execCommand("justifyRight",!1,null)})},!1),t}displayData(e={},t){let r=[],n=e=>this.createElement({element:"span",attributes:{class:"kerdx-data-str"},text:`"${e}"`}),i=e=>this.createElement({element:"span",attributes:{class:"kerdx-data-lit"},text:""+e}),s=e=>this.createElement({element:"span",attributes:{class:"kerdx-data-pun"},text:""+e}),a=(e,t)=>{t=t||{};let i=this.createElement({element:"span",attributes:{class:"kerdx-data-item"}});return r.push(i),this.isset(t.key)?i.makeElement([n(t.key),s(" : "),d(e)]):i.makeElement([d(e)]),i},o=e=>{let t,n=this.createElement({element:"span",attributes:{class:"kerdx-data-block"}});r.push(n),n.makeElement(s("["));for(let r=0;r<e.length;r++)t=n.makeElement(a(e[r])),r!=e.length-1&&t.makeElement(s(","));return n.makeElement(s("]")),n},l=e=>{let t,n=this.createElement({element:"span",attributes:{class:"kerdx-data-block"}});r.push(n),n.makeElement(s("{"));let i=0;for(let r in e)t=n.makeElement(a(e[r],{key:r})),i!=Object.keys(e).length-1&&t.makeElement(s(",")),i++;return n.makeElement(s("}")),n},d=e=>"string"==typeof e?n(e):Array.isArray(e)?o(e):"object"==typeof e?l(e):i(e),c=this.createElement({element:"pre",attributes:{class:"kerdx-data-window"},children:[{element:"span",attributes:{class:"kerdx-data-line",style:{lineHeight:"25px"}}},{element:"span",attributes:{class:"kerdx-data-toggles"}},{element:"code",attributes:{class:"kerdx-data-code",style:{lineHeight:"25px"}},children:[d(e)]}]});this.isset(t)&&t.append(c);let u,h,f=c.find(".kerdx-data-code"),p=(f.position().height,c.find(".kerdx-data-line")),m=c.find(".kerdx-data-toggles"),g=(parseInt("25px"),f.findAll(".kerdx-data-item"),f.findAll(".kerdx-data-block")),b=e=>{let t=Math.floor((e.position().top-f.position().top)/parseInt("25px"))+1,r=Math.floor((e.position().bottom-f.position().top)/parseInt("25px"))+1;e.range=this.range(r,t)},y=e=>{for(let t=0;t<e.range.length;t++)this.isset(u[e.range[t]].controller)||(u[e.range[t]].css({display:"none"}),u[e.range[t]].controller=e)},v=e=>{let t=e.children;for(let r=0;r<t.length;r++)t[r].classList.contains("kerdx-data-item")&&(t[r].css({display:"none"}),t[r].findAll(".kerdx-data-block").forEach(t=>{this.isset(t.toggle.controller)||(t.toggle.controller=e,t.toggle.css({display:"none"}))}))};return r.push(void 0),c.onAdded(e=>{(()=>{for(let e=0;e<r.length;e++)p.makeElement([{element:"a",html:""+(e/1+1),attributes:{class:"kerdx-data-line-number"}}])})(),(()=>{for(let e=0;e<g.length;e++){let t=g[e].position().top-f.position().top+6+"px",r=m.makeElement({element:"i",attributes:{class:"kerdx-data-toggles-button fas fa-arrow-down",style:{top:t}}});r.block=g[e],g[e].toggle=r}})(),u=p.findAll(".kerdx-data-line-number"),h=m.findAll(".kerdx-data-toggles-button"),c.addEventListener("click",e=>{let t=e.target;t.classList.contains("kerdx-data-toggles-button")&&(this.isset(t.block.range)||b(t.block),t.classList.contains("fa-arrow-down")?(y(t.block),v(t.block)):((e=>{for(let t=0;t<e.range.length;t++)u[e.range[t]].controller==e&&(u[e.range[t]].cssRemove(["display"]),delete u[e.range[t]].controller)})(t.block),(e=>{let t=e.children;for(let r=0;r<t.length;r++)t[r].classList.contains("kerdx-data-item")&&(t[r].cssRemove(["display"]),t[r].findAll(".kerdx-data-block").forEach(t=>{t.toggle.controller==e&&(delete t.toggle.controller,t.toggle.cssRemove(["display"]))}))})(t.block)),t.classList.toggle("fa-arrow-up"),t.classList.toggle("fa-arrow-down"),(()=>{for(let e=0;e<h.length;e++)h[e].css({top:h[e].block.position().top-f.position().top+6+"px"})})())})}),c}};var p={};Object.defineProperty(p,"__esModule",{value:!0}),p.ColorPicker=function(){let e={};return e.func=new r.Func,e.elementModifier=new h.Template,e.elementModifier.elementLibrary(),e.colorIndicatorPosition={x:0,y:0},e.opacityIndicatorPosition={x:0,y:0},e.convertTo="RGB",e.init=t=>(e.picker=e.elementModifier.createElement({element:"div",attributes:{class:"color-picker"},children:[{element:"span",attributes:{id:"color-picker-setters"},children:[{element:"span",attributes:{id:"color-picker-colors-window"},children:[{element:"canvas",attributes:{id:"color-picker-colors"}},{element:"span",attributes:{id:"color-picker-color-indicator"}}]},{element:"span",attributes:{id:"color-picker-opacities-window"},children:[{element:"canvas",attributes:{id:"color-picker-opacities"}},{element:"span",attributes:{id:"color-picker-opacity-indicator"}}]}]},{element:"div",attributes:{id:"color-picker-result"},children:[{element:"span",attributes:{id:"picked-color"}},{element:"span",attributes:{id:"picked-color-window"},children:[{element:"select",attributes:{id:"picked-color-setter"},options:["RGB","HEX","HSL"]},{element:"span",attributes:{id:"picked-color-value"}}]}]}]}),e.colorWindow=e.picker.find("#color-picker-colors-window"),e.opacityWindow=e.picker.find("#color-picker-opacities-window"),e.colorCanvas=e.picker.find("#color-picker-colors"),e.opacityCanvas=e.picker.find("#color-picker-opacities"),e.colorMarker=e.picker.find("#color-picker-color-indicator"),e.opacityMarker=e.picker.find("#color-picker-opacity-indicator"),e.width=t.width,e.height=t.height,e.pickedColor=t.color||"rgb(0, 0, 0)",e.colorWindow.css({height:e.height+"px"}),e.colorCanvas.width=e.width,e.colorCanvas.height=e.height,e.opacityWindow.css({height:e.height+"px"}),e.opacityCanvas.height=e.height,e.opacityCanvas.width=20,e.colorContext=e.colorCanvas.getContext("2d"),e.opacityContext=e.opacityCanvas.getContext("2d"),e.picker.find("#picked-color-value").innerText=e.pickedColor,e.picker.find("#picked-color-setter").onChanged(t=>{e.convertTo=t,e.reply()}),e.listen(),e.picker),e.calibrateColor=()=>{let t=e.colorContext.createLinearGradient(0,0,e.width,0);t.addColorStop(0,"rgb(255, 0, 0)"),t.addColorStop(.15,"rgb(255, 0, 255)"),t.addColorStop(.33,"rgb(0, 0, 255)"),t.addColorStop(.49,"rgb(0, 255, 255)"),t.addColorStop(.67,"rgb(0, 255, 0)"),t.addColorStop(.87,"rgb(255, 255, 0)"),t.addColorStop(1,"rgb(255, 0, 0)"),e.colorContext.fillStyle=t,e.colorContext.fillRect(0,0,e.width,e.height),(t=e.colorContext.createLinearGradient(0,0,0,e.height)).addColorStop(0,"rgba(255, 255, 255, 1)"),t.addColorStop(.5,"rgba(255, 255, 255, 0)"),t.addColorStop(.5,"rgba(0, 0, 0, 0)"),t.addColorStop(1,"rgba(0, 0, 0, 1)"),e.colorContext.fillStyle=t,e.colorContext.fillRect(0,0,e.width,e.height)},e.calibrateOpacity=()=>{let t;e.opacityContext.clearRect(0,0,e.opacityCanvas.width,e.height);let r=e.opacityContext.createLinearGradient(0,0,0,e.opacityCanvas.height);for(let n=100;n>=0;n--)t=e.addOpacity(e.pickedColor,n/100),r.addColorStop(n/100,t);e.opacityContext.fillStyle=r,e.opacityContext.clearRect(0,0,e.opacityCanvas.width,e.opacityCanvas.height),e.opacityContext.fillRect(0,0,e.opacityCanvas.width,e.opacityCanvas.height)},e.listen=()=>{let t=!1,r=!1;e.picker.notBubbledEvent("click",n=>{!e.added||t||r||e.dispose()}),e.colorCanvas.addEventListener("mousedown",r=>{let n=r.clientX-e.colorCanvas.getBoundingClientRect().left,i=r.clientY-e.colorCanvas.getBoundingClientRect().top;t=n>0&&n<e.colorCanvas.getBoundingClientRect().width&&i>0&&i<e.colorCanvas.getBoundingClientRect().height}),e.colorCanvas.addEventListener("mousemove",r=>{if(t){e.colorIndicatorPosition.x=r.clientX-e.colorCanvas.getBoundingClientRect().left,e.colorIndicatorPosition.y=r.clientY-e.colorCanvas.getBoundingClientRect().top,e.colorMarker.css({top:e.colorIndicatorPosition.y+"px",left:e.colorIndicatorPosition.x+"px"});let t=e.getPickedColor();e.pickedColor=`rgb(${t.r}, ${t.g}, ${t.b})`,e.reply()}}),e.colorCanvas.addEventListener("mouseup",r=>{t=!1,e.calibrateOpacity()}),e.opacityCanvas.addEventListener("mousedown",t=>{let n=t.clientX-e.opacityCanvas.getBoundingClientRect().left,i=t.clientY-e.opacityCanvas.getBoundingClientRect().top;r=n>0&&n<e.opacityCanvas.getBoundingClientRect().width&&i>0&&i<e.opacityCanvas.getBoundingClientRect().height}),e.opacityCanvas.addEventListener("mousemove",t=>{if(r){e.opacityIndicatorPosition.x=t.clientX-e.opacityCanvas.getBoundingClientRect().left,e.opacityIndicatorPosition.y=t.clientY-e.opacityCanvas.getBoundingClientRect().top,e.opacityMarker.css({top:e.opacityIndicatorPosition.y+"px"});let r=e.getPickedOpacity();e.pickedColor=`rgb(${r.r}, ${r.g}, ${r.b}, ${r.a})`,e.reply()}}),e.opacityCanvas.addEventListener("mouseup",e=>{r=!1})},e.reply=()=>{e.converColor(),e.picker.dispatchEvent(new CustomEvent("colorChanged")),e.picker.find("#picked-color").css({backgroundColor:e.convertedColor}),e.picker.find("#picked-color-value").innerText=e.convertedColor},e.converColor=()=>{"HEX"==e.convertTo?e.convertedColor=e.rgbToHex(e.pickedColor):"HSL"==e.convertTo?e.convertedColor=e.rgbToHSL(e.pickedColor):"RGB"==e.convertTo&&(e.convertedColor=e.pickedColor)},e.onChanged=t=>{e.picker.addEventListener("colorChanged",r=>{t(e.convertedColor)})},e.getPickedColor=()=>{let t=e.colorContext.getImageData(e.colorIndicatorPosition.x,e.colorIndicatorPosition.y,1,1);return{r:t.data[0],g:t.data[1],b:t.data[2]}},e.getPickedOpacity=()=>{let t=e.opacityContext.getImageData(e.opacityIndicatorPosition.x,e.opacityIndicatorPosition.y,1,1),r=Math.ceil(t.data[3]/255*100)/100;return{r:t.data[0],g:t.data[1],b:t.data[2],a:r}},e.draw=t=>{e.init(t),e.calibrateColor(),e.calibrateOpacity();let r=setTimeout(()=>{e.added=!0,clearTimeout(r)},2e3);return e.picker},e.dispose=()=>{clearInterval(e.interval),e.picker.remove()},e.colorType=(t="#ffffff")=>{let r="string";if(0==t.indexOf("#")&&(t.length-1)%3==0)r="hex";else if(0==t.indexOf("rgba")){let n=e.func.inBetween(t,"rgba(",")");-1!=n&&4==n.split(",").length&&(r="rgba")}else if(0==t.indexOf("rgb")){let n=e.func.inBetween(t,"rgb(",")");-1!=n&&3==n.split(",").length&&(r="rgb")}else if(0==t.indexOf("hsla")){let n=e.func.inBetween(t,"hsla(",")");-1!=n&&4==n.split(",").length&&(r="hsla")}else if(0==t.indexOf("hsl")){let n=e.func.inBetween(t,"hsl(",")");-1!=n&&3==n.split(",").length&&(r="hsl")}return r},e.hexToRGB=(e="#ffffff",t=!0)=>{let r=0,n=0,i=0,s=255;return 4==e.length?(r="0x"+e[1]+e[1],n="0x"+e[2]+e[2],i="0x"+e[3]+e[3]):5==e.length?(r="0x"+e[1]+e[1],n="0x"+e[2]+e[2],i="0x"+e[3]+e[3],s="0x"+e[4]+e[4]):7==e.length?(r="0x"+e[1]+e[2],n="0x"+e[3]+e[4],i="0x"+e[5]+e[6]):9==e.length&&(r="0x"+e[1]+e[2],n="0x"+e[3]+e[4],i="0x"+e[5]+e[6],s="0x"+e[7]+e[8]),s=+(s/255).toFixed(3),0==t?`rgb(${+r}, ${+n}, ${+i})`:`rgb(${+r}, ${+n}, ${+i}, ${s})`},e.hexToHSL=(t="#ffffff",r=!0)=>{let n=e.hexToRGB(t,r);return e.rgbToHSL(n,r)},e.rgbToHex=(t="rgb(0, 0, 0)",r=!0)=>{let n=t.indexOf("(")+1,i=t.indexOf(")"),[s,a,o,l]=t.slice(n,i).split(",");return e.func.isset(l)||(l=1),s=(+s).toString(16),a=(+a).toString(16),o=(+o).toString(16),l=Math.round(255*l).toString(16),1==s.length&&(s="0"+s),1==a.length&&(a="0"+a),1==o.length&&(o="0"+o),1==l.length&&(l="0"+l),"#"+(0!=r?`${s}${a}${o}${l}`:`${s}${a}${o}`)},e.rgbToHSL=(t="rgb(0, 0, 0)",r=!0)=>{let n=t.indexOf("(")+1,i=t.indexOf(")"),[s,a,o,l]=t.slice(n,i).split(",");console.log(s,a,o),e.func.isset(l)||(l=1),s/=225,a/=225,o/=225;let d=Math.min(s,a,o),c=Math.max(s,a,o),u=c-d,h=0,f=0,p=0;return 0==u?h=0:c==s?h=(a-o)/u%6:c==a?h=(o-s)/u+2:c==a&&(h=(s-a)/u+4),(h=Math.round(60*h))<0&&(h+=360),p=(c+d)/2,f=0==u?0:u/(1-Math.abs(2*p-1)),p=+(100*p).toFixed(1),f=+(100*f).toFixed(1),"hsl"+(0==r?`(${h}, ${f}%, ${p}%)`:`(${h}, ${f}%, ${p}%, ${l})`)},e.hslToRGB=(t="hsl(0, 0%, 0%)",r=!0)=>{let n="rgb",i=t.indexOf("(")+1,s=t.indexOf(")"),[a,o,l,d]=t.slice(i,s).split(",");e.func.isset(d)||(d=1),console.log(a,o,l),a.indexOf("deg")>-1?a=a.substr(0,a.length-3):a.indexOf("rad")>-1?a=Math.round(a.substr(0,a.length-3)*(180/Math.PI)):a.indexOf("turn")>-1&&(a=Math.round(360*a.substr(0,a.length-4))),a>=360&&(a%=360),o=o.replace("%","")/100,l=l.replace("%","")/100;let c=(1-Math.abs(2*l-1))*o,u=c*(1-Math.abs(a/60%2-1)),h=l-c/2,f=0,p=0,m=0;return 0<=a&&a<60?(f=c,p=u,m=0):60<=a&&a<120?(f=u,p=c,m=0):120<=a&&a<180?(f=0,p=c,m=u):180<=a&&a<240?(f=0,p=u,m=c):240<=a&&a<300?(f=u,p=0,m=c):300<=a&&a<360&&(f=c,p=0,m=u),f=Math.round(255*(f+h)),p=Math.round(255*(p+h)),m=Math.round(255*(m+h)),n+(0==r?`(${f}, ${p}, ${m})`:`(${f}, ${p}, ${m}, ${d})`)},e.hslToHex=(t="",r=!0)=>{let n=e.hslToRGB(t,r);return e.rgbToHex(n,r)},e.addOpacity=(e="rgb(0, 0, 0)",t=.5)=>{let r=e.indexOf("(")+1,n=e.indexOf(")"),i=e.slice(r,n).split(",");return i[3]=t,`rgba(${i.join(",")})`},e.getOpacity=(t="rgb(0, 0, 0)")=>{t=e.func.inBetween(t,"(",")");let[r,n,i,s]=t.split(",");return s.trim()},e.invertColor=(t="#ffffff")=>{let r,n=e.colorType(t);if("hex"==n)t=t.replace("#",""),r="#"+e.invertHex(t);else if("rgb"==n)t=e.rgbToHex(t).replace("#",""),r=e.invertHex(t),r=e.hexToRGB(r);else if("rgba"==n){let n=e.getOpacity(t);t=e.rgbToHex(t).replace("#",""),r=e.invertHex(t),r=e.hexToRGB(r),r=e.addOpacity(r,n)}return r},e.invertHex=(e="ffffff")=>(16777215^Number("0x1"+e)).toString(16).substr(1).toUpperCase(),e};var m={};Object.defineProperty(m,"__esModule",{value:!0}),m.Icons=void 0;let g={};m.Icons=g,g["address-book"]="fas, fa-address-book",g.amazon="fas, fa-amazon",g.ambulance="fas, fa-ambulance",g.android="fas, fa-android",g.apple="fas, fa-apple",g.asterisk="fas, fa-asterisk",g.at="fas, fa-at",g.backward="fas, fa-backward",g.bank="fas, fa-bank",g.battery="fas, fa-battery",g.bed="fas, fa-bed",g.bell="fas, fa-bell",g.bicycle="fas, fa-bicycle",g["birthday-cake"]="fas, fa-birthday-cake",g.bitbucket="fas, fa-bitbucket",g.bitcoin="fas, fa-bitcoin",g.bluetooth="fas, fa-bluetooth",g.bolt="fas, fa-bolt",g.book="fas, fa-book",g.bus="fas, fa-bus",g.cab="fas, fa-cab",g.calculator="fas, fa-calculator",g.camera="fas, fa-camera",g.car="fas, fa-car",g.certificate="fas, fa-certificate",g.child="fas, fa-child",g.chrome="fas, fa-chrome",g.cloud="fas, fa-cloud",g.coffee="fas, fa-coffee",g.comment="fas, fa-comment",g.compass="fas, fa-compass",g.copy="fas, fa-copy",g.copyright="fas, fa-copyright",g.clone="fas, fa-clone",g["credit-card"]="fas, fa-credit-card",g.cube="fas, fa-cube",g.desktop="fas, fa-desktop",g.diamond="fas, fa-diamond",g.download="fas, fa-download",g["drivers-license"]="fas, fa-drivers-license",g.dropbox="fas, fa-dropbox",g.drupal="fas, fa-drupal",g.edge="fas, fa-edge",g.edit="fas, fa-edit",g.eject="fas, fa-eject",g["ellipsis-h"]="fas, fa-ellipsis-h",g.envelope="fas, fa-envelope",g.eraser="fas, fa-eraser",g.exchange="fas, fa-exchange",g.exclamation="fas, fa-exclamation",g.expand="fas, fa-expand",g.eye="fas, fa-eye",g["eye-slash"]="fas, fa-eye-slash",g.fax="fas, fa-fax",g.female="fas, fa-female",g.file="fas, fa-file",g.film="fas, fa-film",g.fire="fas, fa-fire",g.flag="fas, fa-flag",g.flickr="fas, fa-flickr",g.folder="fas, fa-folder",g.forward="fas, fa-forward",g.foursquare="fas, fa-foursquare",g.gift="fas, fa-gift",g.glass="fas, fa-glass",g.globe="fas, fa-globe",g.google="fas, fa-google",g["graduation-cap"]="fas, fa-graduation-cap",g.group="fas, fa-group",g.hashtag="fas, fa-hashtag",g.headphones="fas, fa-headphones",g.heart="fas, fa-heart",g.history="fas, fa-history",g.home="fas, fa-home",g.hotel="fas, fa-hotel",g.hourglass="fas, fa-hourglass",g.image="fas, fa-image",g.imdb="fas, fa-imdb",g.inbox="fas, fa-inbox",g.industry="fas, fa-industry",g.info="fas, fa-info",g.instagram="fas, fa-instagram",g.key="fas, fa-key",g.language="fas, fa-language",g.laptop="fas, fa-laptop",g.leaf="fas, fa-leaf",g.legal="fas, fa-legal",g["life-bouy"]="fas, fa-life-bouy",g.linkedin="fas, fa-linkedin",g.linux="fas, fa-linux",g.lock="fas, fa-lock",g.magic="fas, fa-magic",g.magnet="fas, fa-magnet",g.male="fas, fa-male",g.map="fas, fa-map",g.microphone="fas, fa-microphone",g.mobile="fas, fa-mobile",g.money="fas, fa-money",g.motorcycle="fas, fa-motorcycle",g.music="fas, fa-music",g.opera="fas, fa-opera",g["paint-brush"]="fas, fa-paint-brush",g["paper-plane"]="fas, fa-paper-plane",g.pause="fas, fa-pause",g.paw="fas, fa-paw",g.paypal="fas, fa-paypal",g.pen="fas, fa-pen",g.pencil="fas, fa-pencil",g.phone="fas, fa-phone",g.photo="fas, fa-photo",g.pinterest="fas, fa-pinterest",g.plane="fas, fa-plane",g.play="fas, fa-play",g.plug="fas, fa-plug",g.plus="fas, fa-plus",g.podcast="fas, fa-podcast",g.question="fas, fa-question",g.quora="fas, fa-quora",g.recycle="fas, fa-recycle",g.reddit="fas, fa-reddit",g.redo="fas, fa-redo",g.refresh="fas, fa-refresh",g.reply="fas, fa-reply",g.resistance="fas, fa-resistance",g.retweet="fas, fa-retweet",g.road="fas, fa-road",g.rocket="fas, fa-rocket",g.rss="fas, fa-rss",g.safari="fas, fa-safari",g.scribe="fas, fa-scribe",g.search="fas, fa-search",g.send="fas, fa-send",g.server="fas, fa-server",g.ship="fas, fa-ship",g["sign-in"]="fas, fa-sign-in",g.sitemap="fas, fa-sitemap",g.skyatlas="fas, fa-skyatlas",g.skype="fas, fa-skype",g.slideshare="fas, fa-slideshare",g.snapchat="fas, fa-snapchat",g.sort="fas, fa-sort",g.soundcloud="fas, fa-soundcloud",g.spoon="fas, fa-spoon",g.spotify="fas, fa-spotify",g.square="fas, fa-square",g["stack-exchange"]="fas, fa-stack-exchange",g.star="fas, fa-star",g.steam="fas, fa-steam",g["sticky-note"]="fas, fa-sticky-note",g.stop="fas, fa-stop",g["street-view"]="fas, fa-street-view",g.subway="fas, fa-subway",g.suitcase="fas, fa-suitcase",g.support="fas, fa-support",g.tasks="fas, fa-tasks",g.taxi="fas, fa-taxi",g.telegram="fas, fa-telegram",g.television="fas, fa-television",g.terminal="fas, fa-terminal",g.thermometer="fas, fa-thermometer",g.ticket="fas, fa-ticket",g.times="fas, fa-times",g.train="fas, fa-train",g.trash="fas, fa-trash",g.tree="fas, fa-tree",g.trophy="fas, fa-trophy",g.truck="fas, fa-truck",g.tumblr="fas, fa-tumblr",g.tv="fas, fa-tv",g.twitter="fas, fa-twitter",g.umbrella="fas, fa-umbrella",g.university="fas, fa-university",g.unlock="fas, fa-unlock",g.upload="fas, fa-upload",g.usb="fas, fa-usb",g.user="fas, fa-user",g["video-camera"]="fas, fa-video-camera",g.vimeo="fas, fa-vimeo",g.warning="fas, fa-warning",g.wechat="fas, fa-wechat",g.weibo="fas, fa-weibo",g.whatsapp="fas, fa-whatsapp",g.wheelchair="fas, fa-wheelchair",g.wifi="fas, fa-wifi",g["wikipedia-w"]="fas, fa-wikipedia-w",g.wordpress="fas, fa-wordpress",g.yelp="fas, fa-yelp",g.yoast="fas, fa-yoast",g.youtube="fas, fa-youtube",g.undo="fas, fa-undo";var b={};Object.defineProperty(b,"__esModule",{value:!0}),b.Shadow=function(e){return{element:e.cloneNode(!0),children:[e],properties:{},childProperties:{},updateNewElementChildProperties:function(e,t={}){let r,n;for(let i in t)for(let s of t[i]){n=this.setPositions(s.positions),r=this.getChildren(i,e,n);for(let e=0;e<r.length;e++)r[e].setProperties(s.properties)}},updateNewElementChildAttributes:function(e,t={}){let r,n;for(let i in t)for(let s of t[i]){n=this.setPositions(s.positions),r=this.getChildren(i,e,n);for(let e=0;e<r.length;e++)r[e].setAttributes(s.attributes)}},setPositions:function(e=1){return Array.isArray(e)||(e=y.range(e)),e},createElement:function(e={childDetails:{attributes:{},properties:{}},details:{attributes:{},properties:{}}}){let t=this.element.cloneNode(!0);return this.children.push(t),this.prepareElement(t,e),t},prepareElement:function(e,t={childDetails:{attributes:{},properties:{}},details:{attributes:{},properties:{}}}){null!=t.childDetails&&(null!=t.childDetails.attributes&&this.updateNewElementChildAttributes(e,t.childDetails.attributes),null!=t.childDetails.properties&&this.updateNewElementChildProperties(e,t.childDetails.properties)),null!=t.details&&(null!=t.details.attributes&&e.setAttributes(t.details.attributes),null!=t.details.properties&&e.setProperties(t.details.properties)),this.updateNewElementChildProperties(e,this.childProperties),e.setProperties(this.properties),this.makeCloneable(e)},removeElement:function(e){let t=[],r=this.children.indexOf(e);for(let n=0;n<this.children.lengt;n++)r!=n&&t.push(this.children[n]);this.children=t},cloneElement:function(e,t={childDetails:{attributes:{},properties:{}},details:{attributes:{},properties:{}}}){let r=this.children[e].cloneNode(!0);return this.children.push(r),this.prepareElement(r,t),r},makeCloneable:function(e){let t=this.children.indexOf(e);-1!=t&&(e.unitClone=e=>this.cloneElement(t,e))},length:function(){return this.children.length},setProperties:function(e={}){for(let t=0;t<this.children.length;t++)this.children[t].setProperties(e);this.element.setProperties(e);for(let t in e)this.properties[t]=e[t]},css:function(e={}){for(let t=0;t<this.children.length;t++)this.children[t].css(e);this.element.css(e)},setAttributes:function(e={}){for(let t=0;t<this.children.length;t++)this.children[t].setAttributes(e);this.element.setAttributes(e)},addClasses:function(e=""){for(let t=0;t<this.children.length;t++)this.children[t].addClasses(e);this.element.addClasses(e)},removeClasses:function(e=""){for(let t=0;t<this.children.length;t++)this.children[t].removeClasses(e);this.element.removeClasses(e)},getChildren:function(e="",t,r=[]){let n=[],i=t.findAll(e);if(i.length>0)for(let s=0;s<r.length;s++)null!=i[r[s]]&&n.push(i[r[s]]);return n},childCss:function(e="",t={},r=[]){let n;r=this.setPositions(r);for(let i=0;i<this.children.length;i++){n=this.getChildren(e,this.children[i],r);for(let e=0;e<n.length;e++)n[e].css(t)}n=this.getChildren(e,this.element,r);for(let i=0;i<n.length;i++)n[i].css(t)},setChildProperties:function(e="",t={},r=[]){let n;r=this.setPositions(r);for(let i=0;i<this.children.length;i++){n=this.getChildren(e,this.children[i],r);for(let e=0;e<n.length;e++)n[e].setProperties(t)}n=this.getChildren(e,this.element,r);for(let i=0;i<n.length;i++)n[i].setProperties(t);this.childProperties[e]=this.childProperties[e]||[],this.childProperties[e].push({properties:t,positions:r})},setChildAttributes:function(e="",t={},r=""){let n;r=this.setPositions(r);for(let i=0;i<this.children.length;i++){n=this.getChildren(e,this.children[i],r);for(let e=0;e<n.length;e++)n[e].setAttributes(t)}n=this.getChildren(e,this.element,r);for(let i=0;i<n.length;i++)n[i].setAttributes(t)},addClassesToChild:function(e="",t="",r=[]){let n;r=this.setPositions(r);for(let i=0;i<this.children.length;i++){n=this.getChildren(e,this.children[i],r);for(let e=0;e<n.length;e++)n[e].addClasses(t)}n=this.getChildren(e,this.element,r);for(let i=0;i<n.length;i++)n[i].addClasses(t)},removeClassesFromChild:function(e="",t="",r=[]){let n;r=this.setPositions(r);for(let i=0;i<this.children.length;i++){n=this.getChildren(e,this.children[i],r);for(let e=0;e<n.length;e++)n[e].removeClasses(t)}n=this.getChildren(e,this.element,r);for(let i=0;i<n.length;i++)n[i].removeClasses(t)}}};let y=new r.Func;var v={};Object.defineProperty(v,"__esModule",{value:!0}),v.ObjectLibrary=function(){let e={extractFromJsonArray:(e,t)=>{let r=Object.keys(e),n=Object.values(e),i=[];if(null!=t)for(let s of t){let e={};for(let t in r)x.contains(Object.keys(s),n[t])&&(e[r[t]]=s[n[t]]);i.push(e)}return i},find:(e,t)=>{for(let r in e)if(1==t(e[r]))return e[r]},findAll:(e,t)=>{let r={};for(let n in e)1==t(e[n])&&(r[n]=e[n]);return r}};return e.makeIterable=e=>(e[Symbol.iterator]=function*(){let t=Object.keys(e);for(let e of t)yield this[e]},e),e.max=t=>(t=e.sort(t,{value:!0}),e.getIndex(t)),e.min=t=>(t=e.sort(t,{value:!1}),e.getIndex(t)),e.onChanged=(e,t)=>{const r={get(e,t,n){try{return new Proxy(e[t],r)}catch(i){return Reflect.get(e,t,n)}},defineProperty:(e,r,n)=>(t(e,r),Reflect.defineProperty(e,r,n)),deleteProperty:(e,r)=>(t(e,r),Reflect.deleteProperty(e,r))};return new Proxy(e,r)},e.toArray=(e,t)=>{var r=[];return Object.keys(e).map(n=>{1==t?r[n]=e[n]:r.push(e[n])}),r},e.valueOfObjectArray=(e,t)=>{var r=[];for(let n in e)r.push(e[n][t]);return r},e.keysOfObjectArray=(e=[])=>{var t=[];for(let r in e)t=t.concat(Object.keys(e[r]));return x.toSet(t)},e.objectOfObjectArray=(e=[],t,r)=>{var n={};for(let i in e)n[e[i][t]]=e[i][r];return n},e.copy=(e,t)=>{Object.keys(e).map(r=>{t[r]=e[r]})},e.forEach=(e,t)=>{for(let r in e)t(e[r],r)},e.each=function(e,t){let r={};for(let n in e)r[n]=t(e[n],n);return r},e.isSubObject=(e,t)=>{let r;for(let n in t)if(!(r=JSON.stringify(t[n])==JSON.stringify(e[n])))break;return r},e.getSubObject=(t=[],r={})=>{let n=[],i=!0;for(let s in t)(i=e.isSubObject(t[s],r))&&n.push(t[s]);return n},e.sort=(e={},t={items:[],descend:!1,key:!1,value:!1})=>{t.item=t.item||"",t.descend=t.descend||!1;let r=[],n={};for(let[i,s]of Object.entries(e))r.push({key:i,value:s});null!=t.key&&(console.log("Hello"),r.sort((e,r)=>{let n=e.key>=r.key;return 1==t.key&&(n=!n),n})),null!=t.value&&r.sort((e,r)=>{let n=e.value>=r.value;return 1==t.value&&(n=!n),n}),null!=t.items&&r.sort((e,r)=>{let n=0,i=0;for(let a of t.items)e.value[a]>=r.value[a]?n++:i++;let s=n>=i;return 1==t.descend&&(s=!s),s});for(let{key:i,value:s}of r)n[i]=s;return n},e.reverse=(e={})=>{let t=Object.keys(e).reverse(),r={};for(let n of t)r[n]=e[n];return r},e.getIndex=(e={})=>{let t=Object.keys(e).shift();return{key:t,value:e[t]}},e.getLast=(e={})=>{let t=Object.keys(e).pop();return{key:t,value:e[t]}},e.getAt=(e={},t)=>{let r=Object.keys(e)[t];return{key:r,value:e[r]}},e.keyOf=(e={},t)=>{for(let r in e)if(JSON.stringify(e[r])==JSON.stringify(t))return r;return-1},e.lastKeyOf=(e={},t)=>{let r=-1;for(let n in e)JSON.stringify(e[n])==JSON.stringify(t)&&(r=n);return r},e.includes=(t={},r)=>-1!=e.keyOf(t,r),e};let x=(0,a.ArrayLibrary)();var w={};Object.defineProperty(w,"__esModule",{value:!0}),w.MathsLibrary=function(){let e={placeUnit:(e,t,r)=>{e=Math.floor(e).toString(),t=t||e[0],r=r||0;let n=-1;for(let i=0;i<e.length;i++)e[i]==t&&(0==r&&(n=i),r--);return-1!=n&&(n=10**(e.length-n-1)),n},round:e=>(e.dir=e.dir||"round",e.to=e.to||1,Math[e.dir](e.num/e.to)*e.to),variance:t=>{let r=e.mean(t),n=0;for(let e=0;e<t.length;e++)n+=(t[e]-r)**2;return n/t.length},standardDeviation:t=>{let r=e.variance(t);return Math.sqrt(r)},range:e=>{let t=Math.min(...e);return Math.max(...e)-t},mean:t=>e.sum(t)/t.length,median:e=>{let t=e.length;return t%2==0?(e[t/2-1]+e[t/2])/2:e[Math.floor(t/2)]},mode:e=>{let t={};for(let i=0;i<e.length;i++)null!=t[e[i]]?t[e[i]]++:t[e[i]]=i;let r,n=Math.max(...Object.value(t));for(let i in t)if(t[i]==n){r=i;break}return r},normalizeData:e=>{e.sort((e,t)=>e-t);for(var t=e[e.length-1],r=e[0],n=[],i=0;i<e.length;i++)n.push((e[i]-r)/(t-r));return n},minimuimSwaps:(e,t)=>{var r=0,n=[],i=0,s=[...e].sort((e,t)=>e-t);-1==t&&(s=s.reverse());for(var a=0;a<e.length;a++){var o=e[a];if(a!=o&&!n[a]){for(i=0,0==e[0]&&(o=a);!n[a];)n[a]=!0,o=e[a=s.indexOf(o)],i++;0!=i&&(r+=i-1)}}return r},primeFactorize:e=>{if("number"!=typeof e)return[];if(1==(e=Math.abs(parseInt(e)))||0==e)return[];for(var t,r=2,n=[];1!=e;)-1==(t=e/r).toString().indexOf(".")?(e=t,n.push(r)):r++;return n},lcf:t=>{if(!Array.isArray(t))return[];var r=[],n=[],i=1;for(var s of t){if("number"!=typeof s)return[];r.push(e.primeFactorize(s))}e:for(var a of r[0])if(-1==n.indexOf(a)){for(var o of r)if(-1==o.indexOf(a))continue e;n.push(a),i*=a}return i},stripInteger:e=>-1==(e=e.toString()).indexOf(".")?e:e.slice(0,e.indexOf(".")),stripFraction:e=>-1==(e=e.toString()).indexOf(".")?"0":e.slice(e.indexOf(".")+1),changeBase:(e,t,r)=>parseFloat(e,t).toString(r),max:e=>{var t=e[0];return k.each(e,e=>{t<e&&(t=e)}),t},min:e=>{var t=e[0];return k.each(e,e=>{t>e&&(t=e)}),t},sum:e=>{let t=0;for(let r=0;r<e.length;r++){if(isNaN(Math.floor(e[r]))){t=!1;break}t+=e[r]/1}return t},product:e=>{let t=1;for(let r=0;r<e.length;r++){if(isNaN(Math.floor(e[r]))){t=!1;break}t*=e[r]}return t},add:(...e)=>{let t=[];return e[0].forEach((r,n)=>{e.forEach((e,t)=>{if(0!=t){let t=Array.isArray(e)?e[n]:e;r+=1==isNaN(t)?0:t}}),t.push(r)}),t},sub:(...e)=>{let t=[];return e[0].forEach((r,n)=>{e.forEach((e,t)=>{if(0!=t){let t=Array.isArray(e)?e[n]:e;r-=1==isNaN(t)?0:t}}),t.push(r)}),t},mul:(...e)=>{let t=[];return e[0].forEach((r,n)=>{e.forEach((e,t)=>{if(0!=t){let t=Array.isArray(e)?e[n]:e;r*=1==isNaN(t)?0:t}}),t.push(r)}),t},divide:(...e)=>{let t=[];return e[0].forEach((r,n)=>{e.forEach((e,t)=>{if(0!=t){let t=Array.isArray(e)?e[n]:e;r/=1==isNaN(t)?0:t}}),t.push(r)}),t},abs:e=>k.each(e,e=>(e=1==isNaN(e)?0:e,Math.abs(e)))};return e};let k=(0,a.ArrayLibrary)();var C={};Object.defineProperty(C,"__esModule",{value:!0}),C.AnalysisLibrary=function(){let e={entropy:e=>{let t=0,r=Object.values(e),n=E.sum(r);for(let i of r)t-=i/n*Math.log2(i/n);return t},informationGain:(t,r)=>{let n=e=>{let t={};for(let r of e)t[r]=t[r]||0,t[r]++;return t},i=n(t),s=e.entropy(i),a=0,o=Object.values(r),l=0;for(let e=0;e<o.length;e++)l+=o[e].length,o[e]=n(o[e]);for(let d of o)a+=E.sum(Object.values(d))/l*e.entropy(d);return s-a},highestInformationGainNode:(t,r)=>{let n={};for(let i in r)n[i]=e.informationGain(t,r[i]);return L.max(n)},quartileRange:e=>{let t=e=>e.length%2==0?[Math.ceil(e.length/2)-1,Math.ceil(e.length/2)]:[Math.ceil(e.length/2)-1],r=e=>{let[r,n]=t(e),i=[];return i.push(e[r]),null!=n&&i.push(e[n]),i},n=e=>{let[r,n]=t(e);return null==n&&(n=r),[e.slice(0,r),e.slice(n+1)]},i=n(e),[s,a]=n(i[0]),[o,l]=n(i[1]),d=r(i[0]),c=r(i[1]),u=E.median(d);return E.median(c)-u},normalizeData:e=>{e.sort((e,t)=>e-t);for(var t=e[e.length-1],r=e[0],n=[],i=0;i<e.length;i++)n.push((e[i]-r)/(t-r));return n}};return e};let E=(0,w.MathsLibrary)(),L=(0,v.ObjectLibrary)();var A={};Object.defineProperty(A,"__esModule",{value:!0}),A.Compression=function(){const e={getFrequency:(e=[])=>{const t={};for(let r in e)null==t[e[r]]?t[e[r]]=1:t[e[r]]++;return t},getProbabilities:(t=[])=>{let r=e.getFrequency(t);for(let e in r)r[e]=r[e]/t.length;return r},entropy:(t=[])=>{let r,n=0,i=S.dataType(t);"number"==i?r=t:"string"==i&&(r=Object.values(e.getProbabilities(t)));for(let e of r)n+=-e*Math.log2(e);return n},isUDC:(e=[])=>{let t,r=!0,n=!0,i=t=>{if(e.includes(t))return r=!1,void(n=!1);e.push(t)},s=s=>{t=!0;for(let t=0;t<e.length&&(t==s||(e[t]==e[s]?(r=!1,n=!1):0==e[t].indexOf(e[s])&&i(e[t].replace(e[s],"")),n));t++);};for(;n;){for(let t=0;t<e.length&&(s(t),0!=n);t++);1==t&&(n=!1)}return r},sfAlgorithm:(t=[])=>{let r=e.getFrequency(t),n=M.sort(r,{value:!0}),i="",s={path:"",size:O.sum(Object.values(n)),value:JSON.parse(JSON.stringify(n))},a=JSON.parse(JSON.stringify(n));for(let e in a)a[e]={frequency:a[e]};let o=e=>{let r=[{path:e.path+"0",size:0,value:[]},{path:e.path+"1",size:0,value:[]}];for(let t in e.value)r[0].size<r[1].size?(r[0].value[t]=e.value[t],r[0].size+=e.value[t]):(r[1].value[t]=e.value[t],r[1].size+=e.value[t]);r=(e=>{if(e[0].size>e[1].size){let t=e[0];e[0]=e[1],e[1]=t,t=e[0].path,e[0].path=e[1].path,e[1].path=t}return e})(r);for(let n in r)if(Object.values(r[n].value).length>1)r[n].value=o(r[n]);else{let e=Object.keys(r[n].value)[0];a[e].code=r[n].path,a[e].length=r[n].path.length,a[e].probability=r[n].size/t.length,a[e].log=Math.log2(1/a[e].probability)}return r};s=o(s);for(let e of t)i+=a[e].code;return{codeWord:i,table:a,data:t,tree:s}},huffmanCoding:(t=[])=>{let r=e.getProbabilities(t),n=M.sort(r,{value:!0}),i=[],s={};for(let e in n)s[e]={probability:n[e],path:"",length:0,prod:0},i.push({value:n[e],origins:e});let a=(e=[])=>{let t=e.length,r=[];if(t>1){let n=t-1,i=t-2,s=e[i].value+e[n].value,o=!1;for(let a=0;a<e.length;a++)if(a!=i&&a!=n){if(e[a].value<=s&&!o){let t={value:s,origins:[e[i].origins,e[n].origins]};r.push(t),o=!0}r.push(e[a])}else if(2==t){let t={value:s,origins:[e[i].origins,e[n].origins]};r.push(t);break}t>2&&(r=a(r))}return r};i=a(i);let o=(e,t)=>{for(let r in e)Array.isArray(e[r])?o(e[r],t+r):(s[e[r]].path=t+r,s[e[r]].length=t.length,s[e[r]].prod=t.length*s[e[r]].probability)};o(i[0].origins,"");let l=O.sum(M.valueOfObjectArray(s,"prod"));return r=n=void 0,{table:s,data:t,avgLength:l,tree:i}},golomb:(e,t)=>{let r=Math.floor(e/t),n=Array(r).fill(1).join("")+"0",i=Math.ceil(Math.log2(t)),s=2**i-t,a=e%t;return n+(()=>{let e=a.toString();return a<s?(e=a.toString(),e=Array(i-1-e.length).fill(0).join("")+e):(e=(a+s).toString(),e=Array(i-e.length).fill(0).join("")+e),e})()},encodeArithmetic:(e,t)=>{let r=e=>{let r=0;for(let n in t){if(e==n)break;r=100*(r/10+t[n]/10)/10}return r},n=[{l:0,u:1}],i=t=>{let i=n[t];return i.l+(i.u-i.l)*r(e[t]-1)},s=t=>{let i=n[t];return i.l+(i.u-i.l)*r(e[t])};for(let o=0;o<e.length;o++)n.push({l:i(o),u:s(o)});let a=n.pop();return(a.l+a.u)/2},decodeArithmetic:(e=0,t)=>{let r="",n=e=>{let r=0;for(let n in t){if(e==n)break;r=100*(r/10+t[n]/10)/10}return r},i=[{l:0,u:1}],s=e=>{let t=i[e];return t.l+(t.u-t.l)*n(r[e]-1)},a=e=>{let t=i[e];return t.l+(t.u-t.l)*n(r[e])},o=0,l=!1;for(;!l;){let t=!1,n=1,d={};for(;!t;){let r=s(o),i=a(o);if(l=r>=e&&e<=i)break;t=r<e&&e<i,d={l:r,u:i,x:n},n++}if(l)break;o++,i.push(d),r+=d.x}return r},encodeDiagram:(e="",t={})=>{let r,n="",i=()=>{let n,i=e[r],s=i+e[r+1];return null!=t[s]?(n=t[s],r++):n=t[i],n};for(r=0;r<e.length;r++)n+=i();return n},encodeLZ1:(e="",t={windowSize:0,searchSize:0,lookAheadSize:0})=>{null==t.windowSize&&(t.windowSize=t.searchSize+t.lookAheadSize),null==t.searchSize&&(t.searchSize=t.windowSize-t.lookAheadSize),null==t.lookAheadSize&&(t.lookAheadSize=t.windowSize-t.searchSize);let r,n,i,s,a=0,o=()=>{let t=i[0],r={o:0,l:0,c:t};if(s.includes(t)){let t=[];for(let a in s)if(s[a]==r.c){let r=+n+ +a,o=0,l=0,d=!0,c=[];for(;d;)c.push(e[r]),d=i[o+ ++l]===e[r+l];t.push({o:s.length-a,l:c.length,c:i[c.length]})}r=t[0];for(let e of t)(r.l<e.l||r.l==e.l&&r.o>e.o)&&(r=e)}return a+=r.l,r},l=[];for(a=0;a<e.length;a++)(n=a-t.searchSize)<0&&(n=0),r=a+t.lookAheadSize,s=e.slice(n,a).split(""),i=e.slice(a,r).split(""),l.push(o());return l},decodeLZ1:(e=[{o:0,l:0,c:""}],t={windowSize:0,searchSize:0,lookAheadSize:0})=>{let r="";null==t.windowSize&&(t.windowSize=t.searchSize+t.lookAheadSize),null==t.searchSize&&(t.searchSize=t.windowSize-t.lookAheadSize),null==t.lookAheadSize&&(t.lookAheadSize=t.windowSize-t.searchSize);for(let n of e){for(let e=0;e<n.l;e++)r+=r[r.length-n.o];r+=n.c}return r},encodeLZ2:(e="")=>{let t,r,n=[],i=[],s=n=>{let a=(t=>{let r="";for(let n of t)r+=e[n];return r})(n),o=i.indexOf(a),l={i:r,c:a[a.length-1]};return-1==o?i.push(a):(n.push(++t),r=o+1,l=s(n)),l};for(t=0;t<e.length;t++)r=0,n.push(s([t]));return n},decodeLZ2:(e=[{i:0,c:""}])=>{let t,r=[];for(let n of e)t="",0!=n.i&&(t=r[n.i-1]),t+=n.c,r.push(t);return r.join("")},encodeLZW:(e="",t=[])=>{let r,n,i=[],s=Array.from(t),a=t=>{let i=(t=>{let r="";for(let n of t)r+=e[n];return r})(t),o=s.indexOf(i);return-1==o?(s.push(i),o=0,n--):(n++,t.push(n),r=o+=1,i=a(t)),r};for(n=0;n<e.length;n++){r=0;let e=a([n]);null!=e&&i.push(e)}return i},decodeLZW:(e=[],t=[])=>{let r,n="",i=[],s=0,a=!1,o="",l=0,d=Array.from(t),c=(e=[])=>{let t=(e=>{let t="";s=0,o="";for(let r of e)null==n[r]?(s++,a=!0):o+=n[r],t+=n[r];return t})(e);return-1==d.indexOf(t)?(d.push(t),r--):(++r,e.push(r),c(e)),t},u=e=>{for(r=l;r<n.length;r++)if(c([r]),d.length==e){l=r+1-s;break}};for(let h of e){let e=d[h-1];if(null==e&&(u(h),e=d[h-1]),i.push(e),n=i.join(""),a){a=!1;for(let e=0;e<s;e++)o+=o[e];i.pop(),i.push(o),d.pop(),d.push(o),l+=s}}return n}};return e};let S=(0,a.ArrayLibrary)(),O=(0,w.MathsLibrary)(),M=(0,v.ObjectLibrary)();var N={};Object.defineProperty(N,"__esModule",{value:!0}),Object.defineProperty(N,"Func",{enumerable:!0,get:function(){return r.Func}}),Object.defineProperty(N,"Matrix",{enumerable:!0,get:function(){return n.Matrix}}),Object.defineProperty(N,"NeuralNetwork",{enumerable:!0,get:function(){return o.NeuralNetwork}}),Object.defineProperty(N,"Template",{enumerable:!0,get:function(){return h.Template}}),Object.defineProperty(N,"Components",{enumerable:!0,get:function(){return f.Components}}),Object.defineProperty(N,"ColorPicker",{enumerable:!0,get:function(){return p.ColorPicker}}),Object.defineProperty(N,"Period",{enumerable:!0,get:function(){return c.Period}}),Object.defineProperty(N,"Icons",{enumerable:!0,get:function(){return m.Icons}}),Object.defineProperty(N,"Shadow",{enumerable:!0,get:function(){return b.Shadow}}),Object.defineProperty(N,"ArrayLibrary",{enumerable:!0,get:function(){return a.ArrayLibrary}}),Object.defineProperty(N,"ObjectLibrary",{enumerable:!0,get:function(){return v.ObjectLibrary}}),Object.defineProperty(N,"MathsLibrary",{enumerable:!0,get:function(){return w.MathsLibrary}}),Object.defineProperty(N,"AnalysisLibrary",{enumerable:!0,get:function(){return C.AnalysisLibrary}}),Object.defineProperty(N,"Compression",{enumerable:!0,get:function(){return A.Compression}}),N.Base=void 0,N.Base=class extends f.Components{constructor(){super(),this.Matrix=n.Matrix,this.NeuralNetwork=o.NeuralNetwork,this.Shadow=b.Shadow,this.colorHandler=new p.ColorPicker,this.array=(0,a.ArrayLibrary)(),this.object=(0,v.ObjectLibrary)(),this.math=(0,w.MathsLibrary)(),this.analytics=(0,C.AnalysisLibrary)(),this.icons=m.Icons,this.styles=["https://kade-95.github.io/kerdx/css/table.css","https://kade-95.github.io/kerdx/css/cell.css","https://kade-95.github.io/kerdx/css/form.css","https://kade-95.github.io/kerdx/css/picker.css","https://kade-95.github.io/kerdx/css/select.css","https://kade-95.github.io/kerdx/css/json.css","https://kade-95.github.io/kerdx/css/popup.css"];for(let e of this.styles)this.loadCss(e)}};var P={};Object.defineProperty(P,"__esModule",{value:!0}),P.AppLibrary=function(){let e={makeWebapp:(e=(()=>{}))=>{document.addEventListener("click",t=>{let r=t.target,n=t.target.getParents("a"),i=r.getAttribute("href");"a"==r.nodeName.toLowerCase()||j.isnull(n)||(r=n),j.isnull(i)&&!j.isnull(n)&&(r=n),i=r.getAttribute("href"),"_blank"==r.getAttribute("target")?window.open(j.prepareUrl(i)):j.isnull(i)||(t.preventDefault(),j.prepareUrl(i)!=location.href&&window.history.pushState("page","title",i),e())}),window.onpopstate=e},prepareUrl:(e="")=>(e.includes(location.origin)?e.includes(location.protocol)||(e=location.protocol+"//"+e):j.urlSplitter(e).location==location.origin&&(e=location.origin+"/"+e),e)};return e.ajax=(e={async:!0,data:{},url:"",method:"",secured:!1})=>{e.async=e.async||!0,e.data=e.data||{},e.url=e.url||"./",e.method=e.method||"POST",e.secured=e.secured||!1,e.secured&&(e.url="https://cors-anywhere.herokuapp.com/"+e.url);let t=new FormData;if(e.data instanceof FormData)t=e.data;else for(let r in e.data)t.append(r,e.data[r]);return new Promise((r,n)=>{var i=new XMLHttpRequest;i.onreadystatechange=function(e){4==this.readyState&&200==this.status&&r(i.responseText)},j.isset(e.onprogress)&&(i.upload.onprogress=t=>{e.onprogress(t.loaded/t.total*50)},i.onprogress=t=>{e.onprogress(t.loaded/t.total*100)}),i.onerror=e=>{n(e)},i.open(e.method,e.url,e.async),i.send(t)})},e};let j=new N.Func;var T={};Object.defineProperty(T,"__esModule",{value:!0}),T.Database=function(e,t){let r={name:e,version:t,initialized:!1};return r.indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,r.IDBTransaction=window.IDBTransaction||window.webkitIDBTransaction||window.msIDBTransaction,r.IDBKeyRange=window.IDBKeyRange||window.webkitIDBKeyRange||window.msIDBKeyRange,r.init=function(e){const t=r.indexedDB.open(r.name);t.onupgradeneeded=t=>{null!=e&&e(t.target.result)},t.onsuccess=e=>{r.version=Math.floor(t.result.version)||Math.floor(r.version),r.initialized=!0},t.onerror=e=>{console.log(e.target.error)}},r.getVersion=function(){return new Promise((e,t)=>{const n=r.indexedDB.open(r.name);n.onsuccess=t=>{(null==r.version||r.version<n.result.version)&&(r.version=n.result.version),e(r.version)},n.onerror=e=>{t(e.target.error)}})},r.open=async function(e){return null==r.version&&await r.getVersion(),new Promise((t,n)=>{const i=r.indexedDB.open(r.name,r.version);i.onupgradeneeded=t=>{r.version=i.result.version,null!=e&&(e(t.target.result).onerror=e=>{n(e.target.error)})},i.onsuccess=e=>{t(e.target.result)},i.onerror=e=>{n(e.target.error)}})},r.collectionExists=function(e){return r.open().then(t=>t.objectStoreNames.contains(e))},r.createCollection=async function(...e){let t=await r.getVersion();return r.version=t+1,r.open(t=>{for(let r of e)t.objectStoreNames.contains(r)||t.createObjectStore(r,{keyPath:"_id"});return t})},r.emptyCollection=function(e){let t=0,n=0;return new Promise((i,s)=>{r.find({collection:e,query:{},many:!0}).then(a=>{r.open().then(r=>{if(r.objectStoreNames.contains(e)){let o=r.transaction(e,"readwrite"),l=o.objectStore(e);o.onerror=e=>{s(e.target.error)},o.oncomplete=e=>{i({action:"emptycollection",removedCount:t,ok:t==n})},n=a.length;for(let e of a){let r=l.delete(e._id);r.onerror=e=>{console.log("Error while deleting documents => "+e.target.error)},r.onsuccess=e=>{t++}}}else i({removedCount:t,ok:t==n})}).catch(e=>{s(e)})}).catch(e=>{s(e)})})},r.find=function(e){return new Promise((t,n)=>{r.open().then(r=>{let i=[];if(r.objectStoreNames.contains(e.collection)){let s=r.transaction(e.collection,"readonly");s.onerror=e=>{n(e.target.error)},s.oncomplete=r=>{1==e.many?t(i):t(i[0])};let a,o=s.objectStore(e.collection).openCursor();o.onerror=e=>{n(e.target.error)},o.onsuccess=t=>{(a=t.target.result)&&((null==e.query||B.isSubObject(a.value,e.query))&&i.push(a.value),a.continue())}}else 1==e.many?t(i):t(i[0])}).catch(e=>{n(e)})})},r.documentExists=function(e){return delete e.many,r.find(e).then(e=>null!=e)},r.generateId=function(e){return Date.now().toString(36)+Math.random().toString(36).slice(2)+Math.random().toString(36).slice(2)},r.checkId=function(e,t,n){let i=t._id||r.generateId(),s=e.get(i);s.onsuccess=s=>{null!=s.target.result?r.checkId(e,t,n):n(i)},s.onerror=e=>{console.log("Error checking ID => "+e.target.error)}},r.add=function(e,t){return new Promise((n,i)=>{let s=t.transaction(e.collection,"readwrite");s.onerror=e=>{i(e.target.error)},s.oncomplete=t=>{n({action:"insert",documents:e.query})};let a=s.objectStore(e.collection);if(1==e.many&&Array.isArray(e.query))for(let t of e.query)r.checkId(a,t,e=>{t._id=e,a.add(t)});else r.checkId(a,e.query,t=>{e.query._id=t,a.add(e.query)})})},r.insert=async function(e){return await r.collectionExists(e.collection)?r.open().then(t=>r.add(e,t)).catch(e=>e):r.createCollection(e.collection).then(t=>r.add(e,t)).catch(e=>e)},r.update=function(e){return new Promise((t,n)=>{r.open().then(r=>{r.objectStoreNames.contains(e.collection)||n("Collection not found");let i=r.transaction(e.collection,"readwrite");i.onerror=e=>{n(e.target.error)},i.oncomplete=e=>{t({action:"update",documents:a})};let s=i.objectStore(e.collection).openCursor(),a={};s.onerror=e=>{n(e.target.error)},s.onsuccess=t=>{let r=t.target.result,i=!1;if(r){if(B.isSubObject(r.value,e.check)){i=!0;for(let t in e.query)r.value[t]=e.query[t];try{let e=r.update(r.value);e.onerror=e=>{a[e.target.result]={value:r.value,status:!1}},e.onsuccess=e=>{a[e.target.result]={value:r.value,status:!0}}}catch(s){n(s)}}1!=e.many&&0!=i||r.continue()}}}).catch(e=>{n(e)})})},r.save=function(e={collection:"",query:{},check:{}}){return r.documentExists({collection:e.collection,query:e.check}).then(t=>0==t?r.insert(e):r.update(e))},r.delete=function(e){let t=0,n=0;return new Promise((i,s)=>{r.find(e).then(a=>{r.open().then(r=>{let o=r.transaction(e.collection,"readwrite"),l=o.objectStore(e.collection);if(o.onerror=e=>{s(e.target.error)},o.oncomplete=e=>{i({action:"delete",removedCount:n,ok:n==t})},Array.isArray(a)){t=a.length;for(let e of a){let t=l.delete(e._id);t.onerror=e=>{console.log("Error while deleting documents => "+e.target.error)},t.onsuccess=e=>{n++}}}else{t=1;let e=l.delete(a._id);e.onerror=e=>{console.log("Error while deleting documents => "+e.target.error)},e.onsuccess=e=>{n++}}}).catch(e=>{s(e)})}).catch(e=>{s(e)})})},r};let B=(0,N.ObjectLibrary)();var I={};Object.defineProperty(I,"__esModule",{value:!0}),Object.defineProperty(I,"ColorPicker",{enumerable:!0,get:function(){return N.ColorPicker}}),Object.defineProperty(I,"Period",{enumerable:!0,get:function(){return N.Period}}),Object.defineProperty(I,"Matrix",{enumerable:!0,get:function(){return N.Matrix}}),Object.defineProperty(I,"Func",{enumerable:!0,get:function(){return N.Func}}),Object.defineProperty(I,"Components",{enumerable:!0,get:function(){return N.Components}}),Object.defineProperty(I,"Template",{enumerable:!0,get:function(){return N.Template}}),Object.defineProperty(I,"NeuralNetwork",{enumerable:!0,get:function(){return N.NeuralNetwork}}),Object.defineProperty(I,"Icons",{enumerable:!0,get:function(){return N.Icons}}),Object.defineProperty(I,"Shadow",{enumerable:!0,get:function(){return N.Shadow}}),Object.defineProperty(I,"ArrayLibrary",{enumerable:!0,get:function(){return N.ArrayLibrary}}),Object.defineProperty(I,"ObjectLibrary",{enumerable:!0,get:function(){return N.ObjectLibrary}}),Object.defineProperty(I,"MathsLibrary",{enumerable:!0,get:function(){return N.MathsLibrary}}),Object.defineProperty(I,"AnalysisLibrary",{enumerable:!0,get:function(){return N.AnalysisLibrary}}),Object.defineProperty(I,"Compression",{enumerable:!0,get:function(){return N.Compression}}),Object.defineProperty(I,"Tree",{enumerable:!0,get:function(){return N.Tree}}),Object.defineProperty(I,"AppLibrary",{enumerable:!0,get:function(){return P.AppLibrary}}),Object.defineProperty(I,"Database",{enumerable:!0,get:function(){return T.Database}}),I.Kerdx=void 0,I.Kerdx=class extends N.Base{constructor(){super()}};var D={};Object.defineProperty(D,"__esModule",{value:!0}),D.System=function(){return{connect:(e={encode:!0,data:{}})=>{if(null==e.encode&&(e.encode=!0),1==e.encode){let t=JSON.stringify(e.data),r=kerdx.array.toSet(t.split("")).join(""),n=compressor.encodeLZW(t,r);e.data={code:n,dictionary:r,encoded:!0}}return new Promise((t,r)=>{appLibrary.ajax(e).then(e=>{1==(e=JSON.parse(e)).encoded&&(e=JSON.parse(compressor.decodeLZW(e.code,e.dictionary))),t(e)}).catch(e=>{r(e)})})}}};var R={};Object.defineProperty(R,"__esModule",{value:!0}),R.Logger=function(){const e={board:void 0,previousCommands:[],index:0,commandList:{}};return e.commandList.clear=()=>{e.board.innerHTML=""},e.commandList.log=t=>{let r=kerdx.createElement({element:"div",attributes:{class:"log-item"}});if(t instanceof Element)r.append(t);else try{r.innerHTML=t}catch(n){r.innerHTML="Error writing to the log"}e.board.append(r)},e.commandList.print=e=>{},e.commandList.request=t=>{let r=e.getCommandProps(t,"-");if(null!=r.url)if(null!=r.method)try{r.data=JSON.parse(r.data),e.disableInput(),e.write("Connecting to "+r.url),q.connect(r).then(t=>{e.write("Connected"),e.write(t)}).catch(e=>{console.log(e)}).finally(e.enableInput())}catch(n){e.write("Data format not valid")}else e.commandList.log("Method is required");else e.commandList.log("Url is required")},e.getCommandProps=(e,t)=>{let r,n={},i=e.split(" ");for(let s=0;s<i.length;s++)(r=i[s])[0]==t&&(n[r.replace(t,"")]=i[s+1]);return n},e.createWindow=()=>{let t=kerdx.createElement({element:"div",attributes:{id:"response-window"},children:[{element:"span",attributes:{id:"response-window-controls"},children:[{element:"input",attributes:{id:"response-window-search"}},{element:"i",attributes:{id:"response-window-toggle",class:"fas fa-arrow-up"}},{element:"i",attributes:{id:"response-window-clear",class:"fas fa-trash"}}]},{element:"span",attributes:{id:"response-window-log"},children:[{element:"span",attributes:{id:"response-window-board"}},{element:"span",attributes:{id:"response-window-command"},children:[{element:"label",text:"RUN: "},{element:"input",attributes:{id:"response-window-input",autoComplete:"off"}}]}]}]});e.commandInput=t.find("#response-window-input"),e.board=t.find("#response-window-board");let r=t.find("#response-window-log");return t.addEventListener("click",t=>{(t.target==r||r.isAncestor(t.target))&&(e.commandInput.focus(),e.commandInput.setSelectionRange(e.commandInput.value.length,e.commandInput.value.length,"forward"))}),e.commandInput.addEventListener("keydown",t=>{let r;if("ArrowUp"==t.key||"ArrowDown"==t.key)"ArrowUp"==t.key?e.index--:"ArrowDown"==t.key&&e.index++,0==e.previousCommands.length||e.index<0?e.index=0:e.index>=e.previousCommands.length&&(e.index=e.previousCommands.length-1),r=e.previousCommands[e.index],e.commandInput.value=r||"",e.commandInput.setSelectionRange(e.commandInput.value.length,e.commandInput.value.length,"forward");else if("Enter"==t.key){let t=e.commandInput.value;e.commandInput.value="",e.commandList.log("RUN: "+t),""!=t?(e.previousCommands.push(t),kerdx.isset(e.commandList[t.split(" ")[0]])?e.commandList[t.split(" ")[0]](t.replace(t.split(" ")[0],"").trim()):e.write(`'${t.split(" ")[0]}' not found`)):e.write(t),e.index=e.previousCommands.length-1}}),e.window=t,e.resize(),t},e.write=t=>{let r;r=t instanceof Element?t:"object"==typeof t?kerdx.displayData(t):kerdx.createElement({element:"span",html:t});let n=`[${kerdx.time()}]:`,i=kerdx.createElement({element:"div",attributes:{style:{display:"grid",gridTemplateColumns:"max-content 1fr"}},children:[{element:"label",text:n},r]});e.commandList.log(i)},e.clean=()=>{e.commandList.clear()},e.disableInput=()=>{e.commandInput.css({display:"none"})},e.enableInput=()=>{e.commandInput.cssRemove(["display"])},e.resize=()=>{e.window.onAdded(()=>{let t=e.window.parentNode,r=!1,n=e.window.position();e.window.addEventListener("mousemove",t=>{let n=t.y-e.window.position().top;n<15&&n>-15?e.window.css({cursor:"ns-resize"}):r||e.window.cssRemove(["cursor"])}),e.window.addEventListener("mousedown",t=>{let n=t.y-e.window.position().top;n<15&&n>-15&&(e.window.css({cursor:"ns-resize"}),r=!0)}),t.addEventListener("mousemove",i=>{let s=n.bottom-i.y,a=s>200,o=i.y>t.position().top;r&&o&&a&&e.window.css({height:s+"px"})}),e.window.addEventListener("mouseup",e=>{r=!1}),t.addEventListener("mouseup",e=>{r=!1})})},e};let q=new D.System;const{Kerdx:z,Compression:H,AppLibrary:$}=I;window.kerdx=new z;const{Logger:F}=R,{System:_}=D;console.log("Hello world "),window.mmu={},window.compressor=H(),window.appLibrary=$();let J=new F,U=new _;return window.k=kerdx,mmu.generateRequestContent=(e={name:"",options:[]})=>{let t=kerdx.camelCasedToText(e.name),r="input";Array.isArray(e.options)&&(r="select");let n=kerdx.createElement({element:"div",attributes:{class:"request-window-content"},children:[{element:"label",attributes:{class:"request-window-content-label",id:name},text:t},{element:r,attributes:{class:"request-window-content-data",name:e.name}}]});if(Array.isArray(e.options)){n.find(".request-window-content-data").makeElement({element:"option",attributes:{selected:!0,disabled:!0,value:null},text:"Select "+t});for(let t of e.options)n.find(".request-window-content-data").makeElement({element:"option",attributes:{value:t},text:t})}return n},mmu.generateData=()=>kerdx.createElement({element:"div",attributes:{class:"request-single-data"},children:[{element:"input",attributes:{class:"request-single-data-name",placeHolder:"Name"}},{element:"label",text:"=>"},{element:"input",attributes:{class:"request-single-data-value",placeHolder:"Value"}},{element:"select",attributes:{class:"request-single-data-type"},options:["String","Array","Json"]},{element:"i",attributes:{class:"request-single-data-remove fas fa-trash"}}]}),mmu.validateRequest=()=>{let e=document.body.find("#request-contents"),t=kerdx.validateForm(e);return!!t.flag||(J.write(kerdx.camelCasedToText(t.elementName)+" is required"),!1)},mmu.sendRequest=()=>{let e=document.body.find("#request-contents");if(mmu.validateRequest()){let t,r,n=kerdx.jsonForm(e),i=document.body.find("#request-data").findAll(".request-single-data");n.data={};for(let e=0;e<i.length;e++)t=i[e].find(".request-single-data-value").value,r=i[e].find(".request-single-data-type").value,n.data[i[e].find(".request-single-data-name").value]="Json"==r?JSON.parse(t):"Array"==r?""==t?[]:t.split(","):t;J.disableInput(),J.write("Connecting to "+n.url),U.connect(n).then(e=>{J.write("Connected"),J.write(e)}).catch(e=>{console.log(e)}).finally(J.enableInput())}},mmu.render=()=>{document.body.makeElement({element:"header",attributes:{id:"header-window"}});let e=document.body.makeElement({element:"main",attributes:{id:"main-window"},children:[{element:"nav",attributes:{id:"navigator"}},{element:"section",attributes:{id:"request-window"},children:[{element:"div",attributes:{id:"request-contents"},children:[mmu.generateRequestContent({name:"url"}),mmu.generateRequestContent({name:"method",options:["POST","GET","DELETE"]}),{element:"div",attributes:{class:"request-window-content"},children:[{element:"label",attributes:{class:"request-window-content-label"},text:"Request Data"},{element:"i",attributes:{class:"fas fa-plus",id:"new-data"}}]}]},{element:"div",attributes:{id:"request-data"}},{element:"div",attributes:{id:"request-controls"},children:[{element:"button",attributes:{id:"submit-request"},text:"Submit Request"}]}]},J.createWindow()]}),t=e.find("#new-data"),r=e.find("#submit-request"),n=e.find("#request-data"),i=e.find("#response-window"),s=e.find("#response-window-toggle"),a=e.find("#response-window-clear");t.addEventListener("click",e=>{n.makeElement(mmu.generateData())}),n.addEventListener("click",e=>{e.target.classList.contains("request-single-data-remove")&&e.target.parentNode.remove()}),r.addEventListener("click",e=>{mmu.sendRequest()}),s.addEventListener("click",e=>{i.toggleClass("response-window-full"),s.toggleClass("fa-arrow-down"),s.toggleClass("fa-arrow-up")}),a.addEventListener("click",e=>{mmu.clearLog()})},document.addEventListener("DOMContentLoaded",e=>{mmu.render()}),t.m["@thekade/kerdx"]=I,t}("function"==typeof require?require:void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
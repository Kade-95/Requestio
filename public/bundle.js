require=(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({"@thekade/kerdx":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ColorPicker", {
  enumerable: true,
  get: function () {
    return _base.ColorPicker;
  }
});
Object.defineProperty(exports, "Period", {
  enumerable: true,
  get: function () {
    return _base.Period;
  }
});
Object.defineProperty(exports, "Matrix", {
  enumerable: true,
  get: function () {
    return _base.Matrix;
  }
});
Object.defineProperty(exports, "Func", {
  enumerable: true,
  get: function () {
    return _base.Func;
  }
});
Object.defineProperty(exports, "Components", {
  enumerable: true,
  get: function () {
    return _base.Components;
  }
});
Object.defineProperty(exports, "Template", {
  enumerable: true,
  get: function () {
    return _base.Template;
  }
});
Object.defineProperty(exports, "NeuralNetwork", {
  enumerable: true,
  get: function () {
    return _base.NeuralNetwork;
  }
});
Object.defineProperty(exports, "Icons", {
  enumerable: true,
  get: function () {
    return _base.Icons;
  }
});
Object.defineProperty(exports, "Shadow", {
  enumerable: true,
  get: function () {
    return _base.Shadow;
  }
});
Object.defineProperty(exports, "ArrayLibrary", {
  enumerable: true,
  get: function () {
    return _base.ArrayLibrary;
  }
});
Object.defineProperty(exports, "ObjectLibrary", {
  enumerable: true,
  get: function () {
    return _base.ObjectLibrary;
  }
});
Object.defineProperty(exports, "MathsLibrary", {
  enumerable: true,
  get: function () {
    return _base.MathsLibrary;
  }
});
Object.defineProperty(exports, "AnalysisLibrary", {
  enumerable: true,
  get: function () {
    return _base.AnalysisLibrary;
  }
});
Object.defineProperty(exports, "Compression", {
  enumerable: true,
  get: function () {
    return _base.Compression;
  }
});
Object.defineProperty(exports, "Tree", {
  enumerable: true,
  get: function () {
    return _base.Tree;
  }
});
Object.defineProperty(exports, "AppLibrary", {
  enumerable: true,
  get: function () {
    return _AppLibrary.AppLibrary;
  }
});
Object.defineProperty(exports, "Database", {
  enumerable: true,
  get: function () {
    return _Database.Database;
  }
});
exports.Kerdx = void 0;

var _base = require("@thekade/base");

var _AppLibrary = require("./functions/AppLibrary.js");

var _Database = require("./functions/Database.js");

class Kerdx extends _base.Base {
  constructor() {
    super();
  }

}

exports.Kerdx = Kerdx;

},{"./functions/AppLibrary.js":1,"./functions/Database.js":2,"@thekade/base":18}],1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AppLibrary = AppLibrary;

var _base = require("@thekade/base");

let func = new _base.Func();

function AppLibrary() {
  let self = {};

  self.makeWebapp = (callback = () => {}) => {
    document.addEventListener('click', event => {
      let anchor = event.target;
      let parentAnchor = event.target.getParents('a');
      let url = anchor.getAttribute('href'); //check when a url is about to be open

      if (anchor.nodeName.toLowerCase() != 'a' && !func.isnull(parentAnchor)) {
        anchor = parentAnchor;
      }

      if (func.isnull(url) && !func.isnull(parentAnchor)) {
        anchor = parentAnchor;
      } //get the anchor element


      url = anchor.getAttribute('href');
      let target = anchor.getAttribute('target');

      if (target == '_blank') {
        //check if it is for new page
        window.open(func.prepareUrl(url));
      } else if (!func.isnull(url)) {
        event.preventDefault(); //block and open inside as webapp

        if (func.prepareUrl(url) != location.href) window.history.pushState('page', 'title', url);
        callback();
      }
    });
    window.onpopstate = callback;
  };

  self.prepareUrl = (url = '') => {
    if (!url.includes(location.origin)) {
      let splitUrl = func.urlSplitter(url);

      if (splitUrl.location == location.origin) {
        url = location.origin + '/' + url;
      }
    } else if (!url.includes(location.protocol)) {
      url = location.protocol + '//' + url;
    }

    return url;
  };

  self.ajax = (params = {
    async: true,
    data: {},
    url: '',
    method: '',
    secured: false
  }) => {
    params.async = params.async || true;
    params.data = params.data || {};
    params.url = params.url || './';
    params.method = params.method || 'POST';
    params.secured = params.secured || false;

    if (params.secured) {
      params.url = 'https://cors-anywhere.herokuapp.com/' + params.url;
    }

    let data = new FormData();

    if (params.data instanceof FormData) {
      data = params.data;
    } else {
      for (let i in params.data) {
        data.append(i, params.data[i]);
      }
    }

    return new Promise((resolve, reject) => {
      var request = new XMLHttpRequest();

      request.onreadystatechange = function (event) {
        if (this.readyState == 4 && this.status == 200) {
          resolve(request.responseText);
        }
      };

      if (func.isset(params.onprogress)) {
        request.upload.onprogress = event => {
          params.onprogress(event.loaded / event.total * 50);
        };

        request.onprogress = event => {
          params.onprogress(event.loaded / event.total * 100);
        };
      }

      request.onerror = error => {
        reject(error);
      };

      request.open(params.method, params.url, params.async);
      request.send(data);
    });
  };

  return self;
}

},{"@thekade/base":18}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Database = Database;

var _base = require("@thekade/base");

let objectLibrary = (0, _base.ObjectLibrary)();

function Database(name, version) {
  let self = {
    name,
    version,
    initialized: false
  };
  self.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
  self.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;
  self.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;

  self.init = function (callback) {
    //initialize db by setting the current version
    const request = self.indexedDB.open(self.name);

    request.onupgradeneeded = event => {
      if (callback != undefined) {
        callback(event.target.result);
      }
    };

    request.onsuccess = event => {
      self.version = Math.floor(request.result.version) || Math.floor(self.version);
      self.initialized = true;
    };

    request.onerror = event => {
      console.log(event.target.error);
    };
  };

  self.getVersion = function () {
    return new Promise((resolve, reject) => {
      const request = self.indexedDB.open(self.name);

      request.onsuccess = event => {
        if (self.version == undefined || self.version < request.result.version) {
          self.version = request.result.version;
        }

        resolve(self.version);
      };

      request.onerror = event => {
        reject(event.target.error);
      };
    });
  };

  self.open = async function (callback) {
    if (self.version == undefined) {
      await self.getVersion(); //set the version if not set
    }

    return new Promise((resolve, reject) => {
      const request = self.indexedDB.open(self.name, self.version); //open db

      request.onupgradeneeded = event => {
        self.version = request.result.version; //update version after upgrade

        if (callback != undefined) {
          //run the callback if set
          let workedDb = callback(event.target.result);

          workedDb.onerror = workedEvent => {
            reject(workedEvent.target.error);
          };
        }
      };

      request.onsuccess = event => {
        resolve(event.target.result);
      };

      request.onerror = event => {
        reject(event.target.error);
      };
    });
  };

  self.collectionExists = function (collection) {
    return self.open().then(db => {
      return db.objectStoreNames.contains(collection); //check if db has this collection in objectstore
    });
  };

  self.createCollection = async function (...collections) {
    let version = await self.getVersion(); //upgrade collection

    self.version = version + 1;
    return self.open(db => {
      for (let collection of collections) {
        if (!db.objectStoreNames.contains(collection)) {
          //create new collection and set _id as the keypath
          db.createObjectStore(collection, {
            keyPath: '_id'
          });
        }
      }

      return db;
    });
  };

  self.emptyCollection = function (collection) {
    let removedCount = 0,
        foundCount = 0; //set the counters

    return new Promise((resolve, reject) => {
      self.find({
        collection,
        query: {},
        many: true
      }).then(found => {
        //find all documents
        self.open().then(db => {
          if (db.objectStoreNames.contains(collection)) {
            //handle collection non-existence error
            let transaction = db.transaction(collection, 'readwrite');
            let store = transaction.objectStore(collection);

            transaction.onerror = event => {
              reject(event.target.error);
            };

            transaction.oncomplete = event => {
              resolve({
                action: 'emptycollection',
                removedCount,
                ok: removedCount == foundCount
              });
            };

            foundCount = found.length;

            for (let data of found) {
              let request = store.delete(data._id); //delete each document

              request.onerror = event => {
                console.log(`Error while deleting documents => ${event.target.error}`);
              };

              request.onsuccess = event => {
                removedCount++;
              };
            }
          } else {
            resolve({
              removedCount,
              ok: removedCount == foundCount
            });
          }
        }).catch(error => {
          reject(error);
        });
      }).catch(error => {
        reject(error);
      });
    });
  };

  self.find = function (params) {
    return new Promise((resolve, reject) => {
      self.open().then(db => {
        let documents = [];

        if (db.objectStoreNames.contains(params.collection)) {
          //collection exists
          let transaction = db.transaction(params.collection, 'readonly');

          transaction.onerror = event => {
            reject(event.target.error);
          };

          transaction.oncomplete = event => {
            if (params.many == true) {
              //many 
              resolve(documents);
            } else {
              resolve(documents[0]); //single
            }
          };

          let store = transaction.objectStore(params.collection);
          let request = store.openCursor();
          let cursor;

          request.onerror = event => {
            reject(event.target.error);
          };

          request.onsuccess = event => {
            cursor = event.target.result;

            if (cursor) {
              if (params.query == undefined) {
                //find any
                documents.push(cursor.value);
              } else if (objectLibrary.isSubObject(cursor.value, params.query)) {
                //find specific
                documents.push(cursor.value);
              }

              cursor.continue();
            }
          };
        } else {
          if (params.many == true) {
            //many 
            resolve(documents);
          } else {
            resolve(documents[0]); //single
          }
        }
      }).catch(error => {
        reject(error);
      });
    });
  };

  self.documentExists = function (params) {
    delete params.many; //check for only one

    return self.find(params).then(res => {
      //
      return res != undefined;
    });
  };

  self.generateId = function (request) {
    let id = Date.now().toString(36) + Math.random().toString(36).slice(2) + Math.random().toString(36).slice(2); //generate the id using time

    return id;
  };

  self.checkId = function (request, query, callback) {
    let id = query._id || self.generateId(); //get new _id if not set

    let get = request.get(id); //check if existing

    get.onsuccess = event => {
      if (event.target.result != undefined) {
        self.checkId(request, query, callback);
      } else {
        callback(id); //use the _id
      }
    };

    get.onerror = event => {
      console.log(`Error checking ID => ${event.target.error}`);
    };
  };

  self.add = function (params, db) {
    return new Promise((resolve, reject) => {
      let transaction = db.transaction(params.collection, 'readwrite');

      transaction.onerror = event => {
        reject(event.target.error);
      };

      transaction.oncomplete = event => {
        resolve({
          action: 'insert',
          documents: params.query
        });
      };

      let request = transaction.objectStore(params.collection);

      if (params.many == true && Array.isArray(params.query)) {
        // for many
        for (let query of params.query) {
          self.checkId(request, query, _id => {
            //validate _id
            query._id = _id;
            request.add(query); //add
          });
        }
      } else {
        self.checkId(request, params.query, _id => {
          //validate _id
          params.query._id = _id;
          request.add(params.query); //add
        });
      }
    });
  };

  self.insert = async function (params) {
    let isCollection = await self.collectionExists(params.collection);

    if (isCollection) {
      //collection is existing
      return self.open().then(db => {
        return self.add(params, db); //add to collection
      }).catch(error => {
        return error;
      });
    } else {
      return self.createCollection(params.collection) //create collection
      .then(db => {
        return self.add(params, db); //add to new Collection
      }).catch(error => {
        return error;
      });
    }
  };

  self.update = function (params) {
    return new Promise((resolve, reject) => {
      self.open().then(db => {
        if (!db.objectStoreNames.contains(params.collection)) {
          reject('Collection not found');
        }

        let transaction = db.transaction(params.collection, 'readwrite');

        transaction.onerror = event => {
          reject(event.target.error);
        };

        transaction.oncomplete = event => {
          resolve({
            action: 'update',
            documents
          });
        };

        let store = transaction.objectStore(params.collection);
        let request = store.openCursor();
        let documents = {};

        request.onerror = event => {
          reject(event.target.error);
        };

        request.onsuccess = event => {
          let cursor = event.target.result;
          let found = false;

          if (cursor) {
            if (objectLibrary.isSubObject(cursor.value, params.check)) {
              //retrieve the matched documents
              found = true;

              for (let i in params.query) {
                cursor.value[i] = params.query[i];
              }

              try {
                let res = cursor.update(cursor.value); //update

                res.onerror = rEvent => {
                  documents[rEvent.target.result] = {
                    value: cursor.value,
                    status: false
                  };
                };

                res.onsuccess = rEvent => {
                  documents[rEvent.target.result] = {
                    value: cursor.value,
                    status: true
                  };
                };
              } catch (error) {
                reject(error);
              }
            }

            if (params.many == true || found == false) {
              cursor.continue();
            }
          }
        };
      }).catch(error => {
        reject(error);
      });
    });
  };

  self.save = function (params = {
    collection: '',
    query: {},
    check: {}
  }) {
    //check existence of document
    return self.documentExists({
      collection: params.collection,
      query: params.check
    }).then(exists => {
      if (exists == false) {
        return self.insert(params); //insert if not found
      } else {
        return self.update(params); // update if found
      }
    });
  };

  self.delete = function (params) {
    let foundCount = 0,
        removedCount = 0; //set the counters

    return new Promise((resolve, reject) => {
      self.find(params).then(found => {
        self.open().then(db => {
          let transaction = db.transaction(params.collection, 'readwrite');
          let store = transaction.objectStore(params.collection);

          transaction.onerror = event => {
            reject(event.target.error);
          };

          transaction.oncomplete = event => {
            resolve({
              action: 'delete',
              removedCount,
              ok: removedCount == foundCount
            });
          };

          if (Array.isArray(found)) {
            //if many
            foundCount = found.length;

            for (let data of found) {
              let request = store.delete(data._id); //delete each

              request.onerror = event => {
                console.log(`Error while deleting documents => ${event.target.error}`);
              };

              request.onsuccess = event => {
                removedCount++;
              };
            }
          } else {
            foundCount = 1;
            let request = store.delete(found._id); //delete document

            request.onerror = event => {
              console.log(`Error while deleting documents => ${event.target.error}`);
            };

            request.onsuccess = event => {
              removedCount++;
            };
          }
        }).catch(error => {
          reject(error);
        });
      }).catch(error => {
        reject(error);
      });
    });
  };

  return self;
}

},{"@thekade/base":18}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Icons = void 0;
let Icons = {};
exports.Icons = Icons;
Icons['address-book'] = 'fas, fa-address-book';
Icons['amazon'] = 'fas, fa-amazon';
Icons['ambulance'] = 'fas, fa-ambulance';
Icons['android'] = 'fas, fa-android';
Icons['apple'] = 'fas, fa-apple';
Icons['asterisk'] = 'fas, fa-asterisk';
Icons['at'] = 'fas, fa-at';
Icons['backward'] = 'fas, fa-backward';
Icons['bank'] = 'fas, fa-bank';
Icons['battery'] = 'fas, fa-battery';
Icons['bed'] = 'fas, fa-bed';
Icons['bell'] = 'fas, fa-bell';
Icons['bicycle'] = 'fas, fa-bicycle';
Icons['birthday-cake'] = 'fas, fa-birthday-cake';
Icons['bitbucket'] = 'fas, fa-bitbucket';
Icons['bitcoin'] = 'fas, fa-bitcoin';
Icons['bluetooth'] = 'fas, fa-bluetooth';
Icons['bolt'] = 'fas, fa-bolt';
Icons['book'] = 'fas, fa-book';
Icons['bus'] = 'fas, fa-bus';
Icons['cab'] = 'fas, fa-cab';
Icons['calculator'] = 'fas, fa-calculator';
Icons['camera'] = 'fas, fa-camera';
Icons['car'] = 'fas, fa-car';
Icons['certificate'] = 'fas, fa-certificate';
Icons['child'] = 'fas, fa-child';
Icons['chrome'] = 'fas, fa-chrome';
Icons['cloud'] = 'fas, fa-cloud';
Icons['coffee'] = 'fas, fa-coffee';
Icons['comment'] = 'fas, fa-comment';
Icons['compass'] = 'fas, fa-compass';
Icons['copy'] = 'fas, fa-copy';
Icons['copyright'] = 'fas, fa-copyright';
Icons['clone'] = 'fas, fa-clone';
Icons['credit-card'] = 'fas, fa-credit-card';
Icons['cube'] = 'fas, fa-cube';
Icons['desktop'] = 'fas, fa-desktop';
Icons['diamond'] = 'fas, fa-diamond';
Icons['download'] = 'fas, fa-download';
Icons['drivers-license'] = 'fas, fa-drivers-license';
Icons['dropbox'] = 'fas, fa-dropbox';
Icons['drupal'] = 'fas, fa-drupal';
Icons['edge'] = 'fas, fa-edge';
Icons['edit'] = 'fas, fa-edit';
Icons['eject'] = 'fas, fa-eject';
Icons['ellipsis-h'] = 'fas, fa-ellipsis-h';
Icons['envelope'] = 'fas, fa-envelope';
Icons['eraser'] = 'fas, fa-eraser';
Icons['exchange'] = 'fas, fa-exchange';
Icons['exclamation'] = 'fas, fa-exclamation';
Icons['expand'] = 'fas, fa-expand';
Icons['eye'] = 'fas, fa-eye';
Icons['eye-slash'] = 'fas, fa-eye-slash';
Icons['fax'] = 'fas, fa-fax';
Icons['female'] = 'fas, fa-female';
Icons['file'] = 'fas, fa-file';
Icons['film'] = 'fas, fa-film';
Icons['fire'] = 'fas, fa-fire';
Icons['flag'] = 'fas, fa-flag';
Icons['flickr'] = 'fas, fa-flickr';
Icons['folder'] = 'fas, fa-folder';
Icons['forward'] = 'fas, fa-forward';
Icons['foursquare'] = 'fas, fa-foursquare';
Icons['gift'] = 'fas, fa-gift';
Icons['glass'] = 'fas, fa-glass';
Icons['globe'] = 'fas, fa-globe';
Icons['google'] = 'fas, fa-google';
Icons['graduation-cap'] = 'fas, fa-graduation-cap';
Icons['group'] = 'fas, fa-group';
Icons['hashtag'] = 'fas, fa-hashtag';
Icons['headphones'] = 'fas, fa-headphones';
Icons['heart'] = 'fas, fa-heart';
Icons['history'] = 'fas, fa-history';
Icons['home'] = 'fas, fa-home';
Icons['hotel'] = 'fas, fa-hotel';
Icons['hourglass'] = 'fas, fa-hourglass';
Icons['image'] = 'fas, fa-image';
Icons['imdb'] = 'fas, fa-imdb';
Icons['inbox'] = 'fas, fa-inbox';
Icons['industry'] = 'fas, fa-industry';
Icons['info'] = 'fas, fa-info';
Icons['instagram'] = 'fas, fa-instagram';
Icons['key'] = 'fas, fa-key';
Icons['language'] = 'fas, fa-language';
Icons['laptop'] = 'fas, fa-laptop';
Icons['leaf'] = 'fas, fa-leaf';
Icons['legal'] = 'fas, fa-legal';
Icons['life-bouy'] = 'fas, fa-life-bouy';
Icons['linkedin'] = 'fas, fa-linkedin';
Icons['linux'] = 'fas, fa-linux';
Icons['lock'] = 'fas, fa-lock';
Icons['magic'] = 'fas, fa-magic';
Icons['magnet'] = 'fas, fa-magnet';
Icons['male'] = 'fas, fa-male';
Icons['map'] = 'fas, fa-map';
Icons['microphone'] = 'fas, fa-microphone';
Icons['mobile'] = 'fas, fa-mobile';
Icons['money'] = 'fas, fa-money';
Icons['motorcycle'] = 'fas, fa-motorcycle';
Icons['music'] = 'fas, fa-music';
Icons['opera'] = 'fas, fa-opera';
Icons['paint-brush'] = 'fas, fa-paint-brush';
Icons['paper-plane'] = 'fas, fa-paper-plane';
Icons['pause'] = 'fas, fa-pause';
Icons['paw'] = 'fas, fa-paw';
Icons['paypal'] = 'fas, fa-paypal';
Icons['pen'] = 'fas, fa-pen';
Icons['pencil'] = 'fas, fa-pencil';
Icons['phone'] = 'fas, fa-phone';
Icons['photo'] = 'fas, fa-photo';
Icons['pinterest'] = 'fas, fa-pinterest';
Icons['plane'] = 'fas, fa-plane';
Icons['play'] = 'fas, fa-play';
Icons['plug'] = 'fas, fa-plug';
Icons['plus'] = 'fas, fa-plus';
Icons['podcast'] = 'fas, fa-podcast';
Icons['question'] = 'fas, fa-question';
Icons['quora'] = 'fas, fa-quora';
Icons['recycle'] = 'fas, fa-recycle';
Icons['reddit'] = 'fas, fa-reddit';
Icons['redo'] = 'fas, fa-redo';
Icons['refresh'] = 'fas, fa-refresh';
Icons['reply'] = 'fas, fa-reply';
Icons['resistance'] = 'fas, fa-resistance';
Icons['retweet'] = 'fas, fa-retweet';
Icons['road'] = 'fas, fa-road';
Icons['rocket'] = 'fas, fa-rocket';
Icons['rss'] = 'fas, fa-rss';
Icons['safari'] = 'fas, fa-safari';
Icons['scribe'] = 'fas, fa-scribe';
Icons['search'] = 'fas, fa-search';
Icons['send'] = 'fas, fa-send';
Icons['server'] = 'fas, fa-server';
Icons['ship'] = 'fas, fa-ship';
Icons['sign-in'] = 'fas, fa-sign-in';
Icons['sitemap'] = 'fas, fa-sitemap';
Icons['skyatlas'] = 'fas, fa-skyatlas';
Icons['skype'] = 'fas, fa-skype';
Icons['slideshare'] = 'fas, fa-slideshare';
Icons['snapchat'] = 'fas, fa-snapchat';
Icons['sort'] = 'fas, fa-sort';
Icons['soundcloud'] = 'fas, fa-soundcloud';
Icons['spoon'] = 'fas, fa-spoon';
Icons['spotify'] = 'fas, fa-spotify';
Icons['square'] = 'fas, fa-square';
Icons['stack-exchange'] = 'fas, fa-stack-exchange';
Icons['star'] = 'fas, fa-star';
Icons['steam'] = 'fas, fa-steam';
Icons['sticky-note'] = 'fas, fa-sticky-note';
Icons['stop'] = 'fas, fa-stop';
Icons['street-view'] = 'fas, fa-street-view';
Icons['subway'] = 'fas, fa-subway';
Icons['suitcase'] = 'fas, fa-suitcase';
Icons['support'] = 'fas, fa-support';
Icons['tasks'] = 'fas, fa-tasks';
Icons['taxi'] = 'fas, fa-taxi';
Icons['telegram'] = 'fas, fa-telegram';
Icons['television'] = 'fas, fa-television';
Icons['terminal'] = 'fas, fa-terminal';
Icons['thermometer'] = 'fas, fa-thermometer';
Icons['ticket'] = 'fas, fa-ticket';
Icons['times'] = 'fas, fa-times';
Icons['train'] = 'fas, fa-train';
Icons['trash'] = 'fas, fa-trash';
Icons['tree'] = 'fas, fa-tree';
Icons['trophy'] = 'fas, fa-trophy';
Icons['truck'] = 'fas, fa-truck';
Icons['tumblr'] = 'fas, fa-tumblr';
Icons['tv'] = 'fas, fa-tv';
Icons['twitter'] = 'fas, fa-twitter';
Icons['umbrella'] = 'fas, fa-umbrella';
Icons['university'] = 'fas, fa-university';
Icons['unlock'] = 'fas, fa-unlock';
Icons['upload'] = 'fas, fa-upload';
Icons['usb'] = 'fas, fa-usb';
Icons['user'] = 'fas, fa-user';
Icons['video-camera'] = 'fas, fa-video-camera';
Icons['vimeo'] = 'fas, fa-vimeo';
Icons['warning'] = 'fas, fa-warning';
Icons['wechat'] = 'fas, fa-wechat';
Icons['weibo'] = 'fas, fa-weibo';
Icons['whatsapp'] = 'fas, fa-whatsapp';
Icons['wheelchair'] = 'fas, fa-wheelchair';
Icons['wifi'] = 'fas, fa-wifi';
Icons['wikipedia-w'] = 'fas, fa-wikipedia-w';
Icons['wordpress'] = 'fas, fa-wordpress';
Icons['yelp'] = 'fas, fa-yelp';
Icons['yoast'] = 'fas, fa-yoast';
Icons['youtube'] = 'fas, fa-youtube';
Icons['undo'] = 'fas, fa-undo';

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorPicker = ColorPicker;

var _Template = require("./Template.js");

var _Func = require("./Func.js");

function ColorPicker() {
  let self = {};
  self.func = new _Func.Func();
  self.elementModifier = new _Template.Template();
  self.elementModifier.elementLibrary();
  self.colorIndicatorPosition = {
    x: 0,
    y: 0
  };
  self.opacityIndicatorPosition = {
    x: 0,
    y: 0
  };
  self.convertTo = 'RGB';

  self.init = params => {
    self.picker = self.elementModifier.createElement({
      element: 'div',
      attributes: {
        class: 'color-picker'
      },
      children: [{
        element: 'span',
        attributes: {
          id: 'color-picker-setters'
        },
        children: [{
          element: 'span',
          attributes: {
            id: 'color-picker-colors-window'
          },
          children: [{
            element: 'canvas',
            attributes: {
              id: 'color-picker-colors'
            }
          }, {
            element: 'span',
            attributes: {
              id: 'color-picker-color-indicator'
            }
          }]
        }, {
          element: 'span',
          attributes: {
            id: 'color-picker-opacities-window'
          },
          children: [{
            element: 'canvas',
            attributes: {
              id: 'color-picker-opacities'
            }
          }, {
            element: 'span',
            attributes: {
              id: 'color-picker-opacity-indicator'
            }
          }]
        }]
      }, {
        element: 'div',
        attributes: {
          id: 'color-picker-result'
        },
        children: [{
          element: 'span',
          attributes: {
            id: 'picked-color'
          }
        }, {
          element: 'span',
          attributes: {
            id: 'picked-color-window'
          },
          children: [{
            element: 'select',
            attributes: {
              id: 'picked-color-setter'
            },
            options: ['RGB', 'HEX', 'HSL']
          }, {
            element: 'span',
            attributes: {
              id: 'picked-color-value'
            }
          }]
        }]
      }]
    });
    self.colorWindow = self.picker.find('#color-picker-colors-window');
    self.opacityWindow = self.picker.find('#color-picker-opacities-window');
    self.colorCanvas = self.picker.find('#color-picker-colors');
    self.opacityCanvas = self.picker.find('#color-picker-opacities');
    self.colorMarker = self.picker.find('#color-picker-color-indicator');
    self.opacityMarker = self.picker.find('#color-picker-opacity-indicator');
    self.width = params.width;
    self.height = params.height;
    self.pickedColor = params.color || 'rgb(0, 0, 0)';
    self.colorWindow.css({
      height: self.height + 'px'
    });
    self.colorCanvas.width = self.width;
    self.colorCanvas.height = self.height;
    self.opacityWindow.css({
      height: self.height + 'px'
    });
    self.opacityCanvas.height = self.height;
    self.opacityCanvas.width = 20; //the context

    self.colorContext = self.colorCanvas.getContext('2d');
    self.opacityContext = self.opacityCanvas.getContext('2d');
    self.picker.find('#picked-color-value').innerText = self.pickedColor;
    self.picker.find('#picked-color-setter').onChanged(value => {
      self.convertTo = value;
      self.reply();
    });
    self.listen();
    return self.picker;
  };

  self.calibrateColor = () => {
    let colorGradient = self.colorContext.createLinearGradient(0, 0, self.width, 0); //color stops

    colorGradient.addColorStop(0, "rgb(255, 0, 0)");
    colorGradient.addColorStop(0.15, "rgb(255, 0, 255)");
    colorGradient.addColorStop(0.33, "rgb(0, 0, 255)");
    colorGradient.addColorStop(0.49, "rgb(0, 255, 255)");
    colorGradient.addColorStop(0.67, "rgb(0, 255, 0)");
    colorGradient.addColorStop(0.87, "rgb(255, 255, 0)");
    colorGradient.addColorStop(1, "rgb(255, 0, 0)");
    self.colorContext.fillStyle = colorGradient;
    self.colorContext.fillRect(0, 0, self.width, self.height); //add black and white stops

    colorGradient = self.colorContext.createLinearGradient(0, 0, 0, self.height);
    colorGradient.addColorStop(0, "rgba(255, 255, 255, 1)");
    colorGradient.addColorStop(0.5, "rgba(255, 255, 255, 0)");
    colorGradient.addColorStop(0.5, "rgba(0, 0, 0, 0)");
    colorGradient.addColorStop(1, "rgba(0, 0, 0, 1)");
    self.colorContext.fillStyle = colorGradient;
    self.colorContext.fillRect(0, 0, self.width, self.height);
  };

  self.calibrateOpacity = () => {
    let rgba;
    self.opacityContext.clearRect(0, 0, self.opacityCanvas.width, self.height);
    let opacityGradient = self.opacityContext.createLinearGradient(0, 0, 0, self.opacityCanvas.height);

    for (let i = 100; i >= 0; i--) {
      rgba = self.addOpacity(self.pickedColor, i / 100);
      opacityGradient.addColorStop(i / 100, rgba);
    }

    self.opacityContext.fillStyle = opacityGradient;
    self.opacityContext.clearRect(0, 0, self.opacityCanvas.width, self.opacityCanvas.height);
    self.opacityContext.fillRect(0, 0, self.opacityCanvas.width, self.opacityCanvas.height);
  };

  self.listen = () => {
    let isColorMouseDown = false;
    let isOpacityMouseDown = false;
    self.picker.notBubbledEvent('click', event => {
      if (self.added && !isColorMouseDown && !isOpacityMouseDown) {
        self.dispose();
      }
    });

    const colorMouseDown = event => {
      let currentX = event.clientX - self.colorCanvas.getBoundingClientRect().left;
      let currentY = event.clientY - self.colorCanvas.getBoundingClientRect().top; //is mouse in color picker

      isColorMouseDown = currentX > 0 && currentX < self.colorCanvas.getBoundingClientRect().width && currentY > 0 && currentY < self.colorCanvas.getBoundingClientRect().height;
    };

    const colorMouseMove = event => {
      if (isColorMouseDown) {
        self.colorIndicatorPosition.x = event.clientX - self.colorCanvas.getBoundingClientRect().left;
        self.colorIndicatorPosition.y = event.clientY - self.colorCanvas.getBoundingClientRect().top;
        self.colorMarker.css({
          top: self.colorIndicatorPosition.y + 'px',
          left: self.colorIndicatorPosition.x + 'px'
        });
        let picked = self.getPickedColor();
        self.pickedColor = `rgb(${picked.r}, ${picked.g}, ${picked.b})`;
        self.reply();
      }
    };

    const colorMouseUp = event => {
      isColorMouseDown = false;
      self.calibrateOpacity();
    }; //Register


    self.colorCanvas.addEventListener("mousedown", colorMouseDown);
    self.colorCanvas.addEventListener("mousemove", colorMouseMove);
    self.colorCanvas.addEventListener("mouseup", colorMouseUp);

    const opacityMouseDown = event => {
      let currentX = event.clientX - self.opacityCanvas.getBoundingClientRect().left;
      let currentY = event.clientY - self.opacityCanvas.getBoundingClientRect().top; //is mouse in color picker

      isOpacityMouseDown = currentX > 0 && currentX < self.opacityCanvas.getBoundingClientRect().width && currentY > 0 && currentY < self.opacityCanvas.getBoundingClientRect().height;
    };

    const opacityMouseMove = event => {
      if (isOpacityMouseDown) {
        self.opacityIndicatorPosition.x = event.clientX - self.opacityCanvas.getBoundingClientRect().left;
        self.opacityIndicatorPosition.y = event.clientY - self.opacityCanvas.getBoundingClientRect().top;
        self.opacityMarker.css({
          top: self.opacityIndicatorPosition.y + 'px'
        });
        let picked = self.getPickedOpacity();
        self.pickedColor = `rgb(${picked.r}, ${picked.g}, ${picked.b}, ${picked.a})`;
        self.reply();
      }
    };

    const opacityMouseUp = event => {
      isOpacityMouseDown = false;
    };

    self.opacityCanvas.addEventListener("mousedown", opacityMouseDown);
    self.opacityCanvas.addEventListener("mousemove", opacityMouseMove);
    self.opacityCanvas.addEventListener("mouseup", opacityMouseUp);
  };

  self.reply = () => {
    self.converColor();
    self.picker.dispatchEvent(new CustomEvent('colorChanged'));
    self.picker.find('#picked-color').css({
      backgroundColor: self.convertedColor
    });
    self.picker.find('#picked-color-value').innerText = self.convertedColor;
  };

  self.converColor = () => {
    if (self.convertTo == 'HEX') {
      self.convertedColor = self.rgbToHex(self.pickedColor);
    } else if (self.convertTo == 'HSL') {
      self.convertedColor = self.rgbToHSL(self.pickedColor);
    } else if (self.convertTo == 'RGB') {
      self.convertedColor = self.pickedColor;
    }
  };

  self.onChanged = callBack => {
    self.picker.addEventListener('colorChanged', event => {
      callBack(self.convertedColor);
    });
  };

  self.getPickedColor = () => {
    let imageData = self.colorContext.getImageData(self.colorIndicatorPosition.x, self.colorIndicatorPosition.y, 1, 1);
    return {
      r: imageData.data[0],
      g: imageData.data[1],
      b: imageData.data[2]
    };
  };

  self.getPickedOpacity = () => {
    let imageData = self.opacityContext.getImageData(self.opacityIndicatorPosition.x, self.opacityIndicatorPosition.y, 1, 1);
    let alpha = Math.ceil(imageData.data[3] / 255 * 100) / 100;
    return {
      r: imageData.data[0],
      g: imageData.data[1],
      b: imageData.data[2],
      a: alpha
    };
  };

  self.draw = params => {
    self.init(params);
    self.calibrateColor();
    self.calibrateOpacity();
    let interval = setTimeout(() => {
      self.added = true;
      clearTimeout(interval);
    }, 2000);
    return self.picker;
  };

  self.dispose = () => {
    clearInterval(self.interval);
    self.picker.remove();
  };

  self.colorType = (color = '#ffffff') => {
    let type = 'string';

    if (color.indexOf('#') == 0 && (color.length - 1) % 3 == 0) {
      type = 'hex';
    } else if (color.indexOf('rgba') == 0) {
      let values = self.func.inBetween(color, 'rgba(', ')');

      if (values != -1 && values.split(',').length == 4) {
        type = 'rgba';
      }
    } else if (color.indexOf('rgb') == 0) {
      let values = self.func.inBetween(color, 'rgb(', ')');

      if (values != -1 && values.split(',').length == 3) {
        type = 'rgb';
      }
    } else if (color.indexOf('hsla') == 0) {
      let values = self.func.inBetween(color, 'hsla(', ')');

      if (values != -1 && values.split(',').length == 4) {
        type = 'hsla';
      }
    } else if (color.indexOf('hsl') == 0) {
      let values = self.func.inBetween(color, 'hsl(', ')');

      if (values != -1 && values.split(',').length == 3) {
        type = 'hsl';
      }
    }

    return type;
  };

  self.hexToRGB = (hex = '#ffffff', alpha = true) => {
    let r = 0,
        g = 0,
        b = 0,
        a = 255;

    if (hex.length == 4) {
      r = "0x" + hex[1] + hex[1];
      g = "0x" + hex[2] + hex[2];
      b = "0x" + hex[3] + hex[3];
    } else if (hex.length == 5) {
      r = "0x" + hex[1] + hex[1];
      g = "0x" + hex[2] + hex[2];
      b = "0x" + hex[3] + hex[3];
      a = "0x" + hex[4] + hex[4];
    } else if (hex.length == 7) {
      r = "0x" + hex[1] + hex[2];
      g = "0x" + hex[3] + hex[4];
      b = "0x" + hex[5] + hex[6];
    } else if (hex.length == 9) {
      r = "0x" + hex[1] + hex[2];
      g = "0x" + hex[3] + hex[4];
      b = "0x" + hex[5] + hex[6];
      a = "0x" + hex[7] + hex[8];
    }

    a = +(a / 255).toFixed(3);

    if (alpha == false) {
      return `rgb(${+r}, ${+g}, ${+b})`;
    } else {
      return `rgb(${+r}, ${+g}, ${+b}, ${a})`;
    }
  };

  self.hexToHSL = (hex = '#ffffff', alpha = true) => {
    let color = self.hexToRGB(hex, alpha);
    color = self.rgbToHSL(color, alpha);
    return color;
  };

  self.rgbToHex = (rgb = 'rgb(0, 0, 0)', alpha = true) => {
    let start = rgb.indexOf('(') + 1;
    let end = rgb.indexOf(')');
    let [r, g, b, a] = rgb.slice(start, end).split(',');

    if (!self.func.isset(a)) {
      a = 1;
    }

    r = (+r).toString(16);
    g = (+g).toString(16);
    b = (+b).toString(16);
    a = Math.round(a * 255).toString(16);

    if (r.length == 1) {
      r = `0${r}`;
    }

    if (g.length == 1) {
      g = `0${g}`;
    }

    if (b.length == 1) {
      b = `0${b}`;
    }

    if (a.length == 1) {
      a = `0${a}`;
    }

    let hex = '#';

    if (alpha != false) {
      hex += `${r}${g}${b}${a}`;
    } else {
      hex += `${r}${g}${b}`;
    }

    return hex;
  };

  self.rgbToHSL = (rgb = 'rgb(0, 0, 0)', alpha = true) => {
    let start = rgb.indexOf('(') + 1;
    let end = rgb.indexOf(')');
    let [r, g, b, a] = rgb.slice(start, end).split(',');
    console.log(r, g, b);

    if (!self.func.isset(a)) {
      a = 1;
    }

    r /= 225;
    g /= 225;
    b /= 225;
    let cmin = Math.min(r, g, b),
        cmax = Math.max(r, g, b),
        delta = cmax - cmin,
        h = 0,
        s = 0,
        l = 0; // Calculate hue
    // No difference

    if (delta == 0) {
      h = 0;
    } else if (cmax == r) {
      h = (g - b) / delta % 6;
    } else if (cmax == g) {
      h = (b - r) / delta + 2;
    } else if (cmax == g) {
      h = (r - g) / delta + 4;
    }

    h = Math.round(h * 60); // Make negative hues positive behind 360°

    if (h < 0) {
      h += 360;
    }

    l = (cmax + cmin) / 2;
    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
    l = +(l * 100).toFixed(1);
    s = +(s * 100).toFixed(1);
    let hsl = `hsl`;

    if (alpha == false) {
      hsl += `(${h}, ${s}%, ${l}%)`;
    } else {
      hsl += `(${h}, ${s}%, ${l}%, ${a})`;
    }

    return hsl;
  };

  self.hslToRGB = (hsl = 'hsl(0, 0%, 0%)', alpha = true) => {
    let rgb = 'rgb';
    let start = hsl.indexOf('(') + 1;
    let end = hsl.indexOf(')');
    let [h, s, l, a] = hsl.slice(start, end).split(',');

    if (!self.func.isset(a)) {
      a = 1;
    }

    console.log(h, s, l);
    if (h.indexOf("deg") > -1) h = h.substr(0, h.length - 3);else if (h.indexOf("rad") > -1) h = Math.round(h.substr(0, h.length - 3) * (180 / Math.PI));else if (h.indexOf("turn") > -1) h = Math.round(h.substr(0, h.length - 4) * 360); // Keep hue fraction of 360 if ending up over

    if (h >= 360) h %= 360;
    s = s.replace('%', '') / 100;
    l = l.replace('%', '') / 100;
    let c = (1 - Math.abs(2 * l - 1)) * s,
        x = c * (1 - Math.abs(h / 60 % 2 - 1)),
        m = l - c / 2,
        r = 0,
        g = 0,
        b = 0;

    if (0 <= h && h < 60) {
      r = c;
      g = x;
      b = 0;
    } else if (60 <= h && h < 120) {
      r = x;
      g = c;
      b = 0;
    } else if (120 <= h && h < 180) {
      r = 0;
      g = c;
      b = x;
    } else if (180 <= h && h < 240) {
      r = 0;
      g = x;
      b = c;
    } else if (240 <= h && h < 300) {
      r = x;
      g = 0;
      b = c;
    } else if (300 <= h && h < 360) {
      r = c;
      g = 0;
      b = x;
    }

    r = Math.round((r + m) * 255);
    g = Math.round((g + m) * 255);
    b = Math.round((b + m) * 255);

    if (alpha == false) {
      rgb += `(${r}, ${g}, ${b})`;
    } else {
      rgb += `(${r}, ${g}, ${b}, ${a})`;
    }

    return rgb;
  };

  self.hslToHex = (hsl = '', alpha = true) => {
    let color = self.hslToRGB(hsl, alpha);
    return self.rgbToHex(color, alpha);
  };

  self.addOpacity = (color = 'rgb(0, 0, 0)', opacity = 0.5) => {
    let start = color.indexOf('(') + 1;
    let end = color.indexOf(')');
    let points = color.slice(start, end).split(',');
    points[3] = opacity;
    let changedColor = `rgba(${points.join(',')})`;
    return changedColor;
  };

  self.getOpacity = (color = 'rgb(0, 0, 0)') => {
    color = self.func.inBetween(color, '(', ')');
    let [r, g, b, a] = color.split(',');
    return a.trim();
  };

  self.invertColor = (color = '#ffffff') => {
    let type = self.colorType(color);
    let invert;

    if (type == 'hex') {
      color = color.replace('#', '');
      invert = '#' + self.invertHex(color);
    } else if (type == 'rgb') {
      color = self.rgbToHex(color).replace('#', '');
      invert = self.invertHex(color);
      invert = self.hexToRGB(invert);
    } else if (type == 'rgba') {
      let opacity = self.getOpacity(color);
      color = self.rgbToHex(color).replace('#', '');
      invert = self.invertHex(color);
      invert = self.hexToRGB(invert);
      invert = self.addOpacity(invert, opacity);
    }

    return invert;
  };

  self.invertHex = (hex = 'ffffff') => {
    return (Number(`0x1${hex}`) ^ 0xFFFFFF).toString(16).substr(1).toUpperCase();
  };

  return self;
}

},{"./Func.js":6,"./Template.js":11}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Components = void 0;

var _Template = require("./Template.js");

class Components extends _Template.Template {
  constructor() {
    super();
  }

  createTab(params = {
    titles: []
  }) {
    var tabTitle = this.createElement({
      element: 'ul',
      attributes: {
        class: 'tab'
      }
    });
    params.view.append(tabTitle);

    for (var i of params.titles) {
      tabTitle.append(this.createElement({
        element: 'li',
        attributes: {
          class: 'tab-title'
        },
        text: i
      }));
    }

    tabTitle.findAll('li').forEach(node => {
      node.addEventListener('click', event => {
        var url = this.urlSplitter(location.href);
        url.vars.tab = node.textContent.toLowerCase();
        router.render({
          url: '?' + this.urlSplitter(this.urlMerger(url, 'tab')).queries
        });
      });
    });
  }

  cell(params = {
    element: 'input',
    attributes: {},
    name: '',
    dataAttributes: {},
    value: '',
    text: '',
    html: '',
    edit: ''
  }) {
    //set the cell-data id
    var id = this.stringReplace(params.name, ' ', '-') + '-cell'; //create the cell label

    var label = this.createElement({
      element: 'label',
      attributes: {
        class: 'cell-label'
      },
      text: params.name
    }); //cell attributes

    params.attributes = this.isset(params.attributes) ? params.attributes : {}; //cell data attributes

    params.dataAttributes = this.isset(params.dataAttributes) ? params.dataAttributes : {};
    params.dataAttributes.id = id;
    var components; //set the properties of cell data

    if (params.element == 'select') {
      //check if cell data is in select element
      components = {
        element: params.element,
        attributes: params.dataAttributes,
        children: [{
          element: 'option',
          attributes: {
            disabled: '',
            selected: ''
          },
          text: `Select ${params.name}`,
          value: ''
        } //set the default option
        ]
      };
    } else {
      components = {
        element: params.element,
        attributes: params.dataAttributes,
        text: params.value
      };
    }

    if (this.isset(params.value)) components.attributes.value = params.value;
    if (this.isset(params.options)) components.options = params.options;
    let data;

    if (params.element instanceof Element) {
      data = params.element;
    } else {
      data = this.createElement(components); //create the cell-data
    }

    data.classList.add('cell-data');
    if (this.isset(params.value)) data.value = params.value; //create cell element

    let cell = this.createElement({
      element: 'div',
      attributes: params.attributes,
      children: [label, data]
    });
    cell.classList.add('cell');
    if (this.isset(params.text)) data.textContent = params.text;
    if (this.isset(params.html)) data.innerHTML = params.html;

    if (this.isset(params.list)) {
      cell.makeElement({
        element: 'datalist',
        attributes: {
          id: `${id}-list`
        },
        options: params.list.sort()
      });
      data.setAttribute('list', `${id}-list`);
    }

    let edit;

    if (this.isset(params.edit)) {
      edit = cell.makeElement({
        element: 'i',
        attributes: {
          class: `${params.edit}`,
          'data-icon': 'fas, fa-pen',
          style: {
            cursor: 'pointer',
            backgroundColor: 'var(--primary-color)',
            width: '1em',
            height: 'auto',
            position: 'absolute',
            top: '0px',
            right: '0px',
            padding: '.15em'
          }
        }
      });
      cell.css({
        position: 'relative'
      });
    }

    return cell;
  }

  message(params = {
    link: '',
    text: '',
    temp: 0
  }) {
    var me = this.createElement({
      element: 'span',
      attributes: {
        class: 'alert'
      },
      children: [this.createElement({
        element: 'a',
        text: params.text,
        attributes: {
          class: 'text',
          href: params.link
        }
      }), this.createElement({
        element: 'span',
        attributes: {
          class: 'close'
        }
      })]
    });

    if (this.isset(params.temp)) {
      var time = setTimeout(() => {
        me.remove();
        clearTimeout(time);
      }, params.temp != '' ? params.time * 1000 : 5000);
    }

    me.find('.close').addEventListener('click', event => {
      me.remove();
    });
    body.find('#notification-block').append(me);
  }

  createTable(params = {
    title: '',
    contents: {},
    projection: {},
    rename: {},
    sort: false,
    search: false,
    filter: []
  }) {
    //create the table element   
    let headers = [],
        //the headers
    columns = {},
        columnCount = 0,
        i,
        table = this.createElement({
      element: 'div',
      attributes: params.attributes
    }); //create the table 

    table.classList.add('kerdx-table'); //add table to the class

    for (let content of params.contents) {
      //loop through the json array
      i = params.contents.indexOf(content); //get the position of the row

      for (let name in content) {
        //loop through the row
        if (headers.indexOf(name) == -1) {
          //add to headers
          headers.push(name);
          columns[name] = table.makeElement({
            element: 'column',
            attributes: {
              class: 'kerdx-table-column',
              'data-name': name
            },
            children: [{
              element: 'span',
              attributes: {
                class: 'kerdx-table-column-title',
                'data-name': name
              },
              children: [{
                element: 'p',
                attributes: {
                  class: 'kerdx-table-column-title-text'
                },
                text: name
              }]
            }, {
              element: 'div',
              attributes: {
                class: 'kerdx-table-column-contents'
              }
            }]
          });

          if (this.isset(params.sort)) {
            //make sortable if needed
            columns[name].find('.kerdx-table-column-title').makeElement({
              element: 'i',
              attributes: {
                class: 'kerdx-table-column-title-sort',
                'data-icon': 'fas, fa-arrow-down'
              }
            });
          }
        }
      }
    }

    params.projection = params.projection || {};
    let hide = Object.values(params.projection).includes(1);

    for (let name of headers) {
      //loop through the headers and add the contents 
      for (let content of params.contents) {
        i = params.contents.indexOf(content);
        columns[name].find('.kerdx-table-column-contents').makeElement({
          element: 'span',
          attributes: {
            class: 'kerdx-table-column-cell',
            'data-name': name,
            'data-value': content[name] || '',
            'data-row': i
          },
          html: content[name] || ''
        });
      }

      if (params.projection[name] == -1 || hide && !this.isset(params.projection[name])) {
        columns[name].css({
          display: 'none'
        });
        continue;
      }

      columnCount++; //count the column length
    }

    table.css({
      gridTemplateColumns: `repeat(${columnCount}, 1fr)`
    });
    let tableContainer = this.createElement({
      //create table container and title
      element: 'div',
      attributes: {
        class: 'kerdx-table-container'
      },
      children: [{
        element: 'span',
        attributes: {
          class: 'kerdx-table-titleandsearch'
        }
      }, table]
    });
    let titleCount = 0;

    if (this.isset(params.title)) {
      // create the title text if needed
      tableContainer.find('.kerdx-table-titleandsearch').makeElement({
        element: 'h5',
        attributes: {
          class: 'kerdx-table-title'
        },
        text: params.title
      });
      titleCount++;
    }

    if (this.isset(params.sort)) {
      // set the data for sorting
      table.dataset.sort = true;
    }

    if (this.isset(params.search)) {
      // create the search area
      tableContainer.find('.kerdx-table-titleandsearch').makeElement({
        element: 'input',
        attributes: {
          class: 'kerdx-table-search',
          placeHolder: 'Search table...'
        }
      });
      titleCount++;
    }

    if (this.isset(params.filter)) {
      //create the filter area
      tableContainer.find('.kerdx-table-titleandsearch').makeElement({
        element: 'select',
        attributes: {
          class: 'kerdx-table-filter'
        },
        options: params.filter
      });
      titleCount++;
    }

    if (params.contents.length == 0) {
      // Notify if table is empty
      table.textContent = 'Empty Table';
    }

    tableContainer.makeElement({
      // arrange the table title
      element: 'style',
      text: `
            @media(min-width: 700px) {
                .kerdx-table-titleandsearch {
                  grid-template-columns: repeat(${titleCount}, 1fr);
                }
              }
        `
    });
    return tableContainer;
  }

  getTableData(table) {
    let data = [];
    let cells = table.findAll('.kerdx-table-column-cell');

    for (let i = 0; i < cells.length; i++) {
      let {
        name,
        value,
        row
      } = cells[i].dataset;
      data[row] = data[row] || {};
      data[row][name] = value;
    }

    return data;
  }

  sortTable(table, by = '', direction = 1) {
    let data = this.getTableData(table);
    data.sort((a, b) => {
      a = a[by];
      b = b[by];

      if (this.isNumber(a) && this.isNumber(b)) {
        a = a / 1;
        b = b / 1;
      }

      if (direction > -1) {
        return a > b ? 1 : -1;
      } else {
        return a > b ? -1 : 1;
      }
    });
    return data;
  }

  listenTable(params = {
    table: {},
    options: []
  }, callbacks = {
    click: () => {},
    filter: () => {}
  }) {
    params.options = params.options || [];
    callbacks = callbacks || [];
    let table = params.table.find('.kerdx-table');
    let options = this.createElement({
      element: 'span',
      attributes: {
        class: 'kerdx-table-options'
      }
    });
    let list = {
      view: 'fas fa-eye',
      delete: 'fas fa-trash',
      edit: 'fas fa-pen',
      revert: 'fas fa-history'
    };
    let optionClass;

    for (let option of params.options) {
      optionClass = list[option] || `fas fa-${option}`;
      let anOption = options.makeElement({
        element: 'i',
        attributes: {
          class: optionClass + ' kerdx-table-option',
          id: 'kerdx-table-option-' + option
        }
      });
    }

    let tableTitles = table.findAll('.kerdx-table-column-title');
    let tableColumns = table.findAll('.kerdx-table-column');
    let rows = [];
    let firstColumn = tableColumns[0];
    let firstVisibleColumn;

    if (this.isnull(firstColumn)) {
      return;
    }

    for (let i = 0; i < tableColumns.length; i++) {
      if (tableColumns[i].css().display != 'none') {
        firstVisibleColumn = tableColumns[i];
        break;
      }
    }

    let firstCells = firstColumn.findAll('.kerdx-table-column-cell');
    let firstVisibleCells = firstVisibleColumn.findAll('.kerdx-table-column-cell');
    let tableRow;

    for (let i = 0; i < firstCells.length; i++) {
      rows.push(firstCells[i].dataset.row);
    }

    if (params.table.find('.kerdx-table').dataset.sort == 'true') {
      for (let i = 0; i < tableTitles.length; i++) {
        tableTitles[i].addEventListener('mouseenter', event => {
          tableTitles[i].find('.kerdx-table-column-title-sort').css({
            display: 'unset'
          });
        });
        tableTitles[i].addEventListener('mouseleave', event => {
          tableTitles[i].find('.kerdx-table-column-title-sort').css({
            display: 'none'
          });
        });
        tableTitles[i].find('.kerdx-table-column-title-sort').addEventListener('click', event => {
          let direction;
          tableTitles[i].find('.kerdx-table-column-title-sort').toggleClasses('fas, fa-arrow-up');
          tableTitles[i].find('.kerdx-table-column-title-sort').toggleClasses('fas, fa-arrow-down');

          if (tableTitles[i].find('.kerdx-table-column-title-sort').dataset.direction == 'up') {
            tableTitles[i].find('.kerdx-table-column-title-sort').dataset.direction = 'down';
            direction = 1;
          } else {
            tableTitles[i].find('.kerdx-table-column-title-sort').dataset.direction = 'up';
            direction = -1;
          }

          let text = tableTitles[i].find('.kerdx-table-column-title-text').textContent;
          let data = this.sortTable(params.table.find('.kerdx-table'), text, direction);
          let newTable = this.createTable({
            contents: data
          });
          let newTableColumns = newTable.findAll('.kerdx-table-column');

          for (let j = 0; j < newTableColumns.length; j++) {
            tableColumns[j].find('.kerdx-table-column-contents').innerHTML = newTableColumns[j].find('.kerdx-table-column-contents').innerHTML;
          }

          tableColumns = table.findAll('.kerdx-table-column');
          filter();
        });
      }
    }

    if (!this.isnull(params.table.find('.kerdx-table-search'))) {
      params.table.find('.kerdx-table-search').onChanged(value => {
        filter();
      });
    }

    if (!this.isnull(params.table.find('.kerdx-table-filter'))) {
      params.table.find('.kerdx-table-filter').onChanged(value => {
        filter();
      });
    }

    let searchValue, filterValue;

    let filter = () => {
      if (!this.isnull(params.table.find('.kerdx-table-search'))) {
        searchValue = params.table.find('.kerdx-table-search').value;
      }

      if (!this.isnull(params.table.find('.kerdx-table-filter'))) {
        filterValue = params.table.find('.kerdx-table-filter').value;
      }

      for (let i = 0; i < rows.length; i++) {
        let hide = false;
        tableRow = table.findAll(`.kerdx-table-column-cell[data-row="${i}"]`);

        for (let j = 0; j < tableRow.length; j++) {
          tableRow[j].cssRemove(['display']);
        }

        if (this.isset(filterValue) && hide == false && this.isset(callbacks.filter)) {
          hide = callbacks.filter(filterValue, tableRow);
        }

        if (this.isset(searchValue) && hide == false) {
          hide = true;

          for (let j = 0; j < tableRow.length; j++) {
            if (tableRow[j].textContent.toLowerCase().includes(searchValue.toLowerCase())) {
              hide = false;
              break;
            }
          }
        }

        if (hide) {
          for (let j = 0; j < tableRow.length; j++) {
            tableRow[j].css({
              display: 'none'
            });
          }
        }
      }
    };

    if (this.isset(callbacks.click)) {
      table.addMultipleEventListener('mousedown, touchstart', event => {
        let target = event.target;

        if (target.classList.contains('kerdx-table-option')) {
          if (this.isset(callbacks.click)) {
            callbacks.click(event);
          }
        } else if (target.classList.contains('kerdx-table-column-cell') || !this.isnull(target.getParents('.kerdx-table-column-cell'))) {
          if (!target.classList.contains('kerdx-table-column-cell')) {
            target = target.getParents('.kerdx-table-column-cell');
          }

          let position = target.dataset.row;
          options.remove();
          firstVisibleCells[position].css({
            position: 'relative'
          });
          firstVisibleCells[position].append(options);

          if (params.table.classList.contains('kerdx-selectable')) {
            let row = table.findAll(`.kerdx-table-column-cell[data-row="${position}"]`);

            for (let i = 0; i < row.length; i++) {
              row[i].classList.toggle('kerdx-table-selected-row');
            }

            options.remove();

            if (!target.classList.contains('kerdx-table-selected-row')) {
              if (firstColumn.findAll('.kerdx-table-selected-row').length == 0) {
                params.table.classList.remove('kerdx-selectable');
              }
            }
          }
        }
      });
      table.pressed(event => {
        let target = event.target;

        if (event.duration > 300) {
          if (target.classList.contains('kerdx-table-column-cell') || !this.isnull(target.getParents('.kerdx-table-column-cell'))) {
            if (!target.classList.contains('kerdx-table-column-cell')) {
              target = target.getParents('.kerdx-table-column-cell');
            }

            let position = target.dataset.row;

            if (firstColumn.findAll('.kerdx-table-selected-row').length == 0 && !params.table.classList.contains('kerdx-selectable')) {
              params.table.classList.add('kerdx-selectable');
              let row = table.findAll(`.kerdx-table-column-cell[data-row="${position}"]`);

              for (let i = 0; i < row.length; i++) {
                row[i].classList.add('kerdx-table-selected-row');
              }

              options.remove();
            }
          }
        }
      });
    }
  }

  createForm(params = {
    element: '',
    title: '',
    columns: 1,
    contents: {},
    required: [],
    buttons: {}
  }) {
    let form = this.createElement({
      element: params.element || 'form',
      attributes: params.attributes,
      children: [{
        element: 'h3',
        attributes: {
          class: 'kerdx-form-title'
        },
        text: params.title
      }, {
        element: 'section',
        attributes: {
          class: 'kerdx-form-contents',
          style: {
            gridTemplateColumns: `repeat(${params.columns}, 1fr)`
          }
        }
      }, {
        element: 'section',
        attributes: {
          class: 'kerdx-form-buttons'
        }
      }]
    });
    form.classList.add('kerdx-form');
    if (this.isset(params.parent)) params.parent.append(form);
    let note;
    let formContents = form.find('.kerdx-form-contents');

    for (let key in params.contents) {
      note = this.isset(params.contents[key].note) ? `(${params.contents[key].note})` : '';
      let lableText = params.contents[key].label || this.camelCasedToText(key).toLowerCase();
      let block = formContents.makeElement({
        element: 'div',
        attributes: {
          class: 'kerdx-form-single-content'
        },
        children: [{
          element: 'label',
          html: lableText,
          attributes: {
            class: 'kerdx-form-label',
            for: key.toLowerCase()
          }
        }]
      });
      let data = block.makeElement(params.contents[key]);
      data.classList.add('kerdx-form-data');
      if (this.isset(params.contents[key].note)) block.makeElement({
        element: 'span',
        text: params.contents[key].note,
        attributes: {
          class: 'kerdx-form-note'
        }
      });

      if (this.isset(params.required) && params.required.includes(key)) {
        data.required = true;
      }
    }

    for (let key in params.buttons) {
      form.find('.kerdx-form-buttons').makeElement(params.buttons[key]);
    }

    form.makeElement({
      element: 'span',
      attributes: {
        class: 'kerdx-form-error'
      },
      state: {
        name: 'error',
        owner: `#${form.id}`
      }
    });
    return form;
  }

  picker(params = {
    title: '',
    contents: []
  }, callback = event => {}) {
    let picker = this.createElement({
      element: 'div',
      attributes: {
        class: 'kerdx-picker'
      },
      children: [{
        element: 'h3',
        attributes: {
          class: 'kerdx-picker-title'
        },
        text: params.title || ''
      }, {
        element: 'div',
        attributes: {
          class: 'kerdx-picker-contents'
        }
      }]
    });

    for (let content of params.contents) {
      picker.find('.kerdx-picker-contents').makeElement({
        element: 'span',
        attributes: {
          class: 'kerdx-picker-single',
          'data-name': content
        },
        text: content
      });
    }

    picker.addEventListener('dblclick', event => {
      if (event.target.classList.contains('kerdx-picker-single')) {
        callback(event.target.dataset.name);
      }
    });
    return picker;
  }

  popUp(content, params = {
    title: '',
    attributes: {}
  }) {
    let container = params.container || document.body;
    let title = params.title || '';
    params.attributes = params.attributes || {};
    params.attributes.style = params.attributes.style || {};
    params.attributes.style.width = params.attributes.style.width || '50vw';
    params.attributes.style.height = params.attributes.style.height || '50vh';
    let popUp = this.createElement({
      element: 'div',
      attributes: {
        class: 'kerdx-pop-up'
      },
      children: [{
        element: 'div',
        attributes: {
          id: 'pop-up-window',
          class: 'kerdx-pop-up-window'
        },
        children: [{
          element: 'div',
          attributes: {
            id: 'pop-up-menu',
            class: 'kerdx-pop-up-menu'
          },
          children: [{
            element: 'p',
            attributes: {
              id: '',
              style: {
                color: 'inherit',
                padding: '1em'
              }
            },
            text: title
          }, {
            element: 'i',
            attributes: {
              id: 'toggle-window',
              class: 'kerdx-pop-up-control fas fa-expand-alt'
            }
          }, {
            element: 'i',
            attributes: {
              id: 'close-window',
              class: 'kerdx-pop-up-control fas fa-times'
            }
          }]
        }, {
          element: 'div',
          attributes: {
            id: 'pop-up-content',
            class: 'kerdx-pop-up-content'
          },
          children: [content]
        }]
      }]
    });
    popUp.find('#pop-up-window').setAttributes(params.attributes);
    popUp.find('#toggle-window').addEventListener('click', event => {
      popUp.find('#toggle-window').classList.toggle('fa-expand-alt');
      popUp.find('#toggle-window').classList.toggle('fa-compress-alt');

      if (popUp.find('#toggle-window').classList.contains('fa-expand-alt')) {
        popUp.find('#pop-up-window').css({
          height: params.attributes.style.height,
          width: params.attributes.style.width
        });
      } else {
        popUp.find('#pop-up-window').css({
          height: 'var(--fill-parent)',
          width: 'var(--fill-parent)'
        });
      }
    });
    popUp.find('#close-window').addEventListener('click', event => {
      popUp.remove();
    });
    container.append(popUp);
    return popUp;
  }

  createSelect(params = {
    value: '',
    contents: {},
    multiple: false
  }) {
    let selected = [],
        allowNavigate = false,
        scrollPosition = -1,
        active; //create the element

    let select = this.createElement({
      element: 'div',
      attributes: params.attributes,
      children: [{
        element: 'span',
        attributes: {
          class: 'kerdx-select-control'
        },
        children: [{
          element: 'input',
          attributes: {
            class: 'kerdx-select-input',
            value: params.value || '',
            ignore: true
          }
        }, {
          element: 'span',
          attributes: {
            class: 'kerdx-select-toggle'
          }
        }]
      }, {
        element: 'input',
        attributes: {
          class: 'kerdx-select-search',
          placeHolder: 'Search me...',
          ignore: true
        }
      }, {
        element: 'span',
        attributes: {
          class: 'kerdx-select-contents'
        }
      }]
    });
    select.classList.add('kerdx-select');
    let setValue = select.getAttribute('value');
    select.value = [];

    if (!this.isnull(setValue)) {
      select.value = this.array.findAll(setValue.split(','), v => {
        return v.trim() != '';
      }); //remove all empty strings
    }

    select.dataset.active = 'false'; //get the contents

    let contents = select.find('.kerdx-select-contents');
    let input = select.find('.kerdx-select-input');
    let search = select.find('.kerdx-select-search');
    let toggle = select.find('.kerdx-select-toggle');
    params.contents = params.contents || {}; //populate the element contents

    if (Array.isArray(params.contents)) {
      //Turn contents to object if its array
      let items = params.contents;
      params.contents = {};

      for (let i = 0; i < items.length; i++) {
        params.contents[items[i]] = items[i];
      }
    }

    for (let i in params.contents) {
      let option = contents.makeElement({
        element: 'span',
        attributes: {
          class: 'kerdx-select-option',
          value: i
        }
      });
      option.innerHTML = params.contents[i];
      option.value = i;
    }

    for (let v of select.value) {
      input.value += params.contents[v];
      input.dispatchEvent(new CustomEvent('change'));
    } //enable multiple values


    let single = !this.isset(params.multiple) || params.multiple == false;
    let options = select.findAll('.kerdx-select-option'); //search the contents

    search.onChanged(value => {
      for (let i = 0; i < options.length; i++) {
        if (!options[i].textContent.toLowerCase().includes(value.toLowerCase())) {
          options[i].css({
            display: 'none'
          });
        } else {
          options[i].cssRemove(['display']);
        }
      }
    }); //navigate the contents

    let navigate = event => {
      allowNavigate = false;

      if (event.key == 'ArrowDown' && scrollPosition < options.length - 1) {
        scrollPosition++;
        allowNavigate = true;
      } else if (event.key == 'ArrowUp' && scrollPosition > 0) {
        scrollPosition--;
        allowNavigate = true;
      } else if (event.key == 'Enter') {}

      if (allowNavigate) {
        active = contents.find('.kerdx-select-active-option');

        if (!this.isnull(active)) {
          active.classList.remove('kerdx-select-active-option');
        }

        options[scrollPosition].classList.add('kerdx-select-active-option');
      }
    }; //toggle the contents


    toggle.addEventListener('click', event => {
      let active = select.dataset.active == 'true';

      if (active) {
        deactivate(active);
      } else {
        activate(active);
      }
    }); //show the contents

    let inView, top, bottom;
    document.body.css({
      overflow: 'auto'
    });

    let placeContents = () => {
      top = select.position().top;
      bottom = document.body.clientHeight - select.position().top;

      if (top > bottom) {
        contents.css({
          top: -contents.position().height + 'px'
        });
      } else {
        contents.css({
          top: select.position().height + 'px'
        });
      }
    }; //show contents


    let activate = () => {
      if (select.inView('body')) {
        input.addEventListener('keydown', navigate, false);
        search.css({
          display: 'flex'
        });
        contents.css({
          display: 'flex'
        });
        placeContents();
        select.dataset.active = 'true';
      }
    }; //hide the contents


    let deactivate = () => {
      input.removeEventListener('keydown', navigate, false);
      search.cssRemove(['display']);
      contents.cssRemove(['display']);
      select.dataset.active = 'false';
    }; //update the selected


    let update = values => {
      selected = [];
      values = values.split(',');

      for (let value of values) {
        value = value.trim();

        for (let i in params.contents) {
          if (params.contents[i] == value) {
            value = i;
          }
        }

        selected.push(value);
      }

      select.value = selected;
      input.value = values;
    }; //check when activated


    select.bubbledEvent('click', event => {
      if (event.target != toggle && select.dataset.active == 'false') {
        activate();
      }

      if (event.target.classList.contains('kerdx-select-option')) {
        let text = params.contents[event.target.value];

        if (params.multiple == 'single') {
          if (input.value.includes(text)) {
            input.value = input.value.replace(text, '');
          } else {
            input.value += `, ${text}`;
          }
        } else {
          input.value += `, ${text}`;
        }

        input.dispatchEvent(new CustomEvent('change'));

        if (single) {
          deactivate();
        }
      }
    }); //check when deactivated

    select.notBubbledEvent('click', event => {
      if (select.dataset.active == 'true') {
        deactivate();
      }
    }); //when input value changes

    input.addEventListener('change', event => {
      let values = input.value.split(',');
      values = this.array.findAll(values, value => {
        return value.trim() != '';
      });
      values = this.array.each(values, value => {
        return value.trim();
      });

      if (!single) {
        if (params.multiple == 'single') {
          values = this.array.toSet(values);
        }
      }

      values = values.join(', ');
      update(values);
    }); //align contents on scroll

    window.addEventListener('scroll', event => {
      if (select.inView('body')) {
        placeContents();
      }
    });
    return select;
  }

  choose(params = {
    note: '',
    options: []
  }) {
    let chooseWindow = this.createElement({
      element: 'span',
      attributes: {
        class: 'crater-choose'
      },
      children: [{
        element: 'p',
        attributes: {
          class: 'crater-choose-note'
        },
        text: params.note
      }, {
        element: 'span',
        attributes: {
          class: 'crater-choose-control'
        }
      }, {
        element: 'button',
        attributes: {
          id: 'crater-choose-close',
          class: 'btn'
        },
        text: 'Close'
      }]
    });
    let chooseControl = chooseWindow.querySelector('.crater-choose-control');
    chooseWindow.querySelector('#crater-choose-close').addEventListener('click', event => {
      chooseWindow.remove();
    });

    for (let option of params.options) {
      chooseControl.makeElement({
        element: 'button',
        attributes: {
          class: 'btn choose-option'
        },
        text: option
      });
    }

    return {
      display: chooseWindow,
      choice: new Promise((resolve, reject) => {
        chooseControl.addEventListener('click', event => {
          if (event.target.classList.contains('choose-option')) {
            resolve(event.target.textContent);
            chooseWindow.remove();
          }
        });
      })
    };
  }

  textEditor(params = {
    id: '',
    width: 'max-width'
  }) {
    params = params || {};
    params.id = params.id || 'text-editor';
    let textEditor = this.createElement({
      element: 'div',
      attributes: {
        id: params.id
      },
      children: [{
        element: 'style',
        text: `

                    div#crater-text-editor{
                        margin: 0 auto;
                        display: grid;
                        width: ${params.width || 'max-content'};
                        height: max-content;
                        border: 2px solid rgb(40, 110, 89);
                        border-radius: 8px 8px 0px 0px;
                        background-color: var(--primary-color);
                    }
                    
                    div#crater-rich-text-area{
                        height: 100%;
                        width: 100%;
                    }

                    div#crater-the-ribbon{
                        border-bottom: none;
                        width: 100%;
                        padding: .5em 0;
                        display: grid;
                        grid-template-rows: max-content max-content;
                        background-color: rgb(40, 110, 89);
                        color: var(--primary-color);
                        text-align: left;
                    }

                    iframe#crater-the-WYSIWYG{
                        height: 100%;
                        width: 100%;
                    }

                    div#crater-the-ribbon button{
                        color: var(--primary-color);
                        border: none;
                        outline: none;
                        background-color: transparent;
                        cursor: pointer;
                        padding: .3em;
                        margin: .5em;
                    }

                    div#crater-the-ribbon button:hover{
                        background-color: rgb(20, 90, 70);
                        transition: all 0.3s linear 0s;
                    }

                    div#crater-the-ribbon input,  div#crater-the-ribbon select{
                        margin: .5em;
                    }

                    div#crater-the-ribbon input[type="color"]{
                        border: none;
                        outline: none;
                        background-color: transparent;
                    }
                `
      }, {
        element: 'div',
        attributes: {
          id: 'crater-the-ribbon'
        },
        children: [{
          element: 'span',
          children: [{
            element: 'button',
            attributes: {
              id: 'undoButton',
              title: 'Undo'
            },
            text: '&larr;'
          }, {
            element: 'button',
            attributes: {
              id: 'redoButton',
              title: 'Redo'
            },
            text: '&rarr;'
          }, {
            element: 'select',
            attributes: {
              id: 'fontChanger'
            },
            options: this.fontStyles
          }, {
            element: 'select',
            attributes: {
              id: 'fontSizeChanger'
            },
            options: this.range(1, 20)
          }, {
            element: 'button',
            attributes: {
              id: 'orderedListButton',
              title: 'Numbered List'
            },
            text: '(i)'
          }, {
            element: 'button',
            attributes: {
              id: 'unorderedListButton',
              title: 'Bulletted List'
            },
            text: '&bull;'
          }, {
            element: 'button',
            attributes: {
              id: 'linkButton',
              title: 'Create Link'
            },
            text: 'Link'
          }, {
            element: 'button',
            attributes: {
              id: 'unLinkButton',
              title: 'Remove Link'
            },
            text: 'Unlink'
          }]
        }, {
          element: 'span',
          children: [{
            element: 'button',
            attributes: {
              id: 'boldButton',
              title: 'Bold'
            },
            children: [{
              element: 'b',
              text: 'B'
            }]
          }, {
            element: 'button',
            attributes: {
              id: 'italicButton',
              title: 'Italic'
            },
            children: [{
              element: 'em',
              text: 'I'
            }]
          }, {
            element: 'button',
            attributes: {
              id: 'underlineButton',
              title: 'Underline'
            },
            children: [{
              element: 'u',
              text: 'U'
            }]
          }, {
            element: 'button',
            attributes: {
              id: 'supButton',
              title: 'Superscript'
            },
            children: [{
              element: 'sup',
              text: '2'
            }]
          }, {
            element: 'button',
            attributes: {
              id: 'subButton',
              title: 'Subscript'
            },
            children: [{
              element: 'sub',
              text: '2'
            }]
          }, {
            element: 'button',
            attributes: {
              id: 'strikeButton',
              title: 'Strikethrough'
            },
            children: [{
              element: 's',
              text: 'abc'
            }]
          }, {
            element: 'input',
            attributes: {
              type: 'color',
              id: 'fontColorButton',
              title: 'Change Font Color',
              value: '#000000'
            }
          }, {
            element: 'input',
            attributes: {
              type: 'color',
              id: 'highlightButton',
              title: 'Hightlight Text',
              value: '#ffffff'
            }
          }, {
            element: 'input',
            attributes: {
              type: 'color',
              id: 'backgroundButton',
              title: 'Change Background',
              value: '#ffffff'
            }
          }, {
            element: 'button',
            attributes: {
              id: 'alignLeftButton',
              title: 'Align Left'
            },
            children: [{
              element: 'a',
              text: 'L'
            }]
          }, {
            element: 'button',
            attributes: {
              id: 'alignCenterButton',
              title: 'Align Center'
            },
            children: [{
              element: 'a',
              text: 'C'
            }]
          }, {
            element: 'button',
            attributes: {
              id: 'alignJustifyButton',
              title: 'Align Justify'
            },
            children: [{
              element: 'a',
              text: 'J'
            }]
          }, {
            element: 'button',
            attributes: {
              id: 'alignRightButton',
              title: 'Align Right'
            },
            children: [{
              element: 'a',
              text: 'R'
            }]
          }]
        }]
      }, {
        element: 'div',
        attributes: {
          id: 'crater-rich-text-area'
        },
        children: [{
          element: 'iframe',
          attributes: {
            id: 'crater-the-WYSIWYG',
            frameBorder: 0,
            name: 'theWYSIWYG'
          }
        }]
      }]
    });
    let fonts = textEditor.findAll('select#font-changer > option');
    fonts.forEach(font => {
      font.css({
        fontFamily: font.value
      });
    });
    textEditor.find('#unorderedListButton').innerHTML = '&bull;';
    textEditor.find('#redoButton').innerHTML = '&rarr;';
    textEditor.find('#undoButton').innerHTML = '&larr;';
    let self = this;
    let editorWindow = textEditor.find('#crater-the-WYSIWYG');
    editorWindow.onAdded(() => {
      let editor = editorWindow.contentWindow.document;
      editor.body.innerHTML = '';

      if (self.isset(params.content)) {
        editor.body.innerHTML = params.content.innerHTML;
      }

      editor.designMode = 'on';
      textEditor.find('#boldButton').addEventListener('click', () => {
        editor.execCommand('Bold', false, null);
      }, false);
      textEditor.find('#italicButton').addEventListener('click', () => {
        editor.execCommand('Italic', false, null);
      }, false);
      textEditor.find('#underlineButton').addEventListener('click', () => {
        editor.execCommand('Underline', false, null);
      }, false);
      textEditor.find('#supButton').addEventListener('click', () => {
        editor.execCommand('Superscript', false, null);
      }, false);
      textEditor.find('#subButton').addEventListener('click', () => {
        editor.execCommand('Subscript', false, null);
      }, false);
      textEditor.find('#strikeButton').addEventListener('click', () => {
        editor.execCommand('Strikethrough', false, null);
      }, false);
      textEditor.find('#orderedListButton').addEventListener('click', () => {
        editor.execCommand('InsertOrderedList', false, `newOL${self.random()}`);
      }, false);
      textEditor.find('#unorderedListButton').addEventListener('click', () => {
        editor.execCommand('InsertUnorderedList', false, `newUL${self.random()}`);
      }, false);
      textEditor.find('#fontColorButton').onChanged(value => {
        editor.execCommand('ForeColor', false, value);
      });
      textEditor.find('#highlightButton').onChanged(value => {
        editor.execCommand('BackColor', false, value);
      });
      textEditor.find('#backgroundButton').onChanged(value => {
        editor.body.style.background = value;
      });
      textEditor.find('#fontChanger').onChanged(value => {
        editor.execCommand('FontName', false, value);
      });
      textEditor.find('#fontSizeChanger').onChanged(value => {
        editor.execCommand('FontSize', false, value);
      });
      textEditor.find('#linkButton').addEventListener('click', () => {
        let url = prompt('Enter a URL', 'http://');
        if (self.isnull(url)) return;
        editor.execCommand('CreateLink', false, url);
      }, false);
      textEditor.find('#unLinkButton').addEventListener('click', () => {
        editor.execCommand('UnLink', false, null);
      }, false);
      textEditor.find('#undoButton').addEventListener('click', () => {
        editor.execCommand('Undo', false, null);
      }, false);
      textEditor.find('#redoButton').addEventListener('click', () => {
        editor.execCommand('redo', false, null);
      }, false);
      textEditor.find('#alignLeftButton').addEventListener('click', () => {
        editor.execCommand('justifyLeft', false, null);
      });
      textEditor.find('#alignCenterButton').addEventListener('click', () => {
        editor.execCommand('justifyCenter', false, null);
      });
      textEditor.find('#alignJustifyButton').addEventListener('click', () => {
        editor.execCommand('justifyFull', false, null);
      });
      textEditor.find('#alignRightButton').addEventListener('click', () => {
        editor.execCommand('justifyRight', false, null);
      });
    }, false);
    return textEditor;
  }

  displayData(data = {}, container) {
    let lineNumbers = [];

    let displayString = value => {
      return this.createElement({
        element: 'span',
        attributes: {
          class: 'kerdx-data-str'
        },
        text: `"${value}"`
      });
    };

    let displayLiteral = value => {
      return this.createElement({
        element: 'span',
        attributes: {
          class: 'kerdx-data-lit'
        },
        text: `${value}`
      });
    };

    let displayPunctuation = value => {
      return this.createElement({
        element: 'span',
        attributes: {
          class: 'kerdx-data-pun'
        },
        text: `${value}`
      });
    };

    let displayNewLine = () => {
      increment++;
      return this.createElement({
        element: 'span',
        attributes: {
          class: 'kerdx-data-pln'
        }
      });
    };

    let displayItem = (value, params) => {
      params = params || {};
      let item = this.createElement({
        element: 'span',
        attributes: {
          class: 'kerdx-data-item'
        }
      });
      lineNumbers.push(item);

      if (this.isset(params.key)) {
        item.makeElement([displayString(params.key), displayPunctuation(' : '), chooseDisplay(value)]);
      } else {
        item.makeElement([chooseDisplay(value)]);
      }

      return item;
    };

    let displayArray = value => {
      let array = this.createElement({
        element: 'span',
        attributes: {
          class: 'kerdx-data-block'
        }
      });
      lineNumbers.push(array);
      array.makeElement(displayPunctuation('['));
      let item;

      for (let i = 0; i < value.length; i++) {
        item = array.makeElement(displayItem(value[i]));

        if (i != value.length - 1) {
          item.makeElement(displayPunctuation(','));
        }
      }

      array.makeElement(displayPunctuation(']'));
      return array;
    };

    let displayObject = value => {
      let object = this.createElement({
        element: 'span',
        attributes: {
          class: 'kerdx-data-block'
        }
      });
      lineNumbers.push(object);
      object.makeElement(displayPunctuation('{'));
      let item;
      let i = 0;

      for (let key in value) {
        item = object.makeElement(displayItem(value[key], {
          key
        }));

        if (i != Object.keys(value).length - 1) {
          item.makeElement(displayPunctuation(','));
        }

        i++;
      }

      object.makeElement(displayPunctuation('}'));
      return object;
    };

    let chooseDisplay = value => {
      if (typeof value == "string") {
        return displayString(value);
      } else if (Array.isArray(value)) {
        return displayArray(value);
      } else if (typeof value == 'object') {
        return displayObject(value);
      } else {
        return displayLiteral(value);
      }
    };

    let lineHeight = '25px';
    let displayed = this.createElement({
      element: 'pre',
      attributes: {
        class: 'kerdx-data-window'
      },
      children: [{
        element: 'span',
        attributes: {
          class: 'kerdx-data-line',
          style: {
            lineHeight
          }
        }
      }, {
        element: 'span',
        attributes: {
          class: 'kerdx-data-toggles'
        }
      }, {
        element: 'code',
        attributes: {
          class: 'kerdx-data-code',
          style: {
            lineHeight
          }
        },
        children: [chooseDisplay(data)]
      }]
    });

    if (this.isset(container)) {
      container.append(displayed);
    }

    let code = displayed.find('.kerdx-data-code'),
        numbers,
        toggleButtons,
        height = code.position().height,
        lines = displayed.find('.kerdx-data-line'),
        toggles = displayed.find('.kerdx-data-toggles'),
        count = height / parseInt(lineHeight),
        items = code.findAll('.kerdx-data-item'),
        blocks = code.findAll('.kerdx-data-block');

    let setRange = block => {
      let start = Math.floor((block.position().top - code.position().top) / parseInt(lineHeight)) + 1;
      let end = Math.floor((block.position().bottom - code.position().top) / parseInt(lineHeight)) + 1;
      block.range = this.range(end, start);
    };

    let setNumbers = () => {
      for (let i = 0; i < lineNumbers.length; i++) {
        lines.makeElement([{
          element: 'a',
          html: `${i / 1 + 1}`,
          attributes: {
            class: 'kerdx-data-line-number'
          }
        }]);
      }
    };

    let setToggles = () => {
      for (let i = 0; i < blocks.length; i++) {
        let top = blocks[i].position().top - code.position().top + 6 + 'px';
        let toggle = toggles.makeElement({
          element: 'i',
          attributes: {
            class: 'kerdx-data-toggles-button fas fa-arrow-down',
            style: {
              top
            }
          }
        });
        toggle.block = blocks[i];
        blocks[i].toggle = toggle;
      }
    };

    let alignToggles = () => {
      for (let i = 0; i < toggleButtons.length; i++) {
        toggleButtons[i].css({
          top: toggleButtons[i].block.position().top - code.position().top + 6 + 'px'
        });
      }
    };

    let hideNumbers = block => {
      for (let i = 0; i < block.range.length; i++) {
        if (!this.isset(numbers[block.range[i]].controller)) {
          numbers[block.range[i]].css({
            display: 'none'
          });
          numbers[block.range[i]].controller = block;
        }
      }
    };

    let hideBlock = block => {
      let blockContent = block.children;

      for (let i = 0; i < blockContent.length; i++) {
        if (blockContent[i].classList.contains('kerdx-data-item')) {
          blockContent[i].css({
            display: 'none'
          });
          blockContent[i].findAll('.kerdx-data-block').forEach(b => {
            if (!this.isset(b.toggle.controller)) {
              b.toggle.controller = block;
              b.toggle.css({
                display: 'none'
              });
            }
          });
        }
      }
    };

    let showNumbers = block => {
      for (let i = 0; i < block.range.length; i++) {
        if (numbers[block.range[i]].controller == block) {
          numbers[block.range[i]].cssRemove(['display']);
          delete numbers[block.range[i]].controller;
        }
      }
    };

    let showBlock = block => {
      let blockContent = block.children;

      for (let i = 0; i < blockContent.length; i++) {
        if (blockContent[i].classList.contains('kerdx-data-item')) {
          blockContent[i].cssRemove(['display']);
          blockContent[i].findAll('.kerdx-data-block').forEach(b => {
            if (b.toggle.controller == block) {
              delete b.toggle.controller;
              b.toggle.cssRemove(['display']);
            }
          });
        }
      }
    };

    lineNumbers.push(undefined);
    displayed.onAdded(event => {
      setNumbers();
      setToggles();
      numbers = lines.findAll('.kerdx-data-line-number');
      toggleButtons = toggles.findAll('.kerdx-data-toggles-button');
      let blockContent, start, end;
      displayed.addEventListener('click', event => {
        let target = event.target;

        if (target.classList.contains('kerdx-data-toggles-button')) {
          //if toggled
          if (!this.isset(target.block.range)) {
            setRange(target.block);
          }

          if (target.classList.contains('fa-arrow-down')) {
            //if toggle to show
            hideNumbers(target.block);
            hideBlock(target.block);
          } else {
            showNumbers(target.block);
            showBlock(target.block);
          }

          target.classList.toggle('fa-arrow-up');
          target.classList.toggle('fa-arrow-down');
          alignToggles();
        }
      });
    });
    return displayed;
  }

}

exports.Components = Components;

},{"./Template.js":11}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Func = void 0;

class Func {
  constructor() {
    this.capitals = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    this.smalls = "abcdefghijklmnopqrstuvwxyz";
    this.digits = "1234567890";
    this.symbols = ",./?'!@#$%^&*()-_+=`~\\| ";
    this.months = ['January', 'Febuary', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    this.days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    this.genders = ['Male', 'Female', 'Do not disclose'];
    this.maritals = ['Married', 'Single', 'Divorced', 'Widowed'];
    this.religions = ['Christainity', 'Islam', 'Judaism', 'Paganism', 'Budism'];
    this.userTypes = ['student', 'staff', 'admin', 'ceo'];
    this.staffRequests = ['leave', 'allowance'];
    this.studentsRequests = ['absence', 'academic'];
    this.subjectList = ['Mathematics', 'English', 'Physics', 'Chemistry', 'Biology', 'Agriculture', 'Literature', 'History'].sort();
    this.subjectLevels = ['General', 'Senior', 'Science', 'Arts', 'Junior'];
    this.fontStyles = ['Arial', 'Times New Roman', 'Helvetica', 'Times', 'Courier New', 'Verdana', 'Courier', 'Arial Narrow', 'Candara', 'Geneva', 'Calibri', 'Optima', 'Cambria', 'Garamond', 'Perpetua', 'Monaco', 'Didot', 'Brush Script MT', 'Lucida Bright', 'Copperplate', 'Serif', 'San-Serif', 'Georgia', 'Segoe UI'];
    this.pixelSizes = ['0px', '1px', '2px', '3px', '4px', '5px', '6px', '7px', '8px', '9px', '10px', '20px', '30px', '40px', '50px', '60px', '70px', '80px', '90px', '100px', 'None', 'Unset', 'auto', '-webkit-fill-available'];
    this.colors = ['Red', 'Green', 'Blue', 'Yellow', 'Black', 'White', 'Purple', 'Violet', 'Indigo', 'Orange', 'Transparent', 'None', 'Unset'];
    this.boldness = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 'lighter', 'bold', 'bolder', 'normal', 'unset'];
    this.borderTypes = ['Solid', 'Dotted', 'Double', 'Groove', 'Dashed', 'Inset', 'None', 'Unset', 'Outset', 'Rigged', 'Inherit', 'Initial'];
    this.shadows = ['2px 2px 5px 2px red', '2px 2px 5px green', '2px 2px yellow', '2px black', 'None', 'Unset'];
    this.borders = ['1px solid black', '2px dotted green', '3px dashed yellow', '1px double red', 'None', 'Unset'];
    this.alignment = ['Left', 'Justified', 'Right', 'Center'];
  }

  extractSource(source) {
    let value = this.inBetween(source, '$#&{', '}&#$');

    try {
      value = JSON.parse(value);
    } catch (error) {
      value = {};
    }

    return value;
  }

  indexAt(haystack = '', needle = '', pos = 0) {
    pos = pos || 0;

    if (haystack.indexOf(needle) == -1) {
      return -1;
    }

    haystack = haystack.split(needle);

    if (pos >= haystack.length) {
      return -1;
    }

    let index = 0;

    for (let i = 0; i < haystack.length; i++) {
      if (i <= pos) {
        index += haystack[i].length;
      }
    }

    index += needle.length * pos;
    return index;
  }

  combine(haystack = '', first = '', second = '', pos = 0) {
    pos = pos || 0; //initialize position if not set

    let at1 = pos,
        at2 = first === second ? pos + 1 : pos; //check if it is the same and change position

    let start = this.indexAt(haystack, first, at1); //get the start

    let end = this.indexAt(haystack, second, at2); //get the end

    if (start == -1 || start + first.length >= haystack.length || end == -1) {
      //null if one is not found
      return -1;
    }

    return haystack.slice(start, end + second.length);
  }

  allCombine(haystack = '', first = '', second = '') {
    let pos = 0;
    let all = [];
    let found;

    while (found != -1) {
      found = this.combine(haystack, first, second, pos);
      pos++;

      if (found != -1) {
        all.push(found);
      }
    }

    return all;
  }

  inBetween(haystack = '', first = '', second = '', pos = 0) {
    pos = pos || 0; //initialize position if not set

    let at1 = pos,
        at2 = first === second ? pos + 1 : pos; //check if it is the same and change position

    let start = this.indexAt(haystack, first, at1); //get the start

    let end = this.indexAt(haystack, second, at2); //get the end

    if (start == -1 || start + first.length >= haystack.length || end == -1) {
      //-1 if one is not found or inbetween
      return -1;
    }

    return haystack.slice(start + first.length, end);
  }

  allInBetween(haystack = '', first = '', second = '') {
    let pos = 0;
    let all = [];
    let found;

    while (found != -1) {
      found = this.inBetween(haystack, first, second, pos);
      pos++;

      if (found != -1) {
        all.push(found);
      }
    }

    return all;
  }

  extractCSS(element) {
    let css = element.style.cssText,
        style = {},
        key,
        value;

    if (css != '') {
      css = css.split('; ');
      let pair;

      for (let i of css) {
        pair = this.trem(i);
        key = this.jsStyleName(pair.split(':')[0]);
        value = this.stringReplace(pair.split(':').pop(), ';', '');

        if (key != '') {
          style[key] = this.trem(value);
        }
      }
    }

    return style;
  }

  trimMonthArray() {
    let months = [];

    for (let i = 0; i < this.months.length; i++) {
      months.push(this.months[i].slice(0, 3));
    }

    return months;
  }

  jsStyleName(name = '') {
    let newName = '';

    for (let i = 0; i < name.length; i++) {
      if (name[i] == '-') {
        i++;
        newName += name[i].toUpperCase();
      } else newName += name[i].toLowerCase();
    }

    return newName;
  }

  cssStyleName(name = '') {
    let newName = '';

    for (let i = 0; i < name.length; i++) {
      if (this.isCapital(name[i])) newName += '-';
      newName += name[i].toLowerCase();
    }

    return newName;
  }

  textToCamelCased(text = '') {
    let value = '';

    for (let i in text) {
      if (text[i] == ' ') continue;else if (i == 0) value += text[i].toLowerCase();else if (this.isset(text[i - 1]) && text[i - 1] == ' ') value += text[i].toUpperCase();else value += text[i];
    }

    return value;
  }

  camelCasedToText(camelCase = '') {
    let value = '';

    for (let i in camelCase) {
      if (i != 0 && this.isCapital(camelCase[i])) value += ` ${camelCase[i].toLowerCase()}`;else value += camelCase[i];
    }

    return value;
  }

  emptyObject(obj) {
    return JSON.stringify(obj) == JSON.stringify({});
  }

  random(params = {
    limit: 1,
    range: 1
  }) {
    let random;

    if (this.emptyObject(params)) {
      random = Math.random() * 2 - 1;
    } else if (this.isset(params.limit)) {
      random = Math.random() * params.limit;
    } else if (this.isset(params.range)) {}

    return random;
  }

  range(end = 1, start = 1) {
    let value = [];

    for (let i = start || 0; i < end; i++) {
      value.push(i);
    }

    return value;
  }

  generateRandom(length = 5) {
    var string = this.capitals + this.smalls + this.digits;
    var alphanumeric = '';

    for (var i = 0; i < length; i++) {
      alphanumeric += string[Math.floor(Math.random() * string.length)];
    }

    return alphanumeric;
  }

  generateRandomHex(length = 5) {
    var string = this.capitals.slice(0, 3) + this.smalls.slice(0, 3) + this.digits;
    var alphanumeric = '';

    for (var i = 0; i < length; i++) {
      alphanumeric += string[Math.floor(Math.random() * string.length)];
    }

    return alphanumeric;
  }

  generateKey(length = 5) {
    let key = Date.now().toString(length) + Math.random().toString(length).slice(2); //generate the key

    return key;
  }

  edittedUrl(params) {
    var url = this.urlSplitter(params.url);
    url.vars[params.toAdd] = params.addValue.toLowerCase();
    return this.urlMerger(url, params.toAdd);
  }

  addCommaToMoney(money = '') {
    var inverse = '';

    for (var i = money.length - 1; i >= 0; i--) {
      inverse += money[i];
    }

    money = "";

    for (var i = 0; i < inverse.length; i++) {
      let position = (i + 1) % 3;
      money += inverse[i];

      if (position == 0) {
        if (i != inverse.length - 1) {
          money += ',';
        }
      }
    }

    inverse = '';

    for (var i = money.length - 1; i >= 0; i--) {
      inverse += money[i];
    }

    return inverse;
  }

  isCapital(value = '') {
    if (value.length == 1) {
      return this.capitals.includes(value);
    }
  }

  capitalize(value = '') {
    if (!this.isCapital(value[0])) {
      value = value.split('');
      value[0] = this.capitals[this.smalls.indexOf(value[0])];
      return this.stringReplace(value.toString(), ',', '');
    }

    return value;
  }

  flip(haystack = '') {
    return haystack.split('').reverse().join('');
  }

  isSmall(value = '') {
    if (value.length == 1) {
      return this.smalls.includes(value);
    }
  }

  isSymbol(value = '') {
    if (value.length == 1) {
      return this.symbols.includes(value);
    }
  }

  isName(value = '') {
    for (var x in value) {
      if (this.isDigit(value[x])) {
        return false;
      }
    }

    return true;
  }

  isPasswordValid(value = '') {
    var len = value.length;

    if (len > 7) {
      for (var a in value) {
        if (this.isCapital(value[a])) {
          for (var b in value) {
            if (this.isSmall(value[b])) {
              for (var c in value) {
                if (this.isDigit(value[c])) {
                  for (var d in value) {
                    if (this.isSymbol(value[d])) {
                      return true;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return false;
  }

  isSubString(haystack = '', value = '') {
    if (haystack.indexOf(value) != -1) return true;
    return false;
  }

  isDigit(value = '') {
    value = new String(value);

    if (value.length == 1) {
      return this.digits.includes(value);
    }

    return false;
  }

  isEmail(value = '') {
    var email_parts = value.split('@');

    if (email_parts.length != 2) {
      return false;
    } else {
      if (this.isSpaceString(email_parts[0])) {
        return false;
      }

      var dot_parts = email_parts[1].split('.');

      if (dot_parts.length != 2) {
        return false;
      } else {
        if (this.isSpaceString(dot_parts[0])) {
          return false;
        }

        if (this.isSpaceString(dot_parts[1])) {
          return false;
        }
      }
    }

    return true;
  }

  isTruthy(value) {
    let truthy;

    if (typeof value == 'boolean') {
      truthy = value;
    } else if (typeof value == 'string') {
      truthy = value.toLocaleLowerCase() == 'true' || value.toLocaleLowerCase() == '1';
    } else if (typeof value == 'number') {
      truthy = value == 1;
    }

    return truthy;
  }

  isFalsy(value) {
    let falsy;

    if (typeof value == 'boolean') {
      falsy = value;
    } else if (typeof value == 'string') {
      falsy = value.toLocaleLowerCase() == 'false' || value.toLocaleLowerCase() == '0';
    } else if (typeof value == 'number') {
      falsy = value == 0;
    }

    return falsy;
  }

  objectLength(object = {}) {
    return Object.keys(object).length;
  }

  isSpaceString(value = '') {
    if (value == '') {
      return true;
    } else {
      for (var x in value) {
        if (value[x] != ' ') {
          return false;
        }
      }
    }

    return true;
  }

  hasString(haystack = '', needle = '') {
    for (var x in haystack) {
      if (needle == haystack[x]) {
        return true;
      }
    }

    return false;
  }

  trem(needle = '') {
    //remove the prepended spaces
    if (needle[0] == ' ') {
      var new_needle = '';

      for (var i = 0; i < needle.length; i++) {
        if (i != 0) {
          new_needle += needle[i];
        }
      }

      needle = this.trem(new_needle);
    } //remove the appended spaces


    if (needle[needle.length - 1] == ' ') {
      var new_needle = '';

      for (var i = 0; i < needle.length; i++) {
        if (i != needle.length - 1) {
          new_needle += needle[i];
        }
      }

      needle = this.trem(new_needle);
    }

    return needle;
  }

  stringReplace(word = '', from = '', to = '') {
    var value = '';

    for (let i = 0; i < word.length; i++) {
      if (word[i] == from) {
        value += to;
      } else {
        value += word[i];
      }
    }

    return value;
  }

  converToRealPath(path = '') {
    if (path[path.length - 1] != '/') {
      path += '/';
    }

    return path;
  }

  isSpacialCharacter(char = '') {
    var specialcharacters = "'\\/:?*<>|!.";

    for (var i = 0; i < specialcharacters.length; i++) {
      if (specialcharacters[i] == char) {
        return true;
      }
    }

    return false;
  }

  countChar(haystack = '', needle = '') {
    var j = 0;

    for (var i = 0; i < haystack.length; i++) {
      if (haystack[i] == needle) {
        j++;
      }
    }

    return j;
  }

  occurancesOf(haystack = '', needle = '') {
    let occurances = [];

    for (let i = 0; i < haystack.length; i++) {
      if (haystack[i] === needle) {
        occurances.push(i);
      }
    }

    return occurances;
  }

  isset(variable) {
    return typeof variable !== 'undefined';
  }

  isnull(variable) {
    return variable == null;
  }

  notNull(variable) {
    return this.isset(variable) && !this.isnull(variable);
  }

  isArray(variable) {
    let flag = false;

    if (typeof variable == 'object') {
      flag = variable.constructor === Array;
    }

    return flag;
  }

  isObject(variable) {
    let flag = false;

    if (typeof variable == 'object') {
      flag = variable.constructor === Object;
    }

    return flag;
  }

  isString(variable) {
    let flag = false;

    if (typeof variable == 'string') {
      flag = variable.constructor === String;
    }

    return flag;
  }

  isNumber(variable) {
    let flag = false;

    if (typeof variable == 'number') {
      flag = variable.constructor === Number;
    }

    return flag;
  }

  isBool(variable) {
    let flag = false;

    if (typeof variable == 'boolean') {
      flag = variable.constructor === Boolean;
    }

    return flag;
  }

  isfunction(variable) {
    return typeof variable === 'function';
  }

  async runParallel(functions = [], callBack = () => {}) {
    var results = {};

    for (var f in functions) {
      results[f] = await functions[f];
    }

    callBack(results);
  }

  isMobile() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  }

  urlMerger(splitUrl = '', lastQuery = '') {
    var hostType = this.isset(splitUrl.hostType) ? splitUrl.hostType : 'http';
    var hostName = this.isset(splitUrl.hostName) ? splitUrl.hostName : '';
    var port = this.isset(splitUrl.host) ? splitUrl.port : '';
    var pathName = this.isset(splitUrl.pathName) ? splitUrl.pathName : '';
    var queries = '?';
    var keepMapping = true;
    this.isset(splitUrl.vars) ? Object.keys(splitUrl.vars).map(key => {
      if (keepMapping) queries += key + '=' + splitUrl.vars[key] + '&';
      if (key == lastQuery) keepMapping = false;
    }) : '';
    var location = hostType + '::/' + hostName + ':' + port + '/' + pathName + queries;
    location = location.lastIndexOf('&') == location.length - 1 ? location.slice(0, location.length - 1) : location;
    location = location.lastIndexOf('=') == location.length - 1 ? location.slice(0, location.length - 1) : location;
    return location;
  }

  urlSplitter(location = '') {
    if (this.isset(location)) {
      location = location.toString();
      var httpType = location.indexOf('://') === -1 ? null : location.split('://')[0];
      var fullPath = location.split('://').pop(0);
      var host = fullPath.split('/')[0];
      var hostName = host.split(':')[0];
      var port = host.split(':').pop(0);
      var path = '/' + fullPath.split('/').pop(0);
      var pathName = path.split('?')[0];
      var queries = path.indexOf('?') === -1 ? null : path.split('?').pop(0);
      var vars = {};

      if (queries != null) {
        var query = queries.split('&');

        for (var x in query) {
          var parts = query[x].split('=');

          if (parts[1]) {
            vars[this.stringReplace(parts[0], '-', ' ')] = this.stringReplace(parts[1], '-', ' ');
          } else {
            vars[this.stringReplace(parts[0], '-', ' ')] = '';
          }
        }
      }

      var httphost = httpType + '://' + host;
      return {
        location: location,
        httpType: httpType,
        fullPath: fullPath,
        host: host,
        httphost: httphost,
        hostName: hostName,
        port: port,
        path: path,
        pathName: pathName,
        queries: queries,
        vars: vars
      };
    }
  }

  getUrlVars(location = '') {
    location = location.toString();
    var queries = location.indexOf('?') === -1 ? null : location.split('?').pop(0);
    var vars = {};

    if (queries != null) {
      var query = queries.split('&');

      for (var x in query) {
        var parts = query[x].split('=');

        if (parts[1]) {
          vars[this.stringReplace(parts[0], '-', ' ')] = this.stringReplace(parts[1], '-', ' ');
        } else {
          vars[this.stringReplace(parts[0], '-', ' ')] = '';
        }
      }
    }

    return vars;
  }

}

exports.Func = Func;

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JSElements = void 0;

var _Period = require("./Period.js");

class JSElements extends _Period.Period {
  constructor() {
    super();
  }

  loadCss(href = '') {
    document.head.makeElement({
      element: 'link',
      attributes: {
        rel: 'stylesheet',
        type: 'text/css',
        href
      }
    });
  }

  jsonForm(form) {
    let json = {};

    let perform = element => {
      let children = element.children;

      for (let i = 0; i < children.length; i++) {
        perform(children[i]);
      }

      if (element.hasAttribute('name')) {
        if (element.type == 'file') {
          if (element.hasAttribute('multiple')) {
            json[element.getAttribute('name')] = element.files;
          } else {
            json[element.getAttribute('name')] = element.files[0];
          }
        } else {
          json[element.getAttribute('name')] = element.value;
        }
      }
    };

    perform(form);
    return json;
  }

  jsonElement(_element_) {
    let element = _element_.nodeName.toLowerCase();

    let attributes = _element_.getAttributes();

    attributes.style = _element_.css();
    let children = [];

    for (let i = 0; i < _element_.children.length; i++) {
      children.push(_element_.children[i].toJson());
    }

    return {
      element,
      attributes,
      children
    };
  }

  createFromObject(object = {}, singleParent) {
    let created, name;

    if (object.element instanceof Element) {
      created = object.element;
      name = created.nodeName;
    } else {
      name = object.element.toLowerCase();
      created = document.createElement(object.element); //generate the element
    }

    if (this.isset(object.attributes)) {
      //set the attributes
      for (var attr in object.attributes) {
        if (attr == 'style') {
          //set the styles
          created.css(object.attributes[attr]);
        } else created.setAttribute(attr, object.attributes[attr]);
      }
    }

    if (this.isset(object.text)) {
      created.textContent = object.text; //set the innerText
    }

    if (this.isset(object.html)) {
      created.innerHTML = object.html; //set the innerHTML
    }

    if (this.isset(object.value)) {
      created.value = object.value; //set the value
    }

    if (name.includes('-')) {
      created = this.createFromHTML(created.outerHTML);
    }

    if (this.isset(singleParent)) {
      singleParent.attachElement(created, object.attachment);
    }

    if (this.isset(object.children)) {
      created.makeElement(object.children);
    }

    if (this.isset(object.options) && Array.isArray(object.options)) {
      //add options if isset           
      for (var i of object.options) {
        let option = created.makeElement({
          element: 'option',
          value: i,
          text: i,
          attachment: 'append'
        });

        if (this.isset(object.selected) && object.selected == i) {
          option.setAttribute('selected', true);
        }

        if (i.toString().toLowerCase() == 'null') {
          option.setAttribute('disabled', true);
        }
      }
    }

    if (this.isset(created.dataset.icon)) {
      created.addClasses(created.dataset.icon);
    }

    return created;
  }

  createFromHTML(htmlString = '', singleParent) {
    let parser = new DOMParser();
    let html = parser.parseFromString(htmlString, 'text/html');
    let created = html.body.firstChild;

    if (htmlString.indexOf('html') == 1) {
      created = html;
    } else if (htmlString.indexOf('body') == 1) {
      created = html.body;
    }

    if (this.isset(singleParent)) singleParent.attachElement(created, singleParent.attachment);
    return created;
  }

  createPerceptorElement(object, singleParent) {
    let created = this[object.perceptorElement](object.params);

    if (this.isset(singleParent)) {
      singleParent.attachElement(created, object.attachment);
    }

    return created;
  }

  getElement(singleParam = {
    element: '',
    attributes: {}
  }, singleParent) {
    var element; //if params is a HTML String

    if (typeof singleParam == 'string') {
      element = this.createFromHTML(singleParam, singleParent);
    } else if (singleParam instanceof Element) {
      element = singleParam;
      if (this.isset(singleParent)) singleParent.attachElement(element, singleParam.attachment);
    } //if params is object
    else if (typeof singleParam == 'object') {
        if (singleParam.perceptorElement) {
          element = this.createPerceptorElement(singleParam, singleParent);
        } else {
          element = this.createFromObject(singleParam, singleParent);
        }
      }

    if (!this.isset(element.setKey)) element.setKey();

    if (this.isset(singleParam.list)) {
      let list = element.makeElement({
        element: 'datalist',
        options: singleParam.list
      });
      element.setAttribute('list', element.dataset.domKey);
      list.setAttribute('id', element.dataset.domKey);
    }

    if (this.isset(singleParam.state)) {
      let owner = element.getParents(singleParam.state.owner, singleParam.state.value);

      if (!this.isnull(owner)) {
        owner.addState({
          name: singleParam.state.name,
          state: element
        });
        element.dataset.stateStatus = 'set';
      } else {
        element.dataset.stateStatus = 'pending';
      }
    }

    return element;
  }

  createElement(params = {
    element: '',
    attributes: {}
  }, parent) {
    if (Array.isArray(params)) {
      let elements = [];

      for (let param of params) {
        elements.push(this.getElement(param, parent));
      }

      return elements;
    } else {
      let element = this.getElement(params, parent);
      return element;
    }
  }

  validateFormTextarea(element) {
    if (element.value == '') {
      return false;
    }

    return true;
  }

  validateFormInput(element) {
    var type = element.getAttribute('type');
    var value = element.value;

    if (this.isnull(type)) {
      return !this.isSpaceString(value);
    }

    type = type.toLowerCase();

    if (type == 'file') {
      return value != '';
    } else if (type == 'text') {
      return !this.isSpaceString(value);
    } else if (type == 'date') {
      if (this.hasString(element.className, 'future')) {
        return this.isDate(value);
      } else {
        return this.isDateValid(value);
      }
    } else if (type == 'email') {
      return this.isEmail(value);
    } else if (type == 'number') {
      return this.isNumber(value);
    } else if (type == 'password') {
      return this.isPasswordValid(value);
    } else {
      return !this.isSpaceString(value);
    }
  }

  validateFormSelect(element) {
    if (element.value == 0 || element.value.toLowerCase() == 'null') {
      return false;
    }

    return true;
  }

  validateForm(form, options) {
    options = options || {};
    options.nodeNames = options.nodeNames || 'INPUT, SELECT, TEXTAREA';
    let flag = true,
        nodeName,
        elementName,
        elements = form.findAll(options.nodeNames);

    let validateMe = me => {
      let value;

      if (nodeName == 'INPUT') {
        value = this.validateFormInput(me);
      } else if (nodeName == 'SELECT') {
        value = this.validateFormSelect(me);
      } else if (nodeName == 'TEXTAREA') {
        value = this.validateFormTextarea(me);
      } else {
        value = this.validateOtherElements(me);
      }

      return value;
    };

    for (let i = 0; i < elements.length; i++) {
      nodeName = elements[i].nodeName;
      elementName = elements[i].getAttribute('name');

      if (elements[i].getAttribute('ignore') == 'true') {
        continue;
      }

      if (this.isset(options.names)) {
        if (options.names.includes(elementName)) {
          flag = validateMe(elements[i]);
        } else {
          continue;
        }
      } else {
        flag = validateMe(elements[i]);
      }

      if (!flag) {
        break;
      }
    }

    return {
      flag,
      elementName
    };
  }

  validateOtherElements(element) {
    let value = false;
    if (this.isset(element.value) && element.value != '') value = true;
    return value;
  }

  ValidateFormImages(form) {
    return type == 'file' && !self.isImageValid(value);
  }

  isImageValid(input) {
    var ext = input.substring(input.lastIndexOf('.') + 1).toLowerCase();

    if (ext == "png" || ext == "gif" || ext == "jpeg" || ext == "jpg") {
      return true;
    } else {
      return false;
    }
  }

  imageToJson(file, callBack = () => {}) {
    let fileReader = new FileReader();
    let myfile = {};

    fileReader.onload = event => {
      myfile.src = event.target.result;
      callBack(myfile);
    };

    myfile.size = file.size;
    myfile.type = file.type;
    fileReader.readAsDataURL(file);
  }

}

exports.JSElements = JSElements;

},{"./Period.js":10}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Matrix = void 0;

var _Func = require("./Func.js");

let func = new _Func.Func();

class Matrix {
  constructor(params = {
    rows: 2,
    cols: 2,
    contents: []
  }) {
    Object.keys(params).map(key => {
      this[key] = params[key];
    });
    this.rows = this.rows || 2;
    this.cols = this.cols || 2;
    this.contents = this.contents || [];
    this.setData(this.contents);
  }

  setData(contents = []) {
    this.contents = contents;
    this.data = [];

    for (let i = 0; i < this.rows; i++) {
      this.data[i] = [];

      for (let j = 0; j < this.rows; j++) {
        this.data[i][j] = contents.shift();
      }
    }
  }

  get structure() {
    let {
      rows,
      cols
    } = this;
    return {
      rows,
      cols
    };
  }

  add(n = 0) {
    if (n instanceof Matrix) {
      for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < this.cols; j++) {
          this.data[i][j] += n.data[i][j];
        }
      }
    } else if (n instanceof Array) {
      for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < this.cols; j++) {
          this.data[i][j] += n[i][j];
        }
      }
    } else {
      for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < this.cols; j++) {
          this.data[i][j] += n;
        }
      }
    }
  }

  subtract(n = 0) {
    if (n instanceof Matrix) {
      for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < this.cols; j++) {
          this.data[i][j] -= n.data[i][j];
        }
      }
    } else if (n instanceof Array) {
      for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < this.cols; j++) {
          this.data[i][j] -= n[i][j];
        }
      }
    } else {
      for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < this.cols; j++) {
          this.data[i][j] -= n;
        }
      }
    }
  }

  multiply(n = 1) {
    if (n instanceof Matrix) {
      for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < n.cols; j++) {
          this.data[i][j] *= n.data[i][j];
        }
      }
    } else if (n instanceof Array) {
      for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < this.cols; j++) {
          this.data[i][j] *= n[i][j];
        }
      }
    } else {
      for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < this.cols; j++) {
          this.data[i][j] *= n;
        }
      }
    }
  }

  randomize() {
    this.map(value => {
      return func.random();
    });
  }

  transpose() {
    let newMatrix = new Matrix({
      rows: this.cols,
      cols: this.rows
    });

    for (let i = 0; i < this.rows; i++) {
      for (let j = 0; j < this.cols; j++) {
        newMatrix.data[j][i] = this.data[i][j];
      }
    }

    Object.keys(newMatrix).map(key => {
      this[key] = newMatrix[key];
    });
  }

  map(callback = (value, ...pos) => {}) {
    for (let i = 0; i < this.rows; i++) {
      for (let j = 0; j < this.cols; j++) {
        let value = this.data[i][j];
        this.data[i][j] = callback(value, i, j);
      }
    }
  }

  print() {
    console.table(this.data);
  }

  say() {
    console.log(this.toArray());
  }

  toArray() {
    this.contents = [];
    Matrix.map(this, value => {
      this.contents.push(value);
    });
    return this.contents;
  }

  reshape(params = {
    rows: 2,
    cols: 2
  }) {
    this.toArray();
    this.rows = params.rows;
    this.cols = params.cols;
    this.setData(this.contents);
  }

  getColumns(...cols) {
    let value = [];

    for (let i in cols) {
      value.push(Array.each(this.data, row => {
        return row[cols[i]];
      }));
    }

    return value;
  }

  getRows(...rows) {
    let value = [];

    for (let r = 0; r < this.rows; r++) {
      if (rows.includes(r)) {
        value.push(this.data[r]);
      }
    }

    return value;
  }

  static toArray(matrix) {
    let array = [];
    Matrix.map(matrix, value => {
      array.push(value);
    });
    return array;
  }

  static subtract(a = new Matrix(), b) {
    let contents = [],
        rows = a.rows,
        cols = a.cols;

    if (b instanceof Matrix) {
      for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
          contents.push(a.data[i][j] - b.data[i][j]);
        }
      }
    } else if (b instanceof Array) {
      for (let i = 0; i < a.rows; i++) {
        for (let j = 0; j < a.cols; j++) {
          contents.push(a.data[i][j] - b[i][j]);
        }
      }
    } else {
      for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < this.cols; j++) {
          contents.push(a.data[i][j] - b);
        }
      }
    }

    return new Matrix({
      rows,
      cols,
      contents
    });
  }

  static add(a = new Matrix(), b) {
    let contents = [],
        rows = a.rows,
        cols = a.cols;

    if (b instanceof Matrix) {
      for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
          contents.push(a.data[i][j] + b.data[i][j]);
        }
      }
    } else if (b instanceof Array) {
      for (let i = 0; i < a.rows; i++) {
        for (let j = 0; j < a.cols; j++) {
          contents.push(a.data[i][j] + b[i][j]);
        }
      }
    } else {
      for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < this.cols; j++) {
          contents.push(a.data[i][j] + b);
        }
      }
    }

    return new Matrix({
      rows,
      cols,
      contents
    });
  }

  static multiply(a = new Matrix(), b) {
    let contents = [],
        rows,
        cols;

    if (b instanceof Matrix) {
      if (a.cols !== b.rows) {
        console.log('Columns of A must equal rows of B');
        return;
      }

      rows = a.rows;
      cols = b.cols;

      for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
          let sum = 0;

          for (let k = 0; k < a.cols; k++) {
            sum += a.data[i][k] * b.data[k][j];
          }

          contents.push(sum);
        }
      }
    } else if (b instanceof Array) {
      rows = a.rows;
      cols = a.cols;

      for (let i = 0; i < a.rows; i++) {
        for (let j = 0; j < a.cols; j++) {
          contents.push(a.data[i][j] * b[i][j]);
        }
      }
    } else {
      for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < this.cols; j++) {
          contents.push(a.data[i][j] * b);
        }
      }
    }

    return new Matrix({
      rows,
      cols,
      contents
    });
  }

  static divide(a = new Matrix(), b) {
    let contents = [],
        rows,
        cols;

    if (b instanceof Matrix) {
      if (a.cols !== b.rows) {
        console.log('Columns of A must equal rows of B');
        return;
      }

      rows = a.rows;
      cols = b.cols;

      for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
          let sum = 0;

          for (let k = 0; k < a.cols; k++) {
            sum += a.data[i][k] / b.data[k][j] || 0;
          }

          contents.push(sum);
        }
      }
    } else if (b instanceof Array) {
      rows = a.rows;
      cols = a.cols;

      for (let i = 0; i < a.rows; i++) {
        for (let j = 0; j < a.cols; j++) {
          contents.push(a.data[i][j] / b[i][j] || 0);
        }
      }
    } else {
      for (let i = 0; i < this.rows; i++) {
        for (let j = 0; j < this.cols; j++) {
          contents.push(a.data[i][j] / b || 0);
        }
      }
    }

    return new Matrix({
      rows,
      cols,
      contents
    });
  }

  static randomize(matrix = new Matrix()) {
    return Matrix.map(matrix, value => {
      return func.random();
    });
  }

  static transpose(matrix = new Matrix()) {
    let newMatrix = new Matrix({
      rows: matrix.cols,
      cols: matrix.rows
    });

    for (let i = 0; i < matrix.rows; i++) {
      for (let j = 0; j < matrix.cols; j++) {
        newMatrix.data[j][i] = matrix.data[i][j];
      }
    }

    return newMatrix;
  }

  static map(matrix = new Matrix(), callback = () => {}) {
    let newMatrix = new Matrix({
      rows: matrix.rows,
      cols: matrix.cols
    });

    for (let i = 0; i < matrix.rows; i++) {
      for (let j = 0; j < matrix.cols; j++) {
        let value = matrix.data[i][j];
        newMatrix.data[i][j] = callback(value, i, j);
      }
    }

    return newMatrix;
  }

  static fromArray(contents = []) {
    return new Matrix({
      rows: contents.length,
      cols: 1,
      contents
    });
  }

  static reshape(params = {
    rows: 2,
    cols: 2,
    matrix: new Matrix()
  }) {
    params.contents = Matrix.toArray(params.matrix);
    delete params.matrix;
    return new Matrix(params);
  }

  static normalize(matrix = new Matrix()) {
    let contents = Math.normalize(Matrix.toArray(matrix));
    return new Matrix({
      rows: matrix.rows,
      cols: matrix.cols,
      contents
    });
  }

  static diagonal(array = []) {
    let matrix = Matrix.square(array.length);

    for (let i in matrix.data) {
      for (let j in matrix.data[i]) {
        if (i == j) {
          matrix.data[i][j] = array[i];
        }
      }
    }

    matrix.toArray();
    return matrix;
  }

  static unit(size = 2) {
    let matrix = Matrix.square(size);

    for (let i in matrix.data) {
      for (let j in matrix.data[i]) {
        if (i == j) {
          matrix.data[i][j] = 1;
        }
      }
    }

    matrix.toArray();
    return matrix;
  }

  static square(size = 2) {
    return new Matrix({
      rows: size,
      cols: size
    });
  }

  static fromMatrixCols(matrix = new Matrix(), ...cols) {
    let value = matrix.getColumns(...cols);
    let contents = Array.flatten(value);
    let newMatrix = new Matrix({
      rows: value.length,
      cols: matrix.cols,
      contents
    });
    newMatrix.transpose();
    return newMatrix;
  }

  static deepMatrix(dimensions = [], contents = []) {
    //split the dimensions into an array of arrays of length 2
    let matrixDimensions = [];

    for (let i = 0; i < dimensions.length; i++) {
      matrixDimensions.push({
        rows: dimensions[i],
        cols: dimensions[++i] || 1
      });
    }

    let makeMatrix = layer => {
      let matrix = new Matrix(matrixDimensions[layer]);

      if (layer + 1 == matrixDimensions.length) {
        matrix.map(value => {
          return contents.shift() || 0;
        });
      } else {
        matrix.map(value => {
          return makeMatrix(layer + 1);
        });
      }

      return matrix;
    };

    return makeMatrix(0);
  }

}

exports.Matrix = Matrix;

},{"./Func.js":6}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NeuralNetwork = void 0;

var _Matrix = require("./Matrix.js");

var _Func = require("./Func.js");

var _Array = require("./../functions/Array.js");

let func = new _Func.Func();
let arrayLibrary = (0, _Array.ArrayLibrary)();

class NeuralNetwork {
  constructor(params) {
    func.object.copy(params, this);
    this.ihWeights = new _Matrix.Matrix({
      rows: this.hNodes,
      cols: this.iNodes
    });
    this.ihWeights.randomize();
    this.ihBias = new _Matrix.Matrix({
      rows: this.hNodes,
      cols: 1
    });
    this.ihBias.randomize();
    this.hoWeights = new _Matrix.Matrix({
      rows: this.oNodes,
      cols: this.hNodes
    });
    this.hoWeights.randomize();
    this.hoBias = new _Matrix.Matrix({
      rows: this.oNodes,
      cols: 1
    });
    this.hoBias.randomize();
    this.lr = this.lr || 0.1;
  }

  feedFoward(inputArray = []) {
    let inputs = inputArray instanceof _Matrix.Matrix ? inputArray : this.prepareInputs(inputArray);

    let hiddens = _Matrix.Matrix.multiply(this.ihWeights, inputs);

    hiddens.add(this.ihBias);
    hiddens.map(sigmoid);

    let outputs = _Matrix.Matrix.multiply(this.hoWeights, hiddens);

    outputs.add(this.hoBias);
    outputs.map(sigmoid);
    return {
      inputs,
      hiddens,
      outputs
    };
  }

  queryBack(targetArray = []) {}

  predict(inputArray = []) {
    return this.feedFoward(inputArray).outputs;
  }

  getWeightsUpdate(inputs = new _Matrix.Matrix(), outputs = new _Matrix.Matrix(), errors = 1) {
    let gradients = _Matrix.Matrix.map(outputs, dSigmoid);

    gradients.multiply(errors);
    gradients.multiply(this.lr);

    let inputsTransposed = _Matrix.Matrix.transpose(inputs);

    let change = _Matrix.Matrix.multiply(gradients, inputsTransposed);

    return {
      change,
      gradients
    };
  }

  backpropagate(inputs = [], targets = new _Matrix.Matrix()) {
    let {
      hiddens,
      outputs
    } = this.feedFoward(inputs);

    let hoErrors = _Matrix.Matrix.subtract(targets, outputs);

    let hoUpdates = this.getWeightsUpdate(hiddens, outputs, hoErrors);
    this.hoWeights.add(hoUpdates.change);
    this.hoBias.add(hoUpdates.gradients);

    let hoWeightsTransposed = _Matrix.Matrix.transpose(this.hoWeights);

    let ihErrors = _Matrix.Matrix.multiply(hoWeightsTransposed, hoErrors);

    let ihUpdates = this.getWeightsUpdate(inputs, hiddens, ihErrors);
    this.ihWeights.add(ihUpdates.change);
    this.ihBias.add(ihUpdates.gradients);
  }

  train(params = {
    trainingData: [],
    period: 1,
    epoch: 1
  }) {
    let inputArray = [],
        targetArray = [];

    for (let data of params.trainingData) {
      inputArray.push(data.inputs);
      targetArray.push(data.targets);
    }

    let inputs = arrayLibrary.each(inputArray, value => {
      return this.prepareInputs(value);
    });
    let targets = arrayLibrary.each(targetArray, value => {
      return this.prepareTargets(value);
    });

    let run = () => {
      for (let i = 0; i < params.period; i++) {
        for (let j in inputs) {
          this.backpropagate(inputs[j], targets[j]);
        }
      }
    };

    if (func.isset(params.epoch)) {
      for (let p = 0; p < params.epoch; p++) {
        run();
      }
    } else {
      run();
    }
  }

  setLearningRate(lr = 0.1) {
    this.lr = lr;
  }

  prepareInputs(inputArray = []) {
    let inputs = _Matrix.Matrix.fromArray(Math.normalize(inputArray));

    inputs.multiply(0.99);
    inputs.add(0.01);
    return inputs;
  }

  prepareTargets(targetArray = []) {
    let targets = _Matrix.Matrix.fromArray(targetArray);

    targets.add(0.01);
    targets.multiply(0.99);
    return targets;
  }

}

exports.NeuralNetwork = NeuralNetwork;

},{"./../functions/Array.js":13,"./Func.js":6,"./Matrix.js":8}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Period = void 0;

var _Func = require("./Func.js");

class Period extends _Func.Func {
  constructor() {
    super();
  }

  trimMonthArray() {
    let months = [];

    for (let i = 0; i < this.months.length; i++) {
      months.push(this.months[i].slice(0, 3));
    }

    return months;
  }

  getYears(count = 5) {
    let year = new Date().getYear() + 1900;
    let fetched = [];

    for (let i = 0; i < count; i++) {
      fetched.push(`${year - 1}-${year}`);
      year++;
    }

    return fetched;
  }

  isTimeValid(time) {
    time = time.split(':');

    if (time.length == 2 || time.length == 3) {
      var hour = new Number(time[0]);
      var minutes = new Number(time[1]);
      var seconds = 0;
      var total = 0;

      if (time.length == 3) {
        seconds = new Number(time[2]);

        if (hour > 23 || hour < 0 || minutes > 59 || minutes < 0 || seconds > 59 || seconds < 0) {
          return false;
        }
      } else {
        if (hour > 23 || hour < 0 || minutes > 59 || minutes < 0) {
          return false;
        }
      }

      var total = hour * 60 * 60 + minutes * 60 + seconds;
      return total;
    }

    return false;
  }

  time(time) {
    let date = this.isset(time) ? new Date(Math.floor(time)) : new Date();
    let hour = date.getHours().toString();
    let minutes = date.getMinutes().toString();
    let seconds = date.getSeconds().toString();
    hour = hour.length > 1 ? hour : `0${hour}`;
    minutes = minutes.length > 1 ? minutes : `0${minutes}`;
    seconds = seconds.length > 1 ? seconds : `0${seconds}`;
    return `${hour}:${minutes}:${seconds}`;
  }

  date(time) {
    let date = this.isset(time) ? new Date(Math.floor(time)) : new Date();
    let day = date.getDate().toString();
    let month = (date.getMonth() + 1).toString();
    let year = date.getFullYear().toString();
    day = day.length > 1 ? day : `0${day}`;
    month = month.length > 1 ? month : `0${month}`;
    return `${year}-${month}-${day}`;
  }

  time_date(time) {
    return `${this.time(time)}, ${this.date(time)}`;
  }

  timeToday() {
    let date = new Date();
    let hour = date.getHours();
    let minutes = date.getMinutes();
    let seconds = date.getSeconds();
    let time = this.isTimeValid(`${hour}:${minutes}:${seconds}`);
    return time ? time : -1;
  }

  isDateValid(value) {
    if (this.isDate(value)) {
      if (this.isYearValid(value)) {
        if (this.isMonthValid(value)) {
          if (this.isDayValid(value)) {
            return true;
          }
        }
      }
    }

    return false;
  }

  isDayValid(value) {
    var v_day = "";

    for (var i = 0; i < 2; i++) {
      v_day += value[i + 8];
    }

    var limit = 0;
    var month = this.isMonthValid(value);

    if (month == '01') {
      limit = 31;
    } else if (month == '02') {
      if (this.isLeapYear(this.isYearValid(value))) {
        limit = 29;
      } else {
        limit = 28;
      }
    } else if (month == '03') {
      limit = 31;
    } else if (month == '04') {
      limit = 30;
    } else if (month == '05') {
      limit = 31;
    } else if (month == '06') {
      limit = 30;
    } else if (month == '07') {
      limit = 31;
    } else if (month == '08') {
      limit = 31;
    } else if (month == '09') {
      limit = 30;
    } else if (month == '10') {
      limit = 31;
    } else if (month == '11') {
      limit = 30;
    } else if (month == '12') {
      limit = 31;
    }

    if (limit < v_day) {
      return 0;
    }

    return v_day;
  }

  isDate(value) {
    var len = value.length;

    if (len == 10) {
      for (var x in value) {
        if (this.isDigit(value[x])) {
          continue;
        } else {
          if (x == 4 || x == 7) {
            if (value[x] == '-') {
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }
      }
    } else {
      return false;
    }

    return true;
  }

  isMonthValid(value) {
    var v_month = "";

    for (var i = 0; i < 2; i++) {
      v_month += value[i + 5];
    }

    if (v_month > 12 || v_month < 1) {
      return 0;
    }

    return v_month;
  }

  isYearValid(value) {
    var year = new Date().getFullYear('Y');
    var v_year = "";

    for (var i = 0; i < 4; i++) {
      v_year += value[i + 0];
    }

    if (v_year > year) {
      return 0;
    }

    return v_year;
  }

  getYear(value) {
    var v_year = "";

    for (var i = 0; i < 4; i++) {
      v_year += value[i + 0];
    }

    return v_year;
  }

  isLeapYear(value) {
    if (value % 4 == 0) {
      if (value % 100 == 0 && value % 400 != 0) {
        return false;
      }

      return true;
    }

    return false;
  }

  daysInMonth(month, year) {
    var days = 0;

    if (month == '01') {
      days = 31;
    } else if (month == '02') {
      if (this.isLeapYear(year)) {
        days = 29;
      } else {
        days = 28;
      }
    } else if (month == '03') {
      days = 31;
    } else if (month == '04') {
      days = 30;
    } else if (month == '05') {
      days = 31;
    } else if (month == '06') {
      days = 30;
    } else if (month == '07') {
      days = 31;
    } else if (month == '08') {
      days = 31;
    } else if (month == '09') {
      days = 30;
    } else if (month == '10') {
      days = 31;
    } else if (month == '11') {
      days = 30;
    } else if (month == '12') {
      days = 31;
    }

    return days;
  }

  dateValue(date) {
    var value = 0;
    var year = this.getYear(date) * 365;
    var month = 0;

    for (var i = 1; i < this.isMonthValid(date); i++) {
      month = this.daysInMonth(i, this.getYear(date)) / 1 + month / 1;
    }

    var day = this.isDayValid(date);
    value = year / 1 + month / 1 + day / 1;
    return value;
  }

  today() {
    var today = new Date();
    var month = today.getMonth() / 1 + 1;

    if (month.length != 2) {
      month = '0' + month;
    }

    today = today.getFullYear() + '-' + month + '-' + today.getDate();
    return today;
  }

  getDateObject(value) {
    let days = Math.floor(value / this.secondsInDays(1));
    value -= this.secondsInDays(days);
    let hours = Math.floor(value / this.secondsInHours(1));
    value -= this.secondsInHours(hours);
    let minutes = Math.floor(value / this.secondsInMinutes(1));
    value -= this.secondsInMinutes(minutes);
    let seconds = value;
    return {
      days,
      hours,
      minutes,
      seconds
    };
  }

  dateWithToday(date) {
    var today = Math.floor(this.dateValue(this.today()));
    let dateValue = Math.floor(this.dateValue(date));
    var value = {
      diff: dateValue - today,
      when: ''
    };

    if (dateValue > today) {
      value.when = 'future';
    } else if (dateValue == today) {
      value.when = 'today';
    } else {
      value.when = 'past';
    }

    return value;
  }

  dateString(date) {
    var year = new Number(this.getYear(date));
    var month = new Number(this.isMonthValid(date));
    var day = new Number(this.isDayValid(date));
    return day + ' ' + this.months[month - 1] + ', ' + year;
  }

  secondsInDays(days) {
    let value = Math.floor(days * 24 * 60 * 60);
    return value;
  }

  secondsInHours(hours) {
    return Math.floor(hours * 60 * 60);
  }

  secondsInMinutes(minutes) {
    return Math.floor(minutes * 60);
  }

  secondsTillDate(date) {
    return this.secondsInDays(Math.floor(this.dateValue(date)));
  }

  secondsTillToday() {
    return this.secondsTillDate(this.today());
  }

  secondsTillNow() {
    return this.secondsTillDate(this.today()) + this.timeToday();
  }

  secondsTillMoment(moment) {
    return this.secondsTillDate(this.date(moment)) + this.isTimeValid(this.time(moment));
  }

  log(...data) {
    let time = `[${this.time()}]:`;
    console.log(time, ...data);
  }

}

exports.Period = Period;

},{"./Func.js":6}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Template = void 0;

var _JSElements = require("./JSElements.js");

class Template extends _JSElements.JSElements {
  constructor() {
    super();
    this.virtual = {};
    this.elementLibrary();
    this.nodeListLibrary();
    this.htmlCollectionLibrary();
    this.nodeLibrary();
  }

  elementLibrary() {
    //Framework with jsdom
    let self = this;

    Element.prototype.changeNodeName = function (name) {
      let structure = this.toJson();
      structure.element = name;
      let element = self.createElement(structure);
      return element;
    };

    Element.prototype.toJson = function () {
      let element = this.nodeName.toLowerCase();
      let attributes = this.getAttributes();
      attributes.style = this.css();
      let children = [];

      for (let i = 0; i < this.children.length; i++) {
        children.push(this.children[i].toJson());
      }

      return {
        element,
        attributes,
        children
      };
    };

    Element.prototype.setOptions = function (options = [], params = {
      selected: ''
    }) {
      params = params || {};

      if (self.isset(params.flag)) {
        this.innerHTML = '';
      }

      for (let i = 0; i < options.length; i++) {
        let text = options[i].text || options[i];
        let value = options[i].value || options[i];
        let option = this.makeElement({
          element: 'option',
          attributes: {
            value
          },
          text
        });

        if (value.toString().toLowerCase() == 'null') {
          option.setAttribute('disabled', true);
        }

        if (self.isset(params.selected) && value == params.selected) {
          option.setAttribute('selected', true);
        }
      }
    };

    Element.prototype.commonAncestor = function (elementA, elementB) {
      for (let ancestorA of elementA.parents()) {
        for (let ancestorB of elementB.parents()) {
          if (ancestorA == ancestorB) return ancestorA;
        }
      }

      return null;
    };

    Element.prototype.onAdded = function (callback = () => {}) {
      this.addEventListener('DOMNodeInsertedIntoDocument', event => {
        callback();
      });
    }; //Store the states of an element here


    Element.prototype.states = {}; //This is a temporary storage for elements attributes

    Element.prototype.temp = {}; //This listens and handles for multiple bubbled events

    Element.prototype.manyBubbledEvents = function (events, callback = () => {}) {
      events = events.split(',');

      for (let event of events) {
        this.bubbledEvent(event.trim(), callback);
      }
    }; //This listens and handles for multiple bubbled events that did not bubble


    Element.prototype.manyNotBubbledEvents = function (events, callback = () => {}) {
      events = events.split(',');

      for (let event of events) {
        this.notBubbledEvent(event.trim(), callback);
      }
    }; //This handles all events that are bubbled within an element and it's children


    Element.prototype.bubbledEvent = function (event, callback = () => {}) {
      //Listen for this event on the entire document
      document.addEventListener(event, event => {
        //if the event bubbles up the element fire the callback
        if (event.target == this || this.isAncestor(event.target)) {
          callback(event);
        }
      });
    }; //This handles all events that are not bubbled within an element and it's children


    Element.prototype.notBubbledEvent = function (event, callback = () => {}) {
      document.addEventListener(event, event => {
        if (!(event.target == this || this.isAncestor(event.target))) {
          callback(event);
        }
      });
    }; //Listen to multiple events at time with a single callback function


    Element.prototype.addMultipleEventListener = function (events, callback = () => {}) {
      events = events.split(',');

      for (let event of events) {
        this.addEventListener(event.trim(), e => {
          callback(e);
        });
      }
    }; //perform actions on mouseenter and mouseleave


    Element.prototype.hover = function (params = {
      css: {},
      do: () => {}
    }) {
      let css = [];
      let cssValues;
      this.addMultipleEventListener('mouseenter', event => {
        cssValues = this.css(); //store the current css values

        if (self.isset(params.css)) {
          //if action is to change the styling
          css = self.array.each(Object.keys(params.css), value => {
            //store the new css style names to remove later
            return self.cssStyleName(value);
          });
          this.css(params.css); //set the css styles
        }

        if (self.isfunction(params.do)) {
          // if action is to perform do
          params.do(event);
        }
      });
      this.addMultipleEventListener('mouseleave', event => {
        if (self.isset(params.css)) {
          //if action was to change the styling
          this.cssRemove(css); //remove the new styling

          this.css(cssValues); //set the old ones
        }
      });
    }; //a shorter name for querySelector


    Element.prototype.find = function (name = '', position = 0) {
      let element = null;

      if (self.isset(position)) {
        //get the all the elements found and return the one at this particular position
        this.querySelectorAll(name).forEach((e, p) => {
          if (position == p) element = e;
        });
      } else {
        element = this.querySelector(name);
      }

      return element;
    }; //a shorter name for querySelectorAll


    Element.prototype.findAll = function (name = '') {
      return this.querySelectorAll(name);
    }; //perform an extended querySelection on this element


    Element.prototype.search = function (name = '', options = {
      attributes: {},
      id: '',
      nodeName: '',
      class: '',
      classes: ''
    }, position = 0) {
      let element = null;
      let foundElements = []; //all the elements meeting the requirements

      if (self.isset(options)) {
        //if the options to check is set
        let allElements = this.querySelectorAll(name); //get all the possible elements
        //loop through them and check if the match the options

        for (let i = 0; i < allElements.length; i++) {
          element = allElements[i]; //check for the attributes

          if (self.isset(options.attributes)) {
            for (let attr in options.attributes) {
              // check all the attributes one after the other
              if (element.getAttribute(attr) != options.attributes[attr]) {
                element = null;
                continue;
              }
            } //if this element is no long valid skip it


            if (self.isnull(element)) continue;
          } //check for the ID


          if (self.isset(options.id) && options.id != element.id) {
            element = null;
            continue;
          } //check for the class


          if (self.isset(options.class) && !element.classList.contains(options.class)) {
            element = null;
            continue;
          } //check for the classes


          if (self.isset(options.classes) && !element.hasClasses(options.classes)) {
            element = null;
            continue;
          } //check for the nodename


          if (self.isset(options.nodeName) && element.nodeName.toLowerCase() != options.nodeName) {
            element = null;
            continue;
          } //check if to return for a particular position


          if (position <= 0) return element;
          foundElements.push(element);
        } //get the element at the specified position


        if (foundElements.length && self.isset(foundElements[position])) {
          element = foundElements[position];
        } else {
          element = null;
        }
      } else {
        element = this.find(name);
      }

      return element;
    }; //perform search for all the elements that meet a requirement


    Element.prototype.searchAll = function (name = '', options = {
      attributes: {},
      id: '',
      nodeName: '',
      class: '',
      classes: ''
    }) {
      if (self.isset(options)) {
        let allElements = this.querySelectorAll(name);
        let elements = [];

        for (let i = 0; i < allElements.length; i++) {
          let element = allElements[i];

          if (self.isset(options.attributes)) {
            for (let attr in options.attributes) {
              if (element.getAttribute(attr) != options.attributes[attr]) {
                element = null;
                continue;
              }
            }
          }

          if (self.isset(options.id) && options.id != element.id) {
            element = null;
            continue;
          }

          if (self.isset(options.class) && !element.classList.contains(options.class)) {
            element = null;
            continue;
          }

          if (self.isset(options.classes) && !element.hasClasses(options.classes)) {
            element = null;
            continue;
          }

          if (self.isset(options.nodeName) && element.nodeName.toLowerCase() != options.nodeName) {
            element = null;
            continue;
          }

          if (!self.isnull(element)) {
            elements.push(element);
          }
        }

        return elements;
      }

      return this.querySelectorAll(name);
    }; //look for multiple single elements at a time


    Element.prototype.fetch = function (names = [], position = 0) {
      let elements = {};

      for (let name of names) {
        elements[name] = this.find(name, position);
      }

      return elements;
    }; //look for multiple nodelists at a time


    Element.prototype.fetchAll = function (names = []) {
      let elements = {};

      for (let name of names) {
        elements[name] = this.findAll(name);
      }

      return elements;
    }; //Get the nodes between two child elements


    Element.prototype.nodesBetween = function (elementA, elementB) {
      let inBetweenNodes = [];

      for (let child of Array.from(this.children)) {
        //get all the children
        //check if the two elements are children of this element
        if (child == elementA || child == elementB || child.isAncestor(elementA) || child.isAncestor(elementB)) {
          inBetweenNodes.push(child);
        }
      }

      return inBetweenNodes;
    }; //Get if element is child of an element


    Element.prototype.isAncestor = function (child) {
      let parents = child.parents(); //Get all the parents of child

      return parents.includes(this);
    }; //Get all the parents of an element until document


    Element.prototype.parents = function () {
      let parents = [];
      let currentParent = this.parentNode;

      while (currentParent != null) {
        parents.push(currentParent);
        currentParent = currentParent.parentNode;
      }

      return parents;
    };

    Element.prototype.customParents = function () {
      let parents = this.parents();
      let customParents = [];

      for (let i = 0; i < parents.length; i++) {
        if (parents[i].nodeName.includes('-')) {
          customParents.push(parents[i]);
        }
      }

      return customParents;
    }; //Remove a state from an element


    Element.prototype.removeState = function (params = {
      name: ''
    }) {
      let state = this.getState(params); //get the state (element)

      if (self.isset(state) && self.isset(params.force)) {
        //if state exists and should be deleted
        if (self.isset(state.dataset.domKey)) {
          delete self.virtual[state.dataset.domKey]; //delete the element from virtual dom
        }

        state.remove(); //remove the element from dom
      }

      this.removeAttribute(`data-${params.name}`); //remove the state from element
    }; //Get an element's state 


    Element.prototype.getState = function (params = {
      name: ''
    }) {
      let state = null;
      let stateName; //get the state name

      if (typeof params == 'string') {
        stateName = params;
      } else if (self.isset(this.dataset[`${params.name}`])) {
        stateName = params.name;
      }

      if (self.isset(stateName)) {
        //get the state
        state = self.virtual[this.dataset[stateName]]; // let state = self.objectToArray(this.states[stateName]).pop();
      }

      return state;
    }; //add a state to an element


    Element.prototype.addState = function (params = {
      name: ''
    }) {
      //make sure the state has a domkey
      if (!self.isset(params.state.dataset.domKey)) {
        params.state.setKey();
      } //add the state to the elements dataset


      this.dataset[params.name] = params.state.dataset.domKey;
      this.states[params.name] = {}; //initialize the state

      return this;
    }; //set the state of an element


    Element.prototype.setState = function (params = {
      name: '',
      attributes: {},
      render: {},
      children: [],
      text: '',
      html: '',
      value: '',
      options: []
    }) {
      let state = this.getState(params); // let found = this.states[params.name][JSON.stringify(params)];
      // if (self.isset(found)) {
      //     state.innerHTML = found.innerHTML;
      //     state.setAttributes(found.getAttributes());
      // }
      // else {
      //     state.setAttributes(params.attributes);
      //     if (self.isset(params.children)) {//add the children if set
      //         state.makeElement(params.children);
      //     }
      //     if (self.isset(params.render)) {//add the children if set
      //         state.render(params.render);
      //     }
      //     if (self.isset(params.text)) state.textContent = params.text;//set the innerText
      //     if (self.isset(params.value)) state.value = params.value;//set the value
      //     if (self.isset(params.options)) {//add options if isset
      //         for (var i of params.options) {
      //             state.makeElement({ element: 'option', value: i, text: i, attachment: 'append' });
      //         }
      //     }
      //     this.states[params.name][JSON.stringify(params)] = state.cloneNode(true);
      // }

      state.setAttributes(params.attributes);

      if (self.isset(params.children)) {
        //add the children if set
        state.makeElement(params.children);
      }

      if (self.isset(params.render)) {
        //add the children if set
        state.render(params.render);
      }

      if (self.isset(params.text)) state.textContent = params.text; //set the innerText

      if (self.isset(params.html)) state.innerHTML = params.html; //set the innerText

      if (self.isset(params.value)) state.value = params.value; //set the value

      if (self.isset(params.options)) {
        //add options if isset
        for (var i of params.options) {
          state.makeElement({
            element: 'option',
            value: i,
            text: i,
            attachment: 'append'
          });
        }
      }

      this.states[params.name][JSON.stringify(params)] = state.cloneNode(true);
      return state;
    }; //async version of setstate


    Element.prototype.setKeyAsync = async function () {
      return await this.setKey();
    }; //set element's dom key for the virtual dom


    Element.prototype.setKey = function () {
      let key = Date.now().toString(36) + Math.random().toString(36).slice(2); //generate the key

      if (!self.isset(this.dataset.domKey)) {
        //does this element have a key
        this.dataset.domKey = key;
      } else {
        key = this.dataset.domKey;
      }

      self.virtual[key] = this; //add it to the virtual dom

      return key;
    }; //drop down a child


    Element.prototype.dropDown = function (element) {
      let parentContent = this.cloneNode(true);
      this.innerHTML = '';
      this.append(parentContent);
      parentContent.css({
        boxShadow: '1px 1px 1px 1px #aaaaaa'
      });
      this.css({
        boxShadow: '0.5px 0.5px 0.5px 0.5px #cccccc'
      });
      let dropContainer = this.makeElement({
        element: 'div',
        attributes: {
          class: 'drop-down'
        }
      });
      dropContainer.append(element);

      this.removeDropDown = () => {
        dropContainer.remove();
        parentContent.css({
          boxShadow: 'unset'
        });
        this.innerHTML = parentContent.innerHTML;
      };

      return this;
    }; //stop monitoring this element for changes


    Element.prototype.stopMonitor = function () {
      if (this.observe) this.observer.disconnect(); //disconnect observer

      return this;
    }; //Check if an attribute has changed in this element


    Element.prototype.onAttributeChange = function (attribute = '', callback = () => {}) {
      this.addEventListener('attributesChanged', event => {
        if (event.detail.attributeName == attribute) {
          callback(event);
        }
      });
    }; // monitor this element for changes


    Element.prototype.monitor = function (config = {
      attributes: true,
      childList: true,
      subtree: true
    }) {
      this.observer = new MutationObserver((mutationList, observer) => {
        if (mutationList.length) this.dispatchEvent(new CustomEvent('mutated')); //fire mutated event for it

        for (let mutation of mutationList) {
          if (mutation.type == 'childList') {
            //if the change was a child fire childlistchanged event
            this.dispatchEvent(new CustomEvent('childListchanged', {
              detail: mutation
            }));
          } else if (mutation.type == 'attributes') {
            //if the change was a child fire childlistchanged event
            this.dispatchEvent(new CustomEvent('attributesChanged', {
              detail: mutation
            }));
          } else if (mutation.type == 'characterData') {
            //if the change was a child fire childlistchanged event
            this.dispatchEvent(new CustomEvent('characterDataChanged', {
              detail: mutation
            }));
          }
        }
      });
      this.observer.observe(this, config);
      return this;
    };

    Element.prototype['checkChanges'] = function (callback = () => {}) {
      this.monitor();
      this.addEventListener('mutated', event => {
        callback(event);
      });
    }; // check when the value of an element is changed


    Element.prototype.onChanged = function (callBack = () => {}) {
      let value = this.getAttribute('value');

      let updateMe = event => {
        // if element is input element
        if (event.target.nodeName == 'INPUT') {
          if (event.target.type == 'date') {
            // if the type is date, check if the date is valid then update the attribute
            if (this.isDate(this.value)) this.setAttribute('value', this.value);
          } else if (event.target.type == 'time') {
            // if the type is time, check if the time is valid then update the attribute
            if (this.isTimeValid(this.value)) this.setAttribute('value', this.value);
          } else if (event.target.type == 'file') {
            let fileName = event.target.value;
            let file = event.target.files[0];

            if (file.type.indexOf('image') == 0) {
              self.imageToJson(file, callBack);
            }
          } else {
            this.setAttribute('value', this.value); //update the attribute
          }
        } else if (event.target.nodeName == 'SELECT') {
          // if the element is select
          for (let i = 0; i < event.target.options.length; i++) {
            //update the selected option using the selected index
            if (i == event.target.selectedIndex) {
              event.target.options[i].setAttribute('selected', true);
            } else {
              event.target.options[i].removeAttribute('selected');
            }
          }
        } else if (event.target.nodeName == 'DATA-ELEMENT') {
          this.setAttribute('value', this.value);
        } else if (event.target.nodeName == 'SELECT-ELEMENT') {
          this.setAttribute('value', this.value);
        } else {
          this.value = this.textContent;
        }

        if (self.isset(callBack) && event.target.type != 'file') {
          callBack(this.value, event); //fire the callback function
        }
      }; // if change is caused by keyboard


      this.addEventListener('keyup', event => {
        updateMe(event);
      }); // if change is caused programatically

      this.addEventListener('change', event => {
        updateMe(event);
      });
    }; //render the contents of an element


    Element.prototype.render = function (params = {
      element: '',
      attributes: {}
    }, except) {
      if (self.isset(except)) this.removeChildren(except); //remove the contents of the element with exceptions
      else this.removeChildren();
      this.makeElement(params); //append the new contents of the element
    }; //Get all the styles for the ID, the classes and the element


    Element.prototype.getAllCssProperties = function () {
      let styleSheets = Array.from(document.styleSheets),
          //get all the css styles files and rules
      cssRules,
          id = this.id,
          nodeName = this.nodeName,
          classList = Array.from(this.classList),
          properties = {},
          selectorText;

      for (var i in classList) classList[i] = `.${classList[i]}`; //turn each class to css class format [.class]


      for (var i = 0; i < styleSheets.length; i++) {
        //loop through all the css rules in document/app
        cssRules = styleSheets[i].cssRules;

        for (var j = 0; j < cssRules.length; j++) {
          selectorText = cssRules[j].selectorText; //for each selector text check if element has it as a css property

          if (selectorText == `#${id}` || selectorText == nodeName || classList.indexOf(selectorText) != -1) {
            properties[selectorText] = {};
            let style = cssRules[j].style;

            for (let n in style) {
              if (style[n] !== '') [properties[selectorText][n] = style[n]];
            }
          }
        }
      } //if element has property add it to css property


      properties['style'] = this.css();
      return properties;
    }; //Get the values of property 


    Element.prototype.getCssProperties = function (property = '') {
      let allProperties = this.getAllCssProperties();
      let properties = {};

      for (let name in allProperties) {
        properties[name] = {};

        for (let p in allProperties[name]) {
          if (property == p) properties[name][p] = allProperties[name][p];
        }
      }

      return properties;
    }; // Check if this element has this property


    Element.prototype.hasCssProperty = function (property = '') {
      var properties = this.getCssProperties(property); //get elements css properties

      for (var i in properties) {
        //loop through json object
        if (self.isset(properties[i]) && properties[i] != '') {
          return true; // if property is found return true
        }
      }

      return false;
    }; //Get the most relavant value for the property


    Element.prototype.cssPropertyValue = function (property = '') {
      //check for the value of a property of an element
      var properties = this.getCssProperties(property),
          id = this.id,
          classList = Array.from(this.classList);
      if (self.isset(properties['style']) && properties['style'] != '') return properties['style']; //check if style rule has the propert and return it's value

      if (self.isset(id) && self.isset(properties[`#${id}`]) && properties[`#${id}`] != '') return properties[`#${id}`]; //check if element id rule has the propert and return it's value

      for (var i of classList) {
        //check if any class rule has the propert and return it's value
        if (self.isset(properties[`.${i}`]) && properties[`.${i}`] != '') return properties[`.${i}`];
      } //check if node rule has the propert and return it's value


      if (self.isset(properties[this.nodeName]) && properties[this.nodeName] != '') return properties[this.nodeName];
      return '';
    }; // Get and Set the css values


    Element.prototype.css = function (styles = {}) {
      // set css style of element using json
      if (self.isset(styles)) {
        Object.keys(styles).map(key => {
          this.style[key] = styles[key];
        });
      }

      return self.extractCSS(this);
    }; // Remove a css property


    Element.prototype.cssRemove = function (styles = []) {
      //remove a group of properties from elements style
      if (Array.isArray(styles)) {
        for (var i of styles) {
          this.style.removeProperty(i);
        }
      } else {
        this.style.removeProperty(styles);
      }

      return this.css();
    }; // Toggle a child element


    Element.prototype.toggleChild = function (child) {
      //Add child if element does not have a child else remove the child form the element
      var name,
          _classes,
          id,
          found = false;

      console.log(child);
      this.children.forEach(node => {
        name = node.nodeName;
        _classes = node.classList;
        id = node.id;

        if (name == child.nodeName && id == child.id && _classes.toString() == child.classList.toString()) {
          node.remove();
          found = true;
        }
      });
      if (!found) this.append(child);
    }; //remove all classes except some


    Element.prototype.clearClasses = function (except = '') {
      except = except.split(',');

      for (let j in except) {
        except[j] = except[j].trim();
      }

      for (let i of this.classList) {
        if (self.isset(except) && except.includes(i)) continue;
        this.classList.remove(i);
      }
    }; //remove classes


    Element.prototype.removeClasses = function (classes = '') {
      classes = classes.split(',');

      for (let i of classes) {
        i = i.trim();

        if (i != '') {
          this.classList.remove(i);
        }
      }
    }; //add classes


    Element.prototype.addClasses = function (classes = '') {
      classes = classes.split(',');

      for (let i of classes) {
        i = i.trim();

        if (i != '') {
          this.classList.add(i);
        }
      }
    }; //toggle classes


    Element.prototype.toggleClasses = function (classes = '') {
      classes = classes.split(',');

      for (let i of classes) {
        i = i.trim();

        if (i != '') {
          this.classList.toggle(i);
        }
      }
    }; // Remove a class from element classlist


    Element.prototype.removeClass = function (_class = '') {
      this.classList.remove(_class);
      return this;
    }; // Check if element classlist contains a group of classes


    Element.prototype.hasClasses = function (classList = []) {
      for (let mClass of classList) {
        if (!this.classList.contains(mClass)) return false;
      }

      return true;
    }; // add a class to element classlist


    Element.prototype.addClass = function (_class = '') {
      this.classList.add(_class);
      return this;
    }; // toggle a class in element classlist


    Element.prototype.toggleClass = function (_class = '') {
      // (this.classList.contains(_class)) ? this.classList.remove(_class) : this.classList.add(_class);
      this.classList.toggle(_class);
      return this;
    }; //Get the position of element in dom


    Element.prototype.position = function (params = {}) {
      if (self.isset(params)) {
        Object.keys(params).map(key => {
          params[key] = new String(params[key]).slice(params[key].length - 2) == 'px' ? params[key] : `${params[key]}px`;
        });
        this.css(params);
      }

      let position = this.getBoundingClientRect();
      return position;
    }; //check if element is within container


    Element.prototype.inView = function (parentIdentifier = '') {
      let parent = this.getParents(parentIdentifier);
      let top = this.position().top;
      let flag = false;

      if (!self.isnull(parent)) {
        flag = top >= 0 && top <= parent.clientHeight;
      }

      return flag;
    }; //Check if a class exists in element's classlist


    Element.prototype.hasClass = function (_class = '') {
      return this.classList.contains(_class);
    }; // Set a list of properties for an element


    Element.prototype.setProperties = function (properties = {}) {
      for (let i in properties) {
        this[i] = properties[i];
      }
    }; // Set a list of attributes for an element


    Element.prototype.setAttributes = function (attributes = {}) {
      for (let i in attributes) {
        if (i == 'style') {
          this.css(attributes[i]);
        } else {
          this.setAttribute(i, attributes[i]);
        }
      }
    }; // Get the values of a list of attributes


    Element.prototype.getAttributes = function (names = []) {
      if (names.length == 0) names = this.getAttributeNames();
      let attributes = {};

      for (let name of names) {
        attributes[name] = this.getAttribute(name);
      }

      return attributes;
    }; //Create and attatch an element in an element


    Element.prototype.makeElement = function (params = {
      element: '',
      attributes: {}
    }) {
      this.setKeyAsync();
      let element = self.createElement(params, this);
      return element;
    }; // Get an elements ancestor with a specific attribute


    Element.prototype.getParents = function (name = '', value = '') {
      var attribute = name.slice(0, 1);
      var parent = this.parentNode;

      if (attribute == '.') {
        while (parent) {
          if (self.isset(parent.classList) && parent.classList.contains(name.slice(1))) {
            break;
          }

          parent = parent.parentNode;
        }
      } else if (attribute == '#') {
        while (parent) {
          if (self.isset(parent.id) && parent.id == name.slice(1)) {
            break;
          }

          parent = parent.parentNode;
        }
      } else {
        while (parent) {
          if (self.isset(parent.nodeName) && parent.nodeName.toLowerCase() == name.toLowerCase()) {
            break;
          } else if (self.isset(parent.hasAttribute) && parent.hasAttribute(name)) {
            if (self.isset(value) && parent.getAttribute(name) == value) {
              break;
            } else break;
          }

          parent = parent.parentNode;
        }
      }

      return parent;
    }; // Toggle the display of an element


    Element.prototype.toggle = function () {
      if (this.style.display == 'none' || this.style.visibility == 'hidden') this.show();else this.hide();
    }; //Hide an element in dom


    Element.prototype.hide = function () {
      // if (self.isset(this.style.display)) this.temp.display = this.style.display;
      // if (self.isset(this.style.visibility)) this.temp.visibility = this.style.visibility;
      this.style.display = 'none'; // this.style.visibility = 'hidden';

      return this;
    }; //Show an element in dom


    Element.prototype.show = function () {
      // if (this.style.display == 'none') {
      //     // if (self.isset(this.temp.display)) {
      //     //     this.css({ display: this.temp.display });
      //     // }
      //     // else this.cssRemove(['display']);
      // }
      this.cssRemove(['display']);
      return this;
    }; //Remove all the children of an element with exceptions of some


    Element.prototype.removeChildren = function (params = {
      except: []
    }) {
      let exceptions = [];
      params = params || {};
      params.except = params.except || [];
      let except = params.except;

      for (let i = 0; i < except.length; i++) {
        let all = this.findAll(except[i]);

        for (let j = 0; j < all.length; j++) {
          if (!exceptions.includes(all[j])) exceptions.push(all[j]);
        }
      }

      this.children.forEach(node => {
        if (!exceptions.includes(node)) node.remove();
      });
      return this;
    }; //Delete an element from the dom and virtual dom


    Element.prototype.delete = function () {
      if (self.isset(this.dataset.domKey)) {
        delete self.virtual[this.dataset.domKey];
      }

      this.remove();
    }; //Delete an elements child from the dom and the virtual dom


    Element.prototype.deleteChild = function (child) {
      child.delete();
      return this;
    }; // Toggle a list of children of an element


    Element.prototype.toggleChildren = function (params = {
      name: '',
      class: '',
      id: ''
    }) {
      Array.from(this.children).forEach(node => {
        if (!(self.isset(params.name) && params.name == node.nodeName || self.isset(params.class) && self.hasArrayElement(Array.from(node.classList), params.class.split(' ')) || self.isset(params.id) && params.id == node.id)) {
          node.toggle();
        } else {
          node.toggle();
        }
      });
    }; // Attatch an element to another element [append or prepend]


    Element.prototype.attachElement = function (element, attachment = 'append') {
      this[attachment](element);
    };

    Element.prototype.pressed = function (callback = () => {}) {
      let startTime = 0,
          endTime = 0;
      this.addMultipleEventListener('mousedown, touchstart', event => {
        startTime = event.timeStamp;
      });
      this.addMultipleEventListener('mouseup, touchend', event => {
        endTime = event.timeStamp;
        event.duration = endTime - startTime;
        callback(event);
      });
    };
  }

  htmlCollectionLibrary() {
    let self = this;

    HTMLCollection.prototype.popIndex = function (position = 0) {
      let collection = self.createElement({
        element: 'sample'
      }).children;
      let list = Array.from(this);

      for (let i = 0; i < list.length; i++) {
        if (i == position) continue;
        collection[i] = this.item(i);
        console.log(collection);
      }

      return collection;
    };

    HTMLCollection.prototype.forEach = function (callback = () => {}) {
      let list = Array.from(this);

      for (let i = 0; i < list.length; i++) {
        callback(list[i], i);
      }
    };

    HTMLCollection.prototype.each = function (callback = () => {}) {
      let list = Array.from(this);

      for (let i = 0; i < list.length; i++) {
        callback(list[i], i);
      }
    };

    HTMLCollection.prototype['indexOf'] = function (element) {
      let list = Array.from(this);

      for (let i in list) {
        if (list == element) return i;
      }

      return -1;
    };

    HTMLCollection.prototype['includes'] = function (element) {
      return this.indexOf(element) != -1;
    };

    HTMLCollection.prototype['nodesBetween'] = function (elementA, elementB) {
      let inBetweenNodes = [];
      let list = Array.from(this);

      for (let aParent of list) {
        if (aParent == elementA || aParent == elementB || aParent.isAncestor(elementA) || aParent.isAncestor(elementB)) {
          inBetweenNodes.push(aParent);
        }
      }

      return inBetweenNodes;
    };
  }

  nodeLibrary() {
    let self = this;
    Node.prototype.states = {};
  }

  nodeListLibrary() {
    let self = this;

    NodeList.prototype['each'] = function (callback = () => {}) {
      for (let i = 0; i < this.length; i++) {
        callback(this[i], i);
      }
    };

    NodeList.prototype['indexOf'] = function (element) {
      for (let i in this) {
        if (this[i] == element) return i;
      }

      return -1;
    };

    NodeList.prototype['includes'] = function (element) {
      return this.indexOf(element) != -1;
    };

    NodeList.prototype['nodesBetween'] = function (elementA, elementB) {
      let inBetweenNodes = [];

      for (let aParent of this) {
        if (aParent == elementA || aParent == elementB || aParent.isAncestor(elementA) || aParent.isAncestor(elementB)) {
          inBetweenNodes.push(aParent);
        }
      }

      return inBetweenNodes;
    };
  }

}

exports.Template = Template;

},{"./JSElements.js":7}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnalysisLibrary = AnalysisLibrary;

var _Math = require("./Math.js");

var _Objects = require("./Objects.js");

let mathLibrary = (0, _Math.MathsLibrary)();
let objectLibrary = (0, _Objects.ObjectLibrary)();

function AnalysisLibrary() {
  let self = {};

  self.entropy = data => {
    let entropy = 0; //initialize entropy

    let values = Object.values(data); //get the values of the object variable

    let sum = mathLibrary.sum(values); //get the sum of the Values

    for (let value of values) {
      entropy -= value / sum * Math.log2(value / sum); //use the formular on each item
    }

    return entropy;
  };

  self.informationGain = (targetNode, variableData) => {
    let arrangeData = list => {
      //arrange the list into an object of counts
      let data = {};

      for (let item of list) {
        data[item] = data[item] || 0;
        data[item]++;
      }

      return data;
    };

    let targetData = arrangeData(targetNode);
    let targetEntropy = self.entropy(targetData); //get the entropy of the target node

    let sumOfInformation = 0; //initialize sum of information gain

    let variableValues = Object.values(variableData); //get the values of this variable

    let variableLength = 0;

    for (let i = 0; i < variableValues.length; i++) {
      //get the length of the variable by the adding the values
      variableLength += variableValues[i].length;
      variableValues[i] = arrangeData(variableValues[i]);
    }

    for (let v of variableValues) {
      //get the entropy of each and multiply by the probability
      sumOfInformation += mathLibrary.sum(Object.values(v)) / variableLength * self.entropy(v);
    }

    let informationGain = targetEntropy - sumOfInformation;
    return informationGain;
  };

  self.highestInformationGainNode = (data, nodes) => {
    let gainedInformation = {};

    for (let i in nodes) {
      gainedInformation[i] = self.informationGain(data, nodes[i]);
    }

    return objectLibrary.max(gainedInformation);
  };

  self.quartileRange = data => {
    let middle = _dt => {
      //get the middle position of a list of numbers
      let middle;

      if (_dt.length % 2 == 0) {
        //if the list count is not even
        middle = [Math.ceil(_dt.length / 2) - 1, Math.ceil(_dt.length / 2)]; //get the two in the middle
      } else {
        middle = [Math.ceil(_dt.length / 2) - 1];
      }

      return middle;
    };

    let getMiddle = _dt => {
      // get the items in the middle of a list
      let [middle1, middle2] = middle(_dt);
      let middles = [];
      middles.push(_dt[middle1]);
      if (middle2 != undefined) middles.push(_dt[middle2]);
      return middles;
    };

    let halfs = _dt => {
      //divide a list into two equal halfs
      let [middle1, middle2] = middle(_dt);
      if (middle2 == undefined) middle2 = middle1;

      let half1 = _dt.slice(0, middle1);

      let half2 = _dt.slice(middle2 + 1);

      return [half1, half2];
    };

    let layers = halfs(data); //get the halfs of the list

    let [layer1, layer2] = halfs(layers[0]); //divide each half into halfs

    let [layer3, layer4] = halfs(layers[1]);
    let middle1 = getMiddle(layers[0]); //get the middle of the first layers

    let middle3 = getMiddle(layers[1]);
    let q1 = mathLibrary.median(middle1); //get the median of the first and last layers

    let q3 = mathLibrary.median(middle3);
    return q3 - q1; //find the range
  };

  self.normalizeData = data => {
    data.sort((a, b) => {
      return a - b;
    });
    var max = data[data.length - 1];
    var min = data[0];
    var normalized = [];

    for (var i = 0; i < data.length; i++) {
      normalized.push((data[i] - min) / (max - min));
    }

    return normalized;
  };

  return self;
}

},{"./Math.js":15,"./Objects.js":16}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrayLibrary = ArrayLibrary;

function ArrayLibrary() {
  let self = {};

  self.combine = (haystack, first, second, pos) => {
    //used to get what is between two items at a particular occurrance in an Array and the items combined
    pos = pos || 0; //initialize position if not set

    let at1 = pos,
        at2 = first === second ? pos + 1 : pos; //check if it is the same and change position

    let start = self.indexAt(haystack, first, at1); //get the start

    let end = self.indexAt(haystack, second, at2) + 1; //get the end

    if (start == -1 || end == 0) {
      //null if one is not found
      return null;
    }

    return haystack.slice(start, end);
  };

  self.inBetween = (haystack, first, second, pos) => {
    //used to get what is between two items at a particular occurrance in an Array
    pos = pos || 0; //initialize position if not set

    let at1 = pos,
        at2 = first === second ? pos + 1 : pos; //check if it is the same and change position

    let start = self.indexAt(haystack, first, at1) + 1; //get the start

    let end = self.indexAt(haystack, second, at2); //get the end

    if (start == 0 || end == -1) {
      //null if one is not found
      return null;
    }

    return haystack.slice(start, end);
  };

  self.contains = (haystack, needle) => {
    //used to check if an Array has an item
    let flag = false; //set flag to false

    for (let i in haystack) {
      if (haystack[i] == needle) {
        //if found breakout
        return true;
      }
    }

    return flag;
  };

  self.indexAt = (haystack, needle, pos) => {
    //used to get the index of an item at a particular occurrance
    pos = pos || 0;
    let count = -1;

    for (let i = 0; i < haystack.length; i++) {
      if (haystack[i] == needle) {
        count++;

        if (count == pos) {
          return i;
        }
      }
    }

    return -1;
  };

  self.find = (haystack, callback) => {
    //used as a higher order function to get an items that match the conditions
    for (let i in haystack) {
      if (callback(haystack[i]) == true) {
        return haystack[i];
      }
    }
  };

  self.findAll = (haystack, callback) => {
    //used as a higher order function to get all the items that match the conditions
    let values = [];

    for (let i in haystack) {
      if (callback(haystack[i]) == true) {
        values.push(haystack[i]);
      }
    }

    return values;
  };

  self.getObject = (haystack, key, value) => {
    //used to get an Object with an Item in a JsonArray
    let object;

    for (let i in haystack) {
      if (haystack[i][key] == value) object = haystack[i];
    }

    return object;
  };

  self.getAllObjects = (haystack, key, value) => {
    //used to get all occurrances of an Object with an Item in a JsonArray
    let newArray = [];

    for (let i in haystack) {
      if (haystack[i][key] == value) {
        newArray.push(haystack[i]);
      }
    }

    return newArray;
  };

  self.getAll = (haystack, needle) => {
    //used to all occurrances of an item in an Array
    let newArray = [];

    for (let i in haystack) {
      if (haystack[i] == needle) newArray.push(i);
    }

    return newArray;
  };

  self.removeAll = (haystack, needle) => {
    //used to remove instances of an item
    let newArray = [];

    for (let i of haystack) {
      if (i != needle) {
        newArray.push(i);
      }
    }

    return newArray;
  };

  self.putAt = (haystack = [], value, key = 0) => {
    //used to push an item into an index in Array
    let newArray = []; //storage

    for (let i in haystack) {
      if (i == key) {
        //matched
        newArray[i] = value; //push in the value

        let next = Math.floor(key); //check if it's a number

        if (isNaN(next)) {
          next = key + 1;
        } else {
          next++;
        }

        newArray[next] = haystack[i]; //add the previous value
      } else {
        newArray[i] = haystack[i];
      }
    }

    return newArray;
  };

  self.pushArray = (haystack = [], needle, insert) => {
    //used to push in an item before another existing item in an Array
    let position = self.arrayIndex(haystack, needle); //get the existing item position

    let newArray = self.putAt(haystack, insert, position); //push in new item

    return newArray;
  };

  self.arrayIndex = (haystack = [], needle = []) => {
    //used to get position of an item in an Array
    for (let i in haystack) {
      if (JSON.stringify(haystack[i]) == JSON.stringify(needle)) {
        return i;
      }
    }

    return -1;
  };

  self.hasArray = (haystack = [], needle = []) => {
    //used to check if an Array is a sub-Array to another Array
    haystack = JSON.stringify(haystack);
    needle = JSON.stringify(needle);
    return haystack.indexOf(needle) != -1;
  };

  self.toObject = (array = [], key) => {
    //used to turn an JsonArray to an Object literal
    let object = {}; //storage

    for (let i in array) {
      object[array[i][key]] = array[i]; //store the intended [key, value]

      delete object[array[i][key]][key]; //remove the key in the value
    }

    return object;
  };

  self.reshape = params => {//used to change the shape of an Array
    // Pending
  };

  self.randomPick = array => {
    //used to pick a random item from an Array
    return array[Math.floor(Math.random() * array.length)];
  };

  self.removeEmpty = (array = []) => {
    //used to truncate an Array
    let newArray = []; //storage

    for (let i in array) {
      if (Array.isArray(array[i]) && array[i].length > 0) {
        //if array go deep
        newArray.push(self.removeEmpty(array[i]));
      } else if (array[i] != undefined && array[i] != null && array[i] != 0 && array[i] != '') {
        //skip [undefined, null, 0, '']
        newArray.push(array[i]);
      }
    }

    return newArray;
  };

  self.each = (array = [], callback = () => {}) => {
    //used as a higher order Array function
    let newArray = []; //storage

    for (let i in array) {
      newArray.push(callback(array[i], i)); //make changes to the item and store it.
    }

    return newArray;
  };

  self.hasArrayElement = (haystack = [], needle = []) => {
    //used to check if two arrays has an item in common
    let flag = false;

    for (let i in needle) {
      if (haystack.indexOf(needle[i]) != -1) {
        return true;
      }
    }

    return flag;
  };

  self.toSet = (haystack = []) => {
    //used to turn an Array into a set(Make sure there a no duplicates)
    let single = []; //storage

    for (let i in haystack) {
      //skip if already stored
      if (single.indexOf(haystack[i]) == -1) {
        single.push(haystack[i]);
      }
    }

    return single;
  };

  self.popIndex = (array = [], index) => {
    //used to remove an item at a position in an Array
    let newArray = []; //storage Array

    for (let i in array) {
      if (i != index) {
        //skip the position
        newArray.push(array[i]);
      }
    }

    return newArray;
  };

  self.dataType = (array = []) => {
    //used to get the datatypes inside an Array
    let type = typeof array[0]; //get the indext type

    for (let i in array) {
      if (typeof array[i] != type) {
        //if two types do not match return mixed
        return 'mixed';
      }
    }

    return type;
  };

  return self;
}

},{}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Compression = Compression;

var _Array = require("./Array.js");

var _Math = require("./Math.js");

var _Objects = require("./Objects.js");

let arrayLibrary = (0, _Array.ArrayLibrary)();
let mathLibrary = (0, _Math.MathsLibrary)();
let objectLibrary = (0, _Objects.ObjectLibrary)(); // import { Tree } from '../classes/Tree.js';

function Compression() {
  const self = {};

  self.getFrequency = (data = []) => {
    //get the occurrance of symbols in a list
    const frequency = {};

    for (let d in data) {
      if (frequency[data[d]] == undefined) {
        frequency[data[d]] = 1;
      } else {
        frequency[data[d]]++;
      }
    }

    return frequency;
  };

  self.getProbabilities = (data = []) => {
    //get the probabilities of all symbols in a list
    let probs = self.getFrequency(data);

    for (let i in probs) {
      probs[i] = probs[i] / data.length;
    }

    return probs;
  };

  self.entropy = (data = []) => {
    //this shows the shortest possible average length of a lossless compression
    let sum = 0;
    let dataType = arrayLibrary.dataType(data); //get the datatype of the list

    let probabilities;

    if (dataType == 'number') {
      probabilities = data;
    } else if (dataType == 'string') {
      //get the symbols probabilities
      probabilities = Object.values(self.getProbabilities(data));
    } //Sum of (-p log base 2 of p)


    for (let prob of probabilities) {
      sum += -prob * Math.log2(prob);
    }

    return sum;
  };

  self.isUDC = (data = []) => {
    //check if a list is uniquely decodable code
    let flag = true,
        noPrefix,
        keepRunning = true;

    let addSurfix = str => {
      //check if suffix is in list already then stop running
      if (data.includes(str)) {
        flag = false;
        keepRunning = false;
        return;
      }

      data.push(str);
    };

    let checkPrefix = pos => {
      //check for prefix
      noPrefix = true;

      for (let i = 0; i < data.length; i++) {
        if (i == pos) {
          //skip the current position
          continue;
        } else if (data[i] == data[pos]) {
          //double found in the list
          flag = false;
          keepRunning = false;
        } else if (data[i].indexOf(data[pos]) == 0) {
          //add suffix found to the list
          addSurfix(data[i].replace(data[pos], ''));
        } //stop checking for prefix


        if (!keepRunning) break;
      }
    };

    while (keepRunning) {
      for (let i = 0; i < data.length; i++) {
        checkPrefix(i);
        if (keepRunning == false) break; //stop running
      }

      if (noPrefix == true) {
        //if no prefix is found stop it is UDC
        keepRunning = false;
      }
    }

    return flag;
  };

  self.sfAlgorithm = (data = []) => {
    let frequency = self.getFrequency(data); //get the frequecies of the symbols

    let sorted = objectLibrary.sort(frequency, {
      value: true
    }); //sort the symbols based on frequecy of occurrance

    let codeWord = '';
    let tree = {
      path: '',
      size: mathLibrary.sum(Object.values(sorted)),
      value: JSON.parse(JSON.stringify(sorted))
    }; //set a copy of the sorted data as a tree

    let table = JSON.parse(JSON.stringify(sorted)); //set the sorted as table

    for (let i in table) {
      table[i] = {
        frequency: table[i]
      };
    }

    let trySwitching = node => {
      //switch nodes if the left size is bigger than the right side
      if (node[0].size > node[1].size) {
        let temp = node[0];
        node[0] = node[1];
        node[1] = temp;
        temp = node[0].path;
        node[0].path = node[1].path;
        node[1].path = temp;
      }

      return node;
    };

    let splitData = comingNode => {
      //split a tree
      let node = [{
        path: comingNode.path + '0',
        size: 0,
        value: []
      }, {
        path: comingNode.path + '1',
        size: 0,
        value: []
      }]; //into two almost equal length

      for (let i in comingNode.value) {
        if (node[0].size < node[1].size) {
          //split into 2 almost equal nodes
          node[0].value[i] = comingNode.value[i];
          node[0].size += comingNode.value[i];
        } else {
          node[1].value[i] = comingNode.value[i];
          node[1].size += comingNode.value[i];
        }
      }

      node = trySwitching(node);

      for (let i in node) {
        if (Object.values(node[i].value).length > 1) {
          //if it has more than 1 symbol it's a node then split it again
          node[i].value = splitData(node[i]);
        } else {
          //it is a leaf, add it to the table and get the properties
          let key = Object.keys(node[i].value)[0];
          table[key].code = node[i].path;
          table[key].length = node[i].path.length;
          table[key].probability = node[i].size / data.length;
          table[key].log = Math.log2(1 / table[key].probability);
        }
      }

      return node;
    };

    tree = splitData(tree);

    for (let d of data) {
      codeWord += table[d].code;
    }

    return {
      codeWord,
      table,
      data,
      tree
    };
  };

  self.huffmanCoding = (data = []) => {
    let frequency = self.getProbabilities(data); //get the frequecies of the symbols

    let sorted = objectLibrary.sort(frequency, {
      value: true
    }); //sort the symbols based on frequecy of occurrance

    let tree = [];
    let table = {};

    for (let i in sorted) {
      //init the table and the tree
      table[i] = {
        probability: sorted[i],
        path: '',
        length: 0,
        prod: 0
      };
      tree.push({
        value: sorted[i],
        origins: i
      });
    }

    let dig = (coming = []) => {
      //run the algorithm loop until one node is remaining with value of '1'
      let length = coming.length; //size of list 

      let node = []; //init node

      if (length > 1) {
        // list has more than one node?
        let down = length - 1; //index of last two items in list

        let up = length - 2;
        let sum = coming[up].value + coming[down].value;
        let added = false;

        for (let i = 0; i < coming.length; i++) {
          if (i == up || i == down) {
            //sum last 2 items and skip adding them
            if (length == 2) {
              //if last 2 sum them and exist digging
              let newLeaf = {
                value: sum,
                origins: [coming[up].origins, coming[down].origins]
              };
              node.push(newLeaf);
              break;
            }

            continue;
          } else if (coming[i].value <= sum && !added) {
            //add sum if it has not been added
            let newLeaf = {
              value: sum,
              origins: [coming[up].origins, coming[down].origins]
            };
            node.push(newLeaf);
            added = true;
          }

          node.push(coming[i]);
        }

        if (length > 2) {
          node = dig(node);
        }
      }

      return node;
    };

    tree = dig(tree); //get the path/codeword foreach symbol

    let nameItems = (origins, path) => {
      for (let i in origins) {
        if (Array.isArray(origins[i])) {
          nameItems(origins[i], path + i);
        } else {
          table[origins[i]].path = path + i;
          table[origins[i]].length = path.length;
          table[origins[i]].prod = path.length * table[origins[i]].probability;
        }
      }
    };

    nameItems(tree[0].origins, ''); //calculate the avevage length of the codes

    let avgLength = mathLibrary.sum(objectLibrary.valueOfObjectArray(table, 'prod'));
    frequency = sorted = undefined;
    return {
      table,
      data,
      avgLength,
      tree
    };
  }; // self.encodeHuffman = (data, dictionary = []) => {
  //     let dictionaryLength = dictionary.length;
  //     let codeWord = '', nytCode, code;
  //     //get the e and r parameters
  //     let { e, r } = (() => {
  //         let ok = false;
  //         let e = 0, r;
  //         while (!ok) {
  //             e++;
  //             r = dictionaryLength - 2 ** e;
  //             ok = r < 2 ** e;
  //         }
  //         return { e, r };
  //     })();
  //     let fixedCode = (symbol) => {//get the fixed code
  //         let k = dictionary.indexOf(symbol) + 1;
  //         let code;
  //         if (k <= 2 * r) { // 1 <= k <= 2r
  //             code = (k - 1).toString(2);
  //             code = Array((e + 1) - code.length).fill(0).join('') + code; // e + 1 representation of k - 1
  //         }
  //         else if (k > 2 * r) {//k > 2r
  //             code = (k - r - 1).toString(2);
  //             code = Array((e) - code.length).fill(0).join('') + code;// e representation of k - r - 1
  //         }
  //         return code;
  //     }
  //     let updateCount = (t) => {//set the count of a node and switch if left is greater than right
  //         let count = t.getAttribute('count');
  //         count++;
  //         t.setAttributes({ count });
  //         let p = t.parentTree;
  //         if (p != null) {
  //             trySwitching(p);
  //             updateCount(p);
  //         }
  //     }
  //     let trySwitching = (node) => {//switch if left is greater than right
  //         if (node.values[0].getAttribute('count') > node.values[1].getAttribute('count')) {
  //             node.reverse();
  //         }
  //     };
  //     let tree = new Tree();
  //     tree.setAttribute('count', 0);
  //     let NYT = tree;
  //     let readSymbol = (symbol) => {
  //         let s = tree.search((v, i) => {//search and get symbol node if added already
  //             return v.getAttribute('id') == symbol;
  //         }, tree.height);
  //         let v = s.value;
  //         nytCode = tree.search((v, i) => {//get the nyt node
  //             return v.getAttribute('id') == 'nyt';
  //         }, tree.height).path.join('');
  //         if (v == undefined) {//has not been added
  //             NYT.removeAttribute('id');//remove the current NYT tag
  //             NYT.push([], []);//add the 2 nodes
  //             let temp = NYT.values[0];
  //             v = NYT.values[1];
  //             temp.setAttributes({ id: 'nyt', count: 0 });//set new nyt
  //             v.setAttributes({ id: symbol, count: 0 });
  //             NYT = temp;
  //             code = nytCode + fixedCode(symbol);//nyt + fixedCode
  //         }
  //         else {
  //             code = s.path.join('');//get path
  //         }
  //         codeWord += code;//concat the code
  //         updateCount(v);//update the count starting from this node to the root
  //     }
  //     for (let symbol of data) {
  //         readSymbol(symbol);
  //     }
  //     return { codeWord, tree, data };
  // }
  // self.decodeHuffman = (codeWord, dictionary = []) => {
  //     let dictionaryLength = dictionary.length;
  //     let data = '', nytCode, code, path = [];
  //     let tree = new Tree();
  //     tree.setAttributes({ count: 0, id: 'nyt' });
  //     let NYT = tree;
  //     let i;
  //     let { e, r } = (() => {
  //         let ok = false;
  //         let e = 0, r;
  //         while (!ok) {
  //             e++;
  //             r = dictionaryLength - 2 ** e;
  //             ok = r < 2 ** e;
  //         }
  //         return { e, r };
  //     })();
  //     let trySwitching = (node) => {//switch nodes if left side is greater than right side
  //         if (node.values[0].getAttribute('count') > node.values[1].getAttribute('count')) {
  //             node.reverse();
  //         }
  //     };
  //     let updateCount = (t) => {//update the size of the current node and it's next parent
  //         let count = t.getAttribute('count');
  //         count++;
  //         t.setAttributes({ count });
  //         let p = t.parentTree;
  //         if (p != null) {
  //             trySwitching(p);
  //             updateCount(p);
  //         }
  //     }
  //     let readSymbol = (symbol) => {
  //         let s = tree.search((v) => {
  //             return v.getAttribute('id') == symbol;//search and get symbol if exists already
  //         }, tree.height);
  //         let v = s.value;
  //         nytCode = tree.search((v, i) => {
  //             return v.getAttribute('id') == 'nyt';//get the NYT code
  //         }, tree.height).path.join('');
  //         if (v == undefined) {//new symbol? add it to the tree with new NYT
  //             NYT.removeAttribute('id');
  //             NYT.push([], []);
  //             let temp = NYT.values[0];
  //             v = NYT.values[1];
  //             temp.setAttributes({ id: 'nyt', count: 0 });
  //             v.setAttributes({ id: symbol, count: 0 });
  //             NYT = temp;
  //         }
  //         updateCount(v);
  //     }
  //     let interprete = (node) => {
  //         let code;
  //         if (node == NYT) {//is node NYT
  //             for (let j = 0; j < e; j++) {//read next 4 codes
  //                 path.push(codeWord[++i]);
  //             }
  //             let p = parseInt(path.join(''), 2);
  //             if (p < r) {//p is more than r, read 1 more
  //                 path.push(codeWord[++i]);
  //                 p = parseInt(path.join(''), 2);
  //             }
  //             else {
  //                 p += r;//add r to p
  //             }
  //             code = dictionary[p];//get symbol from dictionary
  //             readSymbol(code);//add this symbol to tree
  //         }
  //         else {
  //             code = node.getAttribute('id');//get the symbol from the tree
  //             readSymbol(code);//update the symbol
  //         }
  //         return code;
  //     }
  //     for (i = -1; i < codeWord.length; i++) {//start with empty NYT
  //         let code = codeWord[i];
  //         if (code != undefined) {//when not empty
  //             path.push(code);
  //         }
  //         let node = tree.trace(path).value;
  //         if (node.getAttribute('id') != undefined) {//is node labelled
  //             path = [item];
  //             data += interprete(node);//what is this node
  //             path = [];
  //         }
  //     }
  //     return { data, tree, codeWord };
  // }


  self.golomb = (n, m) => {
    let q = Math.floor(n / m); //step 1

    let unary = Array(q).fill(1).join('') + '0'; //unary of q

    let k = Math.ceil(Math.log2(m));
    let c = 2 ** k - m;
    let r = n % m;

    let rC = (() => {
      //r`
      let value = r.toString();

      if (r < c) {
        value = r.toString();
        value = Array(k - 1 - value.length).fill(0).join('') + value; //k-1 bits rep of r
      } else {
        value = (r + c).toString();
        value = Array(k - value.length).fill(0).join('') + value; //k bits rep of r+c
      }

      return value;
    })();

    let code = unary + rC; //concat unary and r'

    return code;
  };

  self.encodeArithmetic = (data, probabilities) => {
    let getX = n => {
      //f(x(n))= sum of x(1) .... x(n)
      let value = 0;

      for (let i in probabilities) {
        if (n == i) break;
        value = (value / 10 + probabilities[i] / 10) * 100 / 10; //handle the JS decimal problem
      }

      return value;
    }; // l(0) = 0, u(0) = 0, fx(0) = 0


    let bounds = [{
      l: 0,
      u: 1
    }];

    let lowerN = n => {
      //lower limit of n l(n) = l(n-1) + (u(n-1) - l(n-1)) * f(x(n-1))
      let bound = bounds[n];
      let l = bound.l + (bound.u - bound.l) * getX(data[n] - 1);
      return l;
    };

    let upperN = n => {
      //lower limit of n u(n) = l(n-1) + (u(n-1) - l(n-1)) * f(x(n))
      let bound = bounds[n];
      let u = bound.l + (bound.u - bound.l) * getX(data[n]);
      return u;
    };

    for (let i = 0; i < data.length; i++) {
      bounds.push({
        l: lowerN(i),
        u: upperN(i)
      });
    }

    let n = bounds.pop();
    return (n.l + n.u) / 2;
  };

  self.decodeArithmetic = (tag = 0, probabilities) => {
    let data = '';

    let getX = n => {
      //f(x(n))= sum of x(1) .... x(n)
      let value = 0;

      for (let i in probabilities) {
        if (n == i) break;
        value = (value / 10 + probabilities[i] / 10) * 100 / 10; //handle the JS decimal problem
      }

      return value;
    }; // l(0) = 0, u(0) = 0, fx(0) = 0


    let bounds = [{
      l: 0,
      u: 1
    }];

    let lowerN = n => {
      //lower limit of n l(n) = l(n-1) + (u(n-1) - l(n-1)) * f(x(n-1))
      let bound = bounds[n];
      let l = bound.l + (bound.u - bound.l) * getX(data[n] - 1);
      return l;
    };

    let upperN = n => {
      //lower limit of n u(n) = l(n-1) + (u(n-1) - l(n-1)) * f(x(n))
      let bound = bounds[n];
      let u = bound.l + (bound.u - bound.l) * getX(data[n]);
      return u;
    };

    let count = 0,
        complete = false;

    while (!complete) {
      //run until all the codes are found
      let found = false,
          x = 1,
          n = {};

      while (!found) {
        // for each new code
        let l = lowerN(count, x);
        let u = upperN(count, x);
        complete = l >= tag && tag <= u;
        if (complete) break; //if all is found stop running

        found = l < tag && tag < u; //check if it sactisfies the conditions

        n = {
          l,
          u,
          x
        };
        x++;
      }

      if (complete) break;
      count++;
      bounds.push(n); //add code

      data += n.x;
    }

    return data;
  };

  self.encodeDiagram = (data = '', dictionary = {}) => {
    //daigram coding
    let i;
    let codeWord = '';

    let encode = () => {
      let first = data[i]; //take two at a time

      let second = data[i + 1];
      let symbol = first + second;
      let code;

      if (dictionary[symbol] != undefined) {
        //is symbol in dictionary
        code = dictionary[symbol];
        i++; //set count to know it read two
      } else {
        code = dictionary[first];
      }

      return code;
    };

    for (i = 0; i < data.length; i++) {
      codeWord += encode();
    }

    return codeWord;
  };

  self.encodeLZ1 = (data = '', params = {
    windowSize: 0,
    searchSize: 0,
    lookAheadSize: 0
  }) => {
    //LZ7//LZ1//Sliding window
    if (params.windowSize == undefined) params.windowSize = params.searchSize + params.lookAheadSize; //init the window, search and lookahead sizes

    if (params.searchSize == undefined) params.searchSize = params.windowSize - params.lookAheadSize;
    if (params.lookAheadSize == undefined) params.lookAheadSize = params.windowSize - params.searchSize;
    let i = 0,
        lookAheadStop,
        searchStop,
        lookAheadBuffer,
        searchBuffer; //init the buffers and locations

    let getTriplet = () => {
      let x = lookAheadBuffer[0];
      let picked = {
        o: 0,
        l: 0,
        c: x
      }; //set the triplet <o, l, c(n)>

      if (searchBuffer.includes(x)) {
        let foundMatches = []; //storage for the matches

        for (let i in searchBuffer) {
          //find all the matches in search buffer
          if (searchBuffer[i] == picked.c) {
            let indexInData = +searchStop + +i,
                //this is the joint of the search and lookAhead buffers
            indexInLookAhead = 0,
                count = 0,
                matching = true,
                matched = [];

            while (matching) {
              //keep getting the matches
              matched.push(data[indexInData]);
              count++;
              matching = lookAheadBuffer[indexInLookAhead + count] === data[indexInData + count];
            }

            foundMatches.push({
              o: searchBuffer.length - i,
              l: matched.length,
              c: lookAheadBuffer[matched.length]
            }); //save matches
          }
        }

        picked = foundMatches[0];

        for (let y of foundMatches) {
          //get the match with most size and closest to the lookAhead buffer
          if (picked.l < y.l) {
            picked = y;
          } else if (picked.l == y.l && picked.o > y.o) {
            picked = y;
          }
        }
      }

      i += picked.l;
      return picked;
    };

    let list = [];

    for (i = 0; i < data.length; i++) {
      searchStop = i - params.searchSize;
      if (searchStop < 0) searchStop = 0;
      lookAheadStop = i + params.lookAheadSize;
      searchBuffer = data.slice(searchStop, i).split('');
      lookAheadBuffer = data.slice(i, lookAheadStop).split('');
      list.push(getTriplet());
    }

    return list;
  };

  self.decodeLZ1 = (triplets = [{
    o: 0,
    l: 0,
    c: ''
  }], params = {
    windowSize: 0,
    searchSize: 0,
    lookAheadSize: 0
  }) => {
    let word = '';
    if (params.windowSize == undefined) params.windowSize = params.searchSize + params.lookAheadSize; //init the window, search and lookahead sizes

    if (params.searchSize == undefined) params.searchSize = params.windowSize - params.lookAheadSize;
    if (params.lookAheadSize == undefined) params.lookAheadSize = params.windowSize - params.searchSize;

    for (let t of triplets) {
      //decode each triplet
      for (let i = 0; i < t.l; i++) {
        word += word[word.length - t.o];
      }

      word += t.c;
    }

    return word;
  };

  self.encodeLZ2 = (data = '') => {
    //LZ8//LZ2
    let duplets = []; //init duplet list

    let entries = []; //init dictionary

    let i, lastIndex;

    let getRange = range => {
      //get the symbols within the range
      let value = '';

      for (let r of range) {
        value += data[r];
      }

      return value;
    };

    let encode = range => {
      let e = getRange(range); //get the value of the range

      let index = entries.indexOf(e);
      let d = {
        i: lastIndex,
        c: e[e.length - 1]
      }; //create duplet

      if (index == -1) {
        //current group of symbols is in not in the dictionary
        entries.push(e);
      } else {
        range.push(++i);
        lastIndex = index + 1;
        d = encode(range);
      }

      return d;
    };

    for (i = 0; i < data.length; i++) {
      lastIndex = 0;
      duplets.push(encode([i]));
    }

    return duplets;
  };

  self.decodeLZ2 = (duplets = [{
    i: 0,
    c: ''
  }]) => {
    let entries = []; //init dictionary

    let c;

    for (let d of duplets) {
      //decode each duplet
      c = '';

      if (d.i != 0) {
        c = entries[d.i - 1]; //get the code from the dictionary
      }

      c += d.c;
      entries.push(c);
    }

    return entries.join('');
  };

  self.encodeLZW = (data = '', initDictionary = []) => {
    let codeWord = [],
        lastIndex,
        i;
    let entries = Array.from(initDictionary);

    let getRange = range => {
      // get the values within the range
      let value = '';

      for (let r of range) {
        value += data[r];
      }

      return value;
    };

    let encode = range => {
      let e = getRange(range);
      let index = entries.indexOf(e);

      if (index == -1) {
        //is value not in dictionary?
        entries.push(e); //add it and set the counter to the last read symbol

        index = 0;
        i--;
      } else {
        i++; //set the counter to the next symbol and try encoding the range

        range.push(i);
        lastIndex = index += 1; //set the last read index, this is the code

        e = encode(range);
      }

      return lastIndex;
    };

    for (i = 0; i < data.length; i++) {
      lastIndex = 0;
      let code = encode([i]);

      if (code != undefined) {
        //code was created
        codeWord.push(code);
      }
    }

    return codeWord;
  };

  self.decodeLZW = (singleton = [], initDictionary = []) => {
    let word = '',
        codeWord = [],
        state,
        count = 0,
        rebuild = false,
        buildWith = '',
        i,
        start = 0;
    let entries = Array.from(initDictionary);

    let getCode = range => {
      //get the code within the range
      let value = '';
      count = 0;
      buildWith = '';

      for (let r of range) {
        if (word[r] == undefined) {
          //it is not complete
          count++;
          rebuild = true; //set to rebuild
        } else {
          buildWith += word[r]; //set to rebuild with incase of not complete
        }

        value += word[r];
      }

      return value;
    };

    let decode = (range = []) => {
      let e = getCode(range);
      let index = entries.indexOf(e);

      if (index == -1) {
        //is not in dictionary?
        entries.push(e);
        i--; //set the counter to the last symbol read
      } else {
        ++i;
        range.push(i);
        decode(range); //add next symbol and decode again
      }

      return e;
    };

    let build = state => {
      //build up the dictionary from the decoded values
      for (i = start; i < word.length; i++) {
        let e = decode([i]);

        if (entries.length == state) {
          //stop at the current decoding point
          start = i + 1 - count; //set next starting point at the current stop

          break;
        }
      }
    };

    for (let s of singleton) {
      let e = entries[s - 1];

      if (e == undefined) {
        build(s); //build the dictionary

        e = entries[s - 1];
      }

      codeWord.push(e);
      word = codeWord.join('');

      if (rebuild) {
        //rebuild the last entry in the dictionary 
        rebuild = false;

        for (let i = 0; i < count; i++) {
          //keep add items to the buildwith to the buildwith until it is complete
          buildWith += buildWith[i];
        }

        codeWord.pop(); //set last built and last decoded to the new build

        codeWord.push(buildWith);
        entries.pop();
        entries.push(buildWith);
        start += count; //set the next build starting point
      }
    }

    return word;
  };

  return self;
}

},{"./Array.js":13,"./Math.js":15,"./Objects.js":16}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MathsLibrary = MathsLibrary;

var _Array = require("./Array.js");

let arrayLibrary = (0, _Array.ArrayLibrary)();

function MathsLibrary() {
  let self = {};

  self.placeUnit = (num, value, count) => {
    num = Math.floor(num).toString();
    value = value || num[0];
    count = count || 0;
    let pos = -1;

    for (let i = 0; i < num.length; i++) {
      if (num[i] == value) {
        if (count == 0) {
          pos = i;
        }

        count--;
      }
    }

    if (pos != -1) pos = 10 ** (num.length - pos - 1);
    return pos;
  };

  self.round = params => {
    params.dir = params.dir || 'round';
    params.to = params.to || 1;
    let value = Math[params.dir](params.num / params.to) * params.to;
    return value;
  };

  self.variance = data => {
    let mean = self.mean(data);
    let variance = 0;

    for (let i = 0; i < data.length; i++) {
      variance += (data[i] - mean) ** 2;
    }

    return variance / data.length;
  };

  self.standardDeviation = data => {
    let variance = self.variance(data);
    let std = Math.sqrt(variance);
    return std;
  };

  self.range = data => {
    let min = Math.min(...data);
    let max = Math.max(...data);
    let range = max - min;
    return range;
  };

  self.mean = data => {
    let sum = self.sum(data);
    let mean = sum / data.length;
    return mean;
  };

  self.median = data => {
    let length = data.length;
    let median;

    if (length % 2 == 0) {
      median = (data[length / 2 - 1] + data[length / 2]) / 2;
    } else {
      median = data[Math.floor(length / 2)];
    }

    return median;
  };

  self.mode = data => {
    let record = {};

    for (let i = 0; i < data.length; i++) {
      if (record[data[i]] != undefined) record[data[i]]++;else record[data[i]] = i;
    }

    let max = Math.max(...Object.value(record));
    let mode;

    for (let i in record) {
      if (record[i] == max) {
        mode = i;
        break;
      }
    }

    return mode;
  };

  self.normalizeData = data => {
    data.sort((a, b) => {
      return a - b;
    });
    var max = data[data.length - 1];
    var min = data[0];
    var normalized = [];

    for (var i = 0; i < data.length; i++) {
      normalized.push((data[i] - min) / (max - min));
    }

    return normalized;
  };

  self.minimuimSwaps = (arr, order) => {
    var swap = 0;
    var checked = [];
    var counter = 0;
    var final = [...arr].sort((a, b) => {
      return a - b;
    });
    if (order == -1) final = final.reverse();

    for (var i = 0; i < arr.length; i++) {
      var element = arr[i];
      if (i == element || checked[i]) continue;
      counter = 0;
      if (arr[0] == 0) element = i;

      while (!checked[i]) {
        checked[i] = true;
        i = final.indexOf(element);
        element = arr[i];
        counter++;
      }

      if (counter != 0) {
        swap += counter - 1;
      }
    }

    return swap;
  };

  self.primeFactorize = number => {
    if (typeof number != "number") return [];
    number = Math.abs(parseInt(number));
    if (number == 1 || number == 0) return []; //1 and 0 has no primes

    var divider = 2;
    var dividend;
    var factors = [];

    while (number != 1) {
      dividend = number / divider;

      if (dividend.toString().indexOf('.') != -1) {
        divider++;
        continue;
      }

      number = dividend;
      factors.push(divider);
    }

    return factors;
  };

  self.lcf = numbers => {
    if (!Array.isArray(numbers)) return [];
    var factors = [];
    var commonFactors = [];
    var value = 1;

    for (var number of numbers) {
      if (typeof number != "number") return [];
      factors.push(self.primeFactorize(number));
    }

    main: for (var factor of factors[0]) {
      if (commonFactors.indexOf(factor) == -1) {
        for (var i of factors) {
          if (i.indexOf(factor) == -1) continue main;
        }

        commonFactors.push(factor);
        value *= factor;
      }
    }

    return value;
  };

  self.stripInteger = number => {
    number = number.toString();
    number = number.indexOf('.') == -1 ? number : number.slice(0, number.indexOf('.'));
    return number;
  };

  self.stripFraction = number => {
    number = number.toString();
    number = number.indexOf('.') == -1 ? '0' : number.slice(number.indexOf('.') + 1);
    return number;
  };

  self.changeBase = (number, from, to) => {
    return parseFloat(number, from).toString(to);
  };

  self.max = array => {
    var max = array[0];
    arrayLibrary.each(array, value => {
      if (max < value) max = value;
    });
    return max;
  };

  self.min = array => {
    var max = array[0];
    arrayLibrary.each(array, value => {
      if (max > value) max = value;
    });
    return max;
  };

  self.sum = array => {
    //for finding the sum of one layer array
    let sum = 0;

    for (let i = 0; i < array.length; i++) {
      if (isNaN(Math.floor(array[i]))) {
        sum = false;
        break;
      }

      sum += array[i] / 1;
    }

    return sum;
  };

  self.product = array => {
    //for finding the sum of one layer array
    let product = 1;

    for (let i = 0; i < array.length; i++) {
      if (isNaN(Math.floor(array[i]))) {
        product = false;
        break;
      }

      product *= array[i];
    }

    return product;
  };

  self.add = (...arrays) => {
    let newArray = [];
    arrays[0].forEach((value, position) => {
      arrays.forEach((array, location) => {
        if (location != 0) {
          let element = Array.isArray(array) ? array[position] : array;
          value += isNaN(element) == true ? 0 : element;
        }
      });
      newArray.push(value);
    });
    return newArray;
  };

  self.sub = (...arrays) => {
    let newArray = [];
    arrays[0].forEach((value, position) => {
      arrays.forEach((array, location) => {
        if (location != 0) {
          let element = Array.isArray(array) ? array[position] : array;
          value -= isNaN(element) == true ? 0 : element;
        }
      });
      newArray.push(value);
    });
    return newArray;
  };

  self.mul = (...arrays) => {
    let newArray = [];
    arrays[0].forEach((value, position) => {
      arrays.forEach((array, location) => {
        if (location != 0) {
          let element = Array.isArray(array) ? array[position] : array;
          value *= isNaN(element) == true ? 0 : element;
        }
      });
      newArray.push(value);
    });
    return newArray;
  };

  self.divide = (...arrays) => {
    let newArray = [];
    arrays[0].forEach((value, position) => {
      arrays.forEach((array, location) => {
        if (location != 0) {
          let element = Array.isArray(array) ? array[position] : array;
          value /= isNaN(element) == true ? 0 : element;
        }
      });
      newArray.push(value);
    });
    return newArray;
  };

  self.abs = array => {
    return arrayLibrary.each(array, value => {
      value = isNaN(value) == true ? 0 : value;
      return Math.abs(value);
    });
  };

  return self;
}

},{"./Array.js":13}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectLibrary = ObjectLibrary;

var _Array = require("./Array.js");

let arrayLibrary = (0, _Array.ArrayLibrary)();

function ObjectLibrary() {
  let self = {};

  self.extractFromJsonArray = (meta, source) => {
    //extract a blueprint of data from a JsonArray
    let keys = Object.keys(meta); //get the keys

    let values = Object.values(meta); //get the values

    let eSource = [];

    if (source != undefined) {
      for (let obj of source) {
        //each item in source
        let object = {};

        for (let i in keys) {
          //each blueprint key
          if (arrayLibrary.contains(Object.keys(obj), values[i])) {
            //source item has blueprint value
            object[keys[i]] = obj[values[i]]; //store according to blueprint
          }
        }

        eSource.push(object);
      }
    }

    return eSource;
  };

  self.find = (obj, callback) => {
    //higher order Object function for the first item in an Object that match
    for (let i in obj) {
      if (callback(obj[i]) == true) {
        return obj[i];
      }
    }
  };

  self.findAll = (obj, callback) => {
    //higher order Object function for all items in an Object that match
    let values = {};

    for (let i in obj) {
      if (callback(obj[i]) == true) values[i] = obj[i];
    }

    return values;
  };

  self.makeIterable = obj => {
    //make an object to use 'for in'
    obj[Symbol.iterator] = function* () {
      let properties = Object.keys(obj);

      for (let p of properties) {
        yield this[p];
      }
    };

    return obj;
  };

  self.max = object => {
    object = self.sort(object, {
      value: true
    });
    return self.getIndex(object);
  };

  self.min = object => {
    //get the mininum in item in an Object
    object = self.sort(object, {
      value: false
    });
    return self.getIndex(object);
  };

  self.onChanged = (obj, callback) => {
    //make an object listen to changes of it's items
    const handler = {
      get(target, property, receiver) {
        //when an Item is fetched
        try {
          return new Proxy(target[property], handler);
        } catch (err) {
          return Reflect.get(target, property, receiver);
        }
      },

      defineProperty(target, property, descriptor) {
        //when an Item is added
        callback(target, property);
        return Reflect.defineProperty(target, property, descriptor);
      },

      deleteProperty(target, property) {
        //when an Item is removed
        callback(target, property);
        return Reflect.deleteProperty(target, property);
      }

    };
    return new Proxy(obj, handler);
  };

  self.toArray = (object, named) => {
    //turn an Object into an Array
    var array = [];
    Object.keys(object).map(key => {
      if (named == true) {
        //make it named
        array[key] = object[key];
      } else {
        array.push(object[key]);
      }
    });
    return array;
  };

  self.valueOfObjectArray = (array, name) => {
    //get all the keys in a JsonArray of item name
    var newArray = [];

    for (let i in array) {
      newArray.push(array[i][name]);
    }

    return newArray;
  };

  self.keysOfObjectArray = (array = []) => {
    //get all the keys in a JsonArray
    var newArray = [];

    for (let i in array) {
      newArray = newArray.concat(Object.keys(array[i]));
    }

    return arrayLibrary.toSet(newArray); //remove duplicates
  };

  self.objectOfObjectArray = (array = [], id, name) => {
    //strip [key value] from a JsonArray
    var object = {};

    for (let i in array) {
      object[array[i][id]] = array[i][name];
    }

    return object;
  };

  self.copy = (from, to) => {
    //clone an Object
    Object.keys(from).map(key => {
      to[key] = from[key];
    });
  };

  self.forEach = (object, callback) => {
    //higher order function for Object literal
    for (let key in object) {
      callback(object[key], key);
    }
  };

  self.each = function (object, callback) {
    //higher order function for Object literal
    let newObject = {};

    for (let key in object) {
      newObject[key] = callback(object[key], key);
    }

    return newObject;
  };

  self.isSubObject = (data, sample) => {
    //check if an object is a sub-Object of another Object
    let flag;

    for (let name in sample) {
      flag = JSON.stringify(sample[name]) == JSON.stringify(data[name]); //convert to string and compare

      if (!flag) break;
    }

    return flag;
  };

  self.getSubObject = (data = [], sample = {}) => {
    //get matched items in Object
    let matched = [],
        flag = true;

    for (let i in data) {
      flag = self.isSubObject(data[i], sample); //check each object

      if (!flag) continue;
      matched.push(data[i]);
    }

    return matched;
  };

  self.sort = (data = {}, params = {
    items: [],
    descend: false,
    key: false,
    value: false
  }) => {
    //sort an Object based on[key, value or items]
    params.item = params.item || '';
    params.descend = params.descend || false;
    let sorted = [],
        nData = {};

    for (let [key, value] of Object.entries(data)) {
      sorted.push({
        key,
        value
      });
    }

    if (params.key != undefined) {
      //sort with key
      console.log('Hello');
      sorted.sort((a, b) => {
        let value = a.key >= b.key;
        if (params.key == true) value = !value; //descend

        return value;
      });
    }

    if (params.value != undefined) {
      //sort with value
      sorted.sort((a, b) => {
        let value = a.value >= b.value;
        if (params.value == true) value = !value; //descend

        return value;
      });
    }

    if (params.items != undefined) {
      //sort with items
      sorted.sort((a, b) => {
        let greater = 0,
            lesser = 0;

        for (let item of params.items) {
          if (a.value[item] >= b.value[item]) greater++;else lesser++;
        }

        let value = greater >= lesser;
        if (params.descend == true) value = !value; //descend items

        return value;
      });
    }

    for (let {
      key,
      value
    } of sorted) {
      nData[key] = value;
    }

    return nData;
  };

  self.reverse = (data = {}) => {
    //reverse an Object
    let keys = Object.keys(data).reverse();
    let newObject = {};

    for (let i of keys) {
      newObject[i] = data[i];
    }

    return newObject;
  };

  self.getIndex = (data = {}) => {
    //get the first item in the Object
    let key = Object.keys(data).shift();
    let value = data[key];
    return {
      key,
      value
    };
  };

  self.getLast = (data = {}) => {
    //get the last item in the Object
    let key = Object.keys(data).pop();
    let value = data[key];
    return {
      key,
      value
    };
  };

  self.getAt = (data = {}, index) => {
    //get the item of index in the Object
    let key = Object.keys(data)[index];
    let value = data[key];
    return {
      key,
      value
    };
  };

  self.keyOf = (data = {}, item) => {
    //get the first occurrance of an item in an Object
    let index = -1;

    for (let i in data) {
      if (JSON.stringify(data[i]) == JSON.stringify(item)) {
        return i;
      }
    }

    return index;
  };

  self.lastKeyOf = (data = {}, item) => {
    //get the last occurrance of an item in an object
    let index = -1;

    for (let i in data) {
      if (JSON.stringify(data[i]) == JSON.stringify(item)) {
        index = i;
      }
    }

    return index;
  };

  self.includes = (data = {}, item) => {
    //check if an Object has an item
    return self.keyOf(data, item) != -1;
  };

  return self;
}

},{"./Array.js":13}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Shadow = Shadow;

var _Func = require("../classes/Func.js");

let func = new _Func.Func();

function Shadow(element) {
  let self = {
    element: element.cloneNode(true),
    children: [element],
    properties: {},
    childProperties: {}
  };

  self.updateNewElementChildProperties = function (element, propertyCollection = {}) {
    let children, positions;

    for (let identifier in propertyCollection) {
      for (let childProperties of propertyCollection[identifier]) {
        positions = this.setPositions(childProperties.positions);
        children = this.getChildren(identifier, element, positions);

        for (let j = 0; j < children.length; j++) {
          children[j].setProperties(childProperties.properties);
        }
      }
    }
  };

  self.updateNewElementChildAttributes = function (element, attributeCollection = {}) {
    let children, positions;

    for (let identifier in attributeCollection) {
      for (let childAtrributes of attributeCollection[identifier]) {
        positions = this.setPositions(childAtrributes.positions);
        children = this.getChildren(identifier, element, positions);

        for (let j = 0; j < children.length; j++) {
          children[j].setAttributes(childAtrributes.attributes);
        }
      }
    }
  };

  self.setPositions = function (positions = 1) {
    if (!Array.isArray(positions)) {
      positions = func.range(positions);
    }

    return positions;
  };

  self.createElement = function (params = {
    childDetails: {
      attributes: {},
      properties: {}
    },
    details: {
      attributes: {},
      properties: {}
    }
  }) {
    let element = this.element.cloneNode(true);
    this.children.push(element);
    this.prepareElement(element, params);
    return element;
  };

  self.prepareElement = function (element, params = {
    childDetails: {
      attributes: {},
      properties: {}
    },
    details: {
      attributes: {},
      properties: {}
    }
  }) {
    if (params.childDetails != undefined) {
      if (params.childDetails.attributes != undefined) {
        this.updateNewElementChildAttributes(element, params.childDetails.attributes);
      }

      if (params.childDetails.properties != undefined) {
        this.updateNewElementChildProperties(element, params.childDetails.properties);
      }
    }

    if (params.details != undefined) {
      if (params.details.attributes != undefined) {
        element.setAttributes(params.details.attributes);
      }

      if (params.details.properties != undefined) {
        element.setProperties(params.details.properties);
      }
    }

    this.updateNewElementChildProperties(element, this.childProperties);
    element.setProperties(this.properties);
    this.makeCloneable(element);
  };

  self.removeElement = function (element) {
    let children = [];
    let position = this.children.indexOf(element);

    for (let i = 0; i < this.children.lengt; i++) {
      if (position != i) {
        children.push(this.children[i]);
      }
    }

    this.children = children;
  };

  self.cloneElement = function (position, params = {
    childDetails: {
      attributes: {},
      properties: {}
    },
    details: {
      attributes: {},
      properties: {}
    }
  }) {
    let element = this.children[position].cloneNode(true);
    this.children.push(element);
    this.prepareElement(element, params);
    return element;
  };

  self.makeCloneable = function (element) {
    let position = this.children.indexOf(element);

    if (position == -1) {
      return;
    }

    element.unitClone = params => {
      return this.cloneElement(position, params);
    };
  };

  self.length = function () {
    return this.children.length;
  };

  self.setProperties = function (properties = {}) {
    for (let i = 0; i < this.children.length; i++) {
      this.children[i].setProperties(properties);
    }

    this.element.setProperties(properties);

    for (let i in properties) {
      this.properties[i] = properties[i];
    }
  };

  self.css = function (style = {}) {
    for (let i = 0; i < this.children.length; i++) {
      this.children[i].css(style);
    }

    this.element.css(style);
  };

  self.setAttributes = function (attributes = {}) {
    for (let i = 0; i < this.children.length; i++) {
      this.children[i].setAttributes(attributes);
    }

    this.element.setAttributes(attributes);
  };

  self.addClasses = function (classes = '') {
    for (let i = 0; i < this.children.length; i++) {
      this.children[i].addClasses(classes);
    }

    this.element.addClasses(classes);
  };

  self.removeClasses = function (classes = '') {
    for (let i = 0; i < this.children.length; i++) {
      this.children[i].removeClasses(classes);
    }

    this.element.removeClasses(classes);
  };

  self.getChildren = function (identifier = '', element, positions = []) {
    let collection = [];
    let children = element.findAll(identifier); //get the children matching identifier in each element

    if (children.length > 0) {
      //if not empty
      for (let j = 0; j < positions.length; j++) {
        if (children[positions[j]] != undefined) {
          //if available
          collection.push(children[positions[j]]);
        }
      }
    }

    return collection;
  };

  self.childCss = function (identifier = '', style = {}, positions = []) {
    positions = this.setPositions(positions);
    let children;

    for (let i = 0; i < this.children.length; i++) {
      children = this.getChildren(identifier, this.children[i], positions);

      for (let j = 0; j < children.length; j++) {
        children[j].css(style);
      }
    }

    children = this.getChildren(identifier, this.element, positions);

    for (let j = 0; j < children.length; j++) {
      children[j].css(style);
    }
  };

  self.setChildProperties = function (identifier = '', properties = {}, positions = []) {
    positions = this.setPositions(positions);
    let children;

    for (let i = 0; i < this.children.length; i++) {
      children = this.getChildren(identifier, this.children[i], positions);

      for (let j = 0; j < children.length; j++) {
        children[j].setProperties(properties);
      }
    }

    children = this.getChildren(identifier, this.element, positions);

    for (let j = 0; j < children.length; j++) {
      children[j].setProperties(properties);
    }

    this.childProperties[identifier] = this.childProperties[identifier] || [];
    this.childProperties[identifier].push({
      properties,
      positions
    });
  };

  self.setChildAttributes = function (identifier = '', attributes = {}, positions = '') {
    positions = this.setPositions(positions);
    let children;

    for (let i = 0; i < this.children.length; i++) {
      children = this.getChildren(identifier, this.children[i], positions);

      for (let j = 0; j < children.length; j++) {
        children[j].setAttributes(attributes);
      }
    }

    children = this.getChildren(identifier, this.element, positions);

    for (let j = 0; j < children.length; j++) {
      children[j].setAttributes(attributes);
    }
  };

  self.addClassesToChild = function (identifier = '', classes = '', positions = []) {
    positions = this.setPositions(positions);
    let children;

    for (let i = 0; i < this.children.length; i++) {
      children = this.getChildren(identifier, this.children[i], positions);

      for (let j = 0; j < children.length; j++) {
        children[j].addClasses(classes);
      }
    }

    children = this.getChildren(identifier, this.element, positions);

    for (let j = 0; j < children.length; j++) {
      children[j].addClasses(classes);
    }
  };

  self.removeClassesFromChild = function (identifier = '', classes = '', positions = []) {
    positions = this.setPositions(positions);
    let children;

    for (let i = 0; i < this.children.length; i++) {
      children = this.getChildren(identifier, this.children[i], positions);

      for (let j = 0; j < children.length; j++) {
        children[j].removeClasses(classes);
      }
    }

    children = this.getChildren(identifier, this.element, positions);

    for (let j = 0; j < children.length; j++) {
      children[j].removeClasses(classes);
    }
  };

  return self;
}

},{"../classes/Func.js":6}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Func", {
  enumerable: true,
  get: function () {
    return _Func.Func;
  }
});
Object.defineProperty(exports, "Matrix", {
  enumerable: true,
  get: function () {
    return _Matrix.Matrix;
  }
});
Object.defineProperty(exports, "NeuralNetwork", {
  enumerable: true,
  get: function () {
    return _NeuralNetwork.NeuralNetwork;
  }
});
Object.defineProperty(exports, "Template", {
  enumerable: true,
  get: function () {
    return _Template.Template;
  }
});
Object.defineProperty(exports, "Components", {
  enumerable: true,
  get: function () {
    return _Components.Components;
  }
});
Object.defineProperty(exports, "ColorPicker", {
  enumerable: true,
  get: function () {
    return _ColorPicker.ColorPicker;
  }
});
Object.defineProperty(exports, "Period", {
  enumerable: true,
  get: function () {
    return _Period.Period;
  }
});
Object.defineProperty(exports, "Icons", {
  enumerable: true,
  get: function () {
    return _Icons.Icons;
  }
});
Object.defineProperty(exports, "Shadow", {
  enumerable: true,
  get: function () {
    return _Shadow.Shadow;
  }
});
Object.defineProperty(exports, "ArrayLibrary", {
  enumerable: true,
  get: function () {
    return _Array.ArrayLibrary;
  }
});
Object.defineProperty(exports, "ObjectLibrary", {
  enumerable: true,
  get: function () {
    return _Objects.ObjectLibrary;
  }
});
Object.defineProperty(exports, "MathsLibrary", {
  enumerable: true,
  get: function () {
    return _Math.MathsLibrary;
  }
});
Object.defineProperty(exports, "AnalysisLibrary", {
  enumerable: true,
  get: function () {
    return _Analytics.AnalysisLibrary;
  }
});
Object.defineProperty(exports, "Compression", {
  enumerable: true,
  get: function () {
    return _Compression.Compression;
  }
});
exports.Base = void 0;

var _Func = require("./classes/Func.js");

var _Matrix = require("./classes/Matrix.js");

var _NeuralNetwork = require("./classes/NeuralNetwork.js");

var _Template = require("./classes/Template.js");

var _Components = require("./classes/Components.js");

var _ColorPicker = require("./classes/ColorPicker.js");

var _Period = require("./classes/Period.js");

var _Icons = require("./Icons.js");

var _Shadow = require("./functions/Shadow.js");

var _Array = require("./functions/Array.js");

var _Objects = require("./functions/Objects.js");

var _Math = require("./functions/Math.js");

var _Analytics = require("./functions/Analytics.js");

var _Compression = require("./functions/Compression.js");

class Base extends _Components.Components {
  constructor() {
    super();
    this.Matrix = _Matrix.Matrix;
    this.NeuralNetwork = _NeuralNetwork.NeuralNetwork;
    this.Shadow = _Shadow.Shadow;
    this.colorHandler = new _ColorPicker.ColorPicker();
    this.array = (0, _Array.ArrayLibrary)();
    this.object = (0, _Objects.ObjectLibrary)();
    this.math = (0, _Math.MathsLibrary)();
    this.analytics = (0, _Analytics.AnalysisLibrary)();
    this.icons = _Icons.Icons;
    this.styles = ['https://kade-95.github.io/kerdx/css/table.css', 'https://kade-95.github.io/kerdx/css/cell.css', 'https://kade-95.github.io/kerdx/css/form.css', 'https://kade-95.github.io/kerdx/css/picker.css', 'https://kade-95.github.io/kerdx/css/select.css', 'https://kade-95.github.io/kerdx/css/json.css', 'https://kade-95.github.io/kerdx/css/popup.css'];

    for (let style of this.styles) {
      this.loadCss(style);
    }
  }

}

exports.Base = Base;

},{"./Icons.js":3,"./classes/ColorPicker.js":4,"./classes/Components.js":5,"./classes/Func.js":6,"./classes/Matrix.js":8,"./classes/NeuralNetwork.js":9,"./classes/Period.js":10,"./classes/Template.js":11,"./functions/Analytics.js":12,"./functions/Array.js":13,"./functions/Compression.js":14,"./functions/Math.js":15,"./functions/Objects.js":16,"./functions/Shadow.js":17}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logger = Logger;

var _System = require("../functions/System.js");

let system = new _System.System();

function Logger() {
  const mmu = {
    board: undefined,
    previousCommands: [],
    index: 0,
    commandList: {}
  };

  mmu.commandList.clear = () => {
    mmu.board.innerHTML = '';
  };

  mmu.commandList.log = data => {
    let logItem = kerdx.createElement({
      element: 'div',
      attributes: {
        class: 'log-item'
      }
    });

    if (data instanceof Element) {
      logItem.append(data);
    } else {
      try {
        logItem.innerHTML = data;
      } catch (error) {
        logItem.innerHTML = 'Error writing to the log';
      }
    }

    mmu.board.append(logItem);
  };

  mmu.commandList.print = data => {};

  mmu.commandList.request = data => {
    let props = mmu.getCommandProps(data, '-');

    if (props.url == undefined) {
      mmu.commandList.log('Url is required');
      return;
    }

    if (props.method == undefined) {
      mmu.commandList.log('Method is required');
      return;
    }

    try {
      props.data = JSON.parse(props.data);
      mmu.disableInput();
      mmu.write(`Connecting to ${props.url}`);
      system.connect(props).then(result => {
        mmu.write('Connected');
        mmu.write(result);
      }).catch(error => {
        console.log(error);
      }).finally(mmu.enableInput());
    } catch (error) {
      mmu.write('Data format not valid');
    }
  };

  mmu.getCommandProps = (data, start) => {
    let commands = {};
    let args = data.split(' ');
    let arg;

    for (let i = 0; i < args.length; i++) {
      arg = args[i];

      if (arg[0] == start) {
        commands[arg.replace(start, '')] = args[i + 1];
      }
    }

    return commands;
  };

  mmu.createWindow = () => {
    let responseWindow = kerdx.createElement({
      element: 'div',
      attributes: {
        id: 'response-window'
      },
      children: [{
        element: 'span',
        attributes: {
          id: 'response-window-controls'
        },
        children: [{
          element: 'input',
          attributes: {
            id: 'response-window-search'
          }
        }, {
          element: 'i',
          attributes: {
            id: 'response-window-toggle',
            class: 'fas fa-arrow-up'
          }
        }, {
          element: 'i',
          attributes: {
            id: 'response-window-clear',
            class: 'fas fa-trash'
          }
        }]
      }, {
        element: 'span',
        attributes: {
          id: 'response-window-log'
        },
        children: [{
          element: 'span',
          attributes: {
            id: 'response-window-board'
          }
        }, {
          element: 'span',
          attributes: {
            id: 'response-window-command'
          },
          children: [{
            element: 'label',
            text: 'RUN: '
          }, {
            element: 'input',
            attributes: {
              id: 'response-window-input',
              autoComplete: 'off'
            }
          }]
        }]
      }]
    });
    mmu.commandInput = responseWindow.find('#response-window-input');
    mmu.board = responseWindow.find('#response-window-board');
    let windowLog = responseWindow.find('#response-window-log');
    responseWindow.addEventListener('click', event => {
      if (event.target == windowLog || windowLog.isAncestor(event.target)) {
        mmu.commandInput.focus();
        mmu.commandInput.setSelectionRange(mmu.commandInput.value.length, mmu.commandInput.value.length, "forward");
      }
    });
    mmu.commandInput.addEventListener('keydown', event => {
      let value;

      if (event.key == 'ArrowUp' || event.key == 'ArrowDown') {
        if (event.key == 'ArrowUp') {
          mmu.index--;
        } else if (event.key == 'ArrowDown') {
          mmu.index++;
        }

        if (mmu.previousCommands.length == 0) mmu.index = 0;else if (mmu.index < 0) mmu.index = 0;else if (mmu.index >= mmu.previousCommands.length) mmu.index = mmu.previousCommands.length - 1;
        value = mmu.previousCommands[mmu.index];
        mmu.commandInput.value = value || '';
        mmu.commandInput.setSelectionRange(mmu.commandInput.value.length, mmu.commandInput.value.length, "forward");
      } else if (event.key == 'Enter') {
        let command = mmu.commandInput.value;
        mmu.commandInput.value = '';
        mmu.commandList.log(`RUN: ${command}`);

        if (command != '') {
          mmu.previousCommands.push(command);

          if (kerdx.isset(mmu.commandList[command.split(' ')[0]])) {
            mmu.commandList[command.split(' ')[0]](command.replace(command.split(' ')[0], '').trim());
          } else {
            mmu.write(`'${command.split(' ')[0]}' not found`);
          }
        } else {
          mmu.write(command);
        }

        mmu.index = mmu.previousCommands.length - 1;
      }
    });
    mmu.window = responseWindow;
    mmu.resize();
    return responseWindow;
  };

  mmu.write = data => {
    let item;

    if (data instanceof Element) {
      item = data;
    } else if (typeof data == 'object') {
      item = kerdx.displayData(data);
    } else {
      item = kerdx.createElement({
        element: 'span',
        html: data
      });
    }

    let time = `[${kerdx.time()}]:`;
    let logItem = kerdx.createElement({
      element: 'div',
      attributes: {
        style: {
          display: 'grid',
          gridTemplateColumns: 'max-content 1fr'
        }
      },
      children: [{
        element: 'label',
        text: time
      }, item]
    });
    mmu.commandList.log(logItem);
  };

  mmu.clean = () => {
    mmu.commandList.clear();
  };

  mmu.disableInput = () => {
    mmu.commandInput.css({
      display: 'none'
    });
  };

  mmu.enableInput = () => {
    mmu.commandInput.cssRemove(['display']);
  };

  mmu.resize = () => {
    mmu.window.onAdded(() => {
      let parent = mmu.window.parentNode;
      let canDrag = false;
      let position = mmu.window.position();

      let hover = event => {
        let diff = event.y - mmu.window.position().top;

        if (diff < 15 && diff > -15) {
          mmu.window.css({
            cursor: 'ns-resize'
          });
        } else if (!canDrag) {
          mmu.window.cssRemove(['cursor']);
        }
      };

      let mousedown = event => {
        let diff = event.y - mmu.window.position().top;

        if (diff < 15 && diff > -15) {
          mmu.window.css({
            cursor: 'ns-resize'
          });
          canDrag = true;
        }
      };

      let drag = event => {
        let height = position.bottom - event.y;
        let okHeight = height > 200;
        let within = event.y > parent.position().top;

        if (canDrag && within && okHeight) {
          mmu.window.css({
            height: `${height}px`
          });
        }
      };

      let mouseup = event => {
        canDrag = false;
      };

      let mouseleave = event => {
        canDrag = false;
      };

      mmu.window.addEventListener('mousemove', hover);
      mmu.window.addEventListener('mousedown', mousedown);
      parent.addEventListener('mousemove', drag);
      mmu.window.addEventListener('mouseup', mouseup);
      parent.addEventListener('mouseup', mouseleave);
    });
  };

  return mmu;
}

},{"../functions/System.js":20}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.System = System;

function System() {
  const mmu = {};

  mmu.connect = (params = {
    encode: true,
    data: {}
  }) => {
    if (params.encode == undefined) params.encode = true;

    if (params.encode == true) {
      let sentence = JSON.stringify(params.data);
      let dictionary = kerdx.array.toSet(sentence.split('')).join('');
      let code = compressor.encodeLZW(sentence, dictionary);
      params.data = {
        code,
        dictionary,
        encoded: true
      };
    }

    return new Promise((resolve, reject) => {
      appLibrary.ajax(params).then(result => {
        result = JSON.parse(result);

        if (result.encoded == true) {
          result = JSON.parse(compressor.decodeLZW(result.code, result.dictionary));
        }

        resolve(result);
      }).catch(err => {
        reject(err);
      });
    });
  };

  return mmu;
}

},{}],21:[function(require,module,exports){
const { Kerdx, Compression, AppLibrary } = require('@thekade/kerdx');
window.kerdx = new Kerdx();
const { Logger } = require('./functions/Logger.js');
const { System } = require('./functions/System.js');

console.log('Hello world ')
window.mmu = {};
window.compressor = Compression();
window.appLibrary = AppLibrary();

let logger = new Logger();
let system = new System();
window.k = kerdx;

mmu.generateRequestContent = (params = { name: '', options: [] }) => {
    let label = kerdx.camelCasedToText(params.name);
    let nodeName = 'input';

    if (Array.isArray(params.options)) {
        nodeName = 'select';
    }

    let content = kerdx.createElement({
        element: 'div', attributes: { class: 'request-window-content' }, children: [
            { element: 'label', attributes: { class: 'request-window-content-label', id: name }, text: label },
            { element: nodeName, attributes: { class: 'request-window-content-data', name: params.name } },
        ]
    });

    if (Array.isArray(params.options)) {
        content.find('.request-window-content-data').makeElement({
            element: 'option', attributes: { selected: true, disabled: true, value: null }, text: `Select ${label}`
        });

        for (let option of params.options) {
            content.find('.request-window-content-data').makeElement({
                element: 'option', attributes: { value: option }, text: option
            });
        }
    }

    return content;
}

mmu.generateData = () => {
    let data = kerdx.createElement({
        element: 'div', attributes: { class: 'request-single-data' }, children: [
            { element: 'input', attributes: { class: 'request-single-data-name', placeHolder: 'Name' } },
            { element: 'label', text: '=>' },
            { element: 'input', attributes: { class: 'request-single-data-value', placeHolder: 'Value' } },
            { element: 'select', attributes: { class: 'request-single-data-type' }, options: ['String', 'Array', 'Json'] },
            { element: 'i', attributes: { class: 'request-single-data-remove fas fa-trash' } }
        ]
    });

    return data;
}

mmu.validateRequest = () => {
    let requestContents = document.body.find('#request-contents');
    let validateForm = kerdx.validateForm(requestContents);
    if (!validateForm.flag) {
        logger.write(`${kerdx.camelCasedToText(validateForm.elementName)} is required`);
        return false;
    }

    return true;
}

mmu.sendRequest = () => {
    let requestContents = document.body.find('#request-contents');

    if (mmu.validateRequest()) {
        let params = kerdx.jsonForm(requestContents);
        let requestData = document.body.find('#request-data');
        let allData = requestData.findAll('.request-single-data');
        params.data = {};
        let value, type;
        for (let i = 0; i < allData.length; i++) {
            value = allData[i].find('.request-single-data-value').value;
            type = allData[i].find('.request-single-data-type').value;
            if (type == 'Json') {
                params.data[allData[i].find('.request-single-data-name').value] = JSON.parse(value);
            }
            else if (type == 'Array') {
                params.data[allData[i].find('.request-single-data-name').value] = value == '' ? [] : value.split(',');
            }
            else {
                params.data[allData[i].find('.request-single-data-name').value] = value;
            }
        }
        logger.disableInput();
        logger.write(`Connecting to ${params.url}`);
        system.connect(params).then(result => {
            logger.write('Connected');
            logger.write(result);
        }).catch(error => {
            console.log(error)
        }).finally(logger.enableInput());
    }
}

mmu.render = () => {
    let header = document.body.makeElement({
        element: 'header', attributes: { id: 'header-window' }
    });

    let main = document.body.makeElement({
        element: 'main', attributes: { id: 'main-window' }, children: [
            { element: 'nav', attributes: { id: 'navigator' } },
            {
                element: 'section', attributes: { id: 'request-window' }, children: [
                    {
                        element: 'div', attributes: { id: 'request-contents' }, children: [
                            mmu.generateRequestContent({ name: 'url' }),
                            mmu.generateRequestContent({ name: 'method', options: ['POST', 'GET', 'DELETE'] }),
                            {
                                element: 'div', attributes: { class: 'request-window-content' }, children: [
                                    { element: 'label', attributes: { class: 'request-window-content-label' }, text: 'Request Data' },
                                    { element: 'i', attributes: { class: 'fas fa-plus', id: 'new-data' } }
                                ]
                            },
                        ]
                    },
                    { element: 'div', attributes: { id: 'request-data' } },
                    {
                        element: 'div', attributes: { id: 'request-controls' }, children: [
                            { element: 'button', attributes: { id: 'submit-request' }, text: 'Submit Request' }
                        ]
                    }
                ]
            },
            logger.createWindow()
        ]
    });

    let newData = main.find('#new-data');
    let submitRequest = main.find('#submit-request');
    let requestData = main.find('#request-data');
    let responseWindow = main.find('#response-window');
    let responseWindowToggle = main.find('#response-window-toggle');
    let responseWindowClear = main.find('#response-window-clear');

    newData.addEventListener('click', event => {
        requestData.makeElement(mmu.generateData());
    });

    requestData.addEventListener('click', event => {
        if (event.target.classList.contains('request-single-data-remove')) {
            event.target.parentNode.remove();
        }
    });

    submitRequest.addEventListener('click', event => {
        mmu.sendRequest();
    });

    responseWindowToggle.addEventListener('click', event => {
        responseWindow.toggleClass('response-window-full');
        responseWindowToggle.toggleClass('fa-arrow-down');
        responseWindowToggle.toggleClass('fa-arrow-up');
    });

    responseWindowClear.addEventListener('click', event => {
        mmu.clearLog();
    });
}

document.addEventListener('DOMContentLoaded', event => {
    mmu.render();
});

},{"./functions/Logger.js":19,"./functions/System.js":20,"@thekade/kerdx":"@thekade/kerdx"}]},{},[21])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
